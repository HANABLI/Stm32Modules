
Timer6_100ms_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c38  08000c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c38  08000c38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c38  08000c38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c38  08000c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08000c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000c4c  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006571  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e50  00000000  00000000  000265ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  00027af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c4de  00000000  00000000  00028158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000531a  00000000  00000000  00044636  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ace0d  00000000  00000000  00049950  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f675d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c4c  00000000  00000000  000f67d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c20 	.word	0x08000c20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000c20 	.word	0x08000c20

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x28>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f91f 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f000 fc72 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f937 	bl	8000492 <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f8ff 	bl	800043e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_IncTick+0x20>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_IncTick+0x24>)
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	20000028 	.word	0x20000028

08000288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f003 0307 	and.w	r3, r3, #7
 8000296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <__NVIC_SetPriorityGrouping+0x44>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002a4:	4013      	ands	r3, r2
 80002a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ba:	4a04      	ldr	r2, [pc, #16]	; (80002cc <__NVIC_SetPriorityGrouping+0x44>)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	60d3      	str	r3, [r2, #12]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__NVIC_GetPriorityGrouping+0x18>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	0a1b      	lsrs	r3, r3, #8
 80002da:	f003 0307 	and.w	r3, r3, #7
}
 80002de:	4618      	mov	r0, r3
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	db0b      	blt.n	8000316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 021f 	and.w	r2, r3, #31
 8000304:	4907      	ldr	r1, [pc, #28]	; (8000324 <__NVIC_EnableIRQ+0x38>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	095b      	lsrs	r3, r3, #5
 800030c:	2001      	movs	r0, #1
 800030e:	fa00 f202 	lsl.w	r2, r0, r2
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e100 	.word	0xe000e100

08000328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	db0a      	blt.n	8000352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	b2da      	uxtb	r2, r3
 8000340:	490c      	ldr	r1, [pc, #48]	; (8000374 <__NVIC_SetPriority+0x4c>)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	0112      	lsls	r2, r2, #4
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	440b      	add	r3, r1
 800034c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000350:	e00a      	b.n	8000368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4908      	ldr	r1, [pc, #32]	; (8000378 <__NVIC_SetPriority+0x50>)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 030f 	and.w	r3, r3, #15
 800035e:	3b04      	subs	r3, #4
 8000360:	0112      	lsls	r2, r2, #4
 8000362:	b2d2      	uxtb	r2, r2
 8000364:	440b      	add	r3, r1
 8000366:	761a      	strb	r2, [r3, #24]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000e100 	.word	0xe000e100
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800037c:	b480      	push	{r7}
 800037e:	b089      	sub	sp, #36	; 0x24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000390:	69fb      	ldr	r3, [r7, #28]
 8000392:	f1c3 0307 	rsb	r3, r3, #7
 8000396:	2b04      	cmp	r3, #4
 8000398:	bf28      	it	cs
 800039a:	2304      	movcs	r3, #4
 800039c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	3304      	adds	r3, #4
 80003a2:	2b06      	cmp	r3, #6
 80003a4:	d902      	bls.n	80003ac <NVIC_EncodePriority+0x30>
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3b03      	subs	r3, #3
 80003aa:	e000      	b.n	80003ae <NVIC_EncodePriority+0x32>
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b0:	f04f 32ff 	mov.w	r2, #4294967295
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	43da      	mvns	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	401a      	ands	r2, r3
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003c4:	f04f 31ff 	mov.w	r1, #4294967295
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	43d9      	mvns	r1, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	4313      	orrs	r3, r2
         );
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3724      	adds	r7, #36	; 0x24
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003f4:	d301      	bcc.n	80003fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003f6:	2301      	movs	r3, #1
 80003f8:	e00f      	b.n	800041a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <SysTick_Config+0x40>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3b01      	subs	r3, #1
 8000400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000402:	210f      	movs	r1, #15
 8000404:	f04f 30ff 	mov.w	r0, #4294967295
 8000408:	f7ff ff8e 	bl	8000328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <SysTick_Config+0x40>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <SysTick_Config+0x40>)
 8000414:	2207      	movs	r2, #7
 8000416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	e000e010 	.word	0xe000e010

08000428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ff29 	bl	8000288 <__NVIC_SetPriorityGrouping>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b086      	sub	sp, #24
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
 800044a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000450:	f7ff ff3e 	bl	80002d0 <__NVIC_GetPriorityGrouping>
 8000454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	68b9      	ldr	r1, [r7, #8]
 800045a:	6978      	ldr	r0, [r7, #20]
 800045c:	f7ff ff8e 	bl	800037c <NVIC_EncodePriority>
 8000460:	4602      	mov	r2, r0
 8000462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000466:	4611      	mov	r1, r2
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff5d 	bl	8000328 <__NVIC_SetPriority>
}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
 800047c:	4603      	mov	r3, r0
 800047e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff31 	bl	80002ec <__NVIC_EnableIRQ>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ffa2 	bl	80003e4 <SysTick_Config>
 80004a0:	4603      	mov	r3, r0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004ae:	f000 f802 	bl	80004b6 <HAL_SYSTICK_Callback>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004d2:	e160      	b.n	8000796 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	2101      	movs	r1, #1
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	4013      	ands	r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 8152 	beq.w	8000790 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d003      	beq.n	80004fc <HAL_GPIO_Init+0x38>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	2b12      	cmp	r3, #18
 80004fa:	d123      	bne.n	8000544 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	08da      	lsrs	r2, r3, #3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3208      	adds	r2, #8
 8000504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000508:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	f003 0307 	and.w	r3, r3, #7
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	220f      	movs	r2, #15
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	693a      	ldr	r2, [r7, #16]
 800051c:	4013      	ands	r3, r2
 800051e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	691a      	ldr	r2, [r3, #16]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	4313      	orrs	r3, r2
 8000534:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	08da      	lsrs	r2, r3, #3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3208      	adds	r2, #8
 800053e:	6939      	ldr	r1, [r7, #16]
 8000540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	2203      	movs	r2, #3
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	4013      	ands	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f003 0203 	and.w	r2, r3, #3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	4313      	orrs	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d00b      	beq.n	8000598 <HAL_GPIO_Init+0xd4>
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d007      	beq.n	8000598 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800058c:	2b11      	cmp	r3, #17
 800058e:	d003      	beq.n	8000598 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2b12      	cmp	r3, #18
 8000596:	d130      	bne.n	80005fa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2203      	movs	r2, #3
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68da      	ldr	r2, [r3, #12]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	4313      	orrs	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ce:	2201      	movs	r2, #1
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	4013      	ands	r3, r2
 80005dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	f003 0201 	and.w	r2, r3, #1
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2203      	movs	r2, #3
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4013      	ands	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	689a      	ldr	r2, [r3, #8]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	4313      	orrs	r3, r2
 8000622:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	2b00      	cmp	r3, #0
 8000634:	f000 80ac 	beq.w	8000790 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000638:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <HAL_GPIO_Init+0x2f0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a5d      	ldr	r2, [pc, #372]	; (80007b4 <HAL_GPIO_Init+0x2f0>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <HAL_GPIO_Init+0x2f0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000650:	4a59      	ldr	r2, [pc, #356]	; (80007b8 <HAL_GPIO_Init+0x2f4>)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	089b      	lsrs	r3, r3, #2
 8000656:	3302      	adds	r3, #2
 8000658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	f003 0303 	and.w	r3, r3, #3
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	220f      	movs	r2, #15
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	4013      	ands	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800067a:	d025      	beq.n	80006c8 <HAL_GPIO_Init+0x204>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <HAL_GPIO_Init+0x2f8>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d01f      	beq.n	80006c4 <HAL_GPIO_Init+0x200>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a4e      	ldr	r2, [pc, #312]	; (80007c0 <HAL_GPIO_Init+0x2fc>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d019      	beq.n	80006c0 <HAL_GPIO_Init+0x1fc>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a4d      	ldr	r2, [pc, #308]	; (80007c4 <HAL_GPIO_Init+0x300>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d013      	beq.n	80006bc <HAL_GPIO_Init+0x1f8>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a4c      	ldr	r2, [pc, #304]	; (80007c8 <HAL_GPIO_Init+0x304>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d00d      	beq.n	80006b8 <HAL_GPIO_Init+0x1f4>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a4b      	ldr	r2, [pc, #300]	; (80007cc <HAL_GPIO_Init+0x308>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d007      	beq.n	80006b4 <HAL_GPIO_Init+0x1f0>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a4a      	ldr	r2, [pc, #296]	; (80007d0 <HAL_GPIO_Init+0x30c>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d101      	bne.n	80006b0 <HAL_GPIO_Init+0x1ec>
 80006ac:	2306      	movs	r3, #6
 80006ae:	e00c      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006b0:	2307      	movs	r3, #7
 80006b2:	e00a      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006b4:	2305      	movs	r3, #5
 80006b6:	e008      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006b8:	2304      	movs	r3, #4
 80006ba:	e006      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006bc:	2303      	movs	r3, #3
 80006be:	e004      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006c0:	2302      	movs	r3, #2
 80006c2:	e002      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <HAL_GPIO_Init+0x206>
 80006c8:	2300      	movs	r3, #0
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	f002 0203 	and.w	r2, r2, #3
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	4093      	lsls	r3, r2
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006da:	4937      	ldr	r1, [pc, #220]	; (80007b8 <HAL_GPIO_Init+0x2f4>)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	3302      	adds	r3, #2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006e8:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <HAL_GPIO_Init+0x310>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	43db      	mvns	r3, r3
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d003      	beq.n	800070c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4313      	orrs	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800070c:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <HAL_GPIO_Init+0x310>)
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <HAL_GPIO_Init+0x310>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	43db      	mvns	r3, r3
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	4013      	ands	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4313      	orrs	r3, r2
 8000734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000736:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <HAL_GPIO_Init+0x310>)
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_GPIO_Init+0x310>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	43db      	mvns	r3, r3
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4313      	orrs	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000760:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <HAL_GPIO_Init+0x310>)
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_GPIO_Init+0x310>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	43db      	mvns	r3, r3
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4313      	orrs	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <HAL_GPIO_Init+0x310>)
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3301      	adds	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	fa22 f303 	lsr.w	r3, r2, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	f47f ae97 	bne.w	80004d4 <HAL_GPIO_Init+0x10>
  }
}
 80007a6:	bf00      	nop
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010000 	.word	0x40010000
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48000800 	.word	0x48000800
 80007c4:	48000c00 	.word	0x48000c00
 80007c8:	48001000 	.word	0x48001000
 80007cc:	48001400 	.word	0x48001400
 80007d0:	48001800 	.word	0x48001800
 80007d4:	40010400 	.word	0x40010400

080007d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	4013      	ands	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d004      	beq.n	80007fa <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	041a      	lsls	r2, r3, #16
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80007f8:	e002      	b.n	8000800 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007fa:	887a      	ldrh	r2, [r7, #2]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	619a      	str	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e01d      	b.n	800085a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d106      	bne.n	8000838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f972 	bl	8000b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2202      	movs	r2, #2
 800083c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3304      	adds	r3, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f000 f834 	bl	80008b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2201      	movs	r2, #1
 8000854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2202      	movs	r2, #2
 8000870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_TIM_Base_Start+0x50>)
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b06      	cmp	r3, #6
 8000884:	d00b      	beq.n	800089e <HAL_TIM_Base_Start+0x3a>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800088c:	d007      	beq.n	800089e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f042 0201 	orr.w	r2, r2, #1
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	00010007 	.word	0x00010007

080008b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a42      	ldr	r2, [pc, #264]	; (80009d4 <TIM_Base_SetConfig+0x11c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d013      	beq.n	80008f8 <TIM_Base_SetConfig+0x40>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d6:	d00f      	beq.n	80008f8 <TIM_Base_SetConfig+0x40>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a3f      	ldr	r2, [pc, #252]	; (80009d8 <TIM_Base_SetConfig+0x120>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d00b      	beq.n	80008f8 <TIM_Base_SetConfig+0x40>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a3e      	ldr	r2, [pc, #248]	; (80009dc <TIM_Base_SetConfig+0x124>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d007      	beq.n	80008f8 <TIM_Base_SetConfig+0x40>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a3d      	ldr	r2, [pc, #244]	; (80009e0 <TIM_Base_SetConfig+0x128>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d003      	beq.n	80008f8 <TIM_Base_SetConfig+0x40>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a3c      	ldr	r2, [pc, #240]	; (80009e4 <TIM_Base_SetConfig+0x12c>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d108      	bne.n	800090a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	4313      	orrs	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a31      	ldr	r2, [pc, #196]	; (80009d4 <TIM_Base_SetConfig+0x11c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d01f      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000918:	d01b      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <TIM_Base_SetConfig+0x120>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d017      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <TIM_Base_SetConfig+0x124>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d013      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <TIM_Base_SetConfig+0x128>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d00f      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a2c      	ldr	r2, [pc, #176]	; (80009e8 <TIM_Base_SetConfig+0x130>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d00b      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <TIM_Base_SetConfig+0x134>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d007      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <TIM_Base_SetConfig+0x138>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d003      	beq.n	8000952 <TIM_Base_SetConfig+0x9a>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <TIM_Base_SetConfig+0x12c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d108      	bne.n	8000964 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4313      	orrs	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <TIM_Base_SetConfig+0x11c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d013      	beq.n	80009b8 <TIM_Base_SetConfig+0x100>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <TIM_Base_SetConfig+0x128>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d00f      	beq.n	80009b8 <TIM_Base_SetConfig+0x100>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <TIM_Base_SetConfig+0x130>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d00b      	beq.n	80009b8 <TIM_Base_SetConfig+0x100>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <TIM_Base_SetConfig+0x134>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d007      	beq.n	80009b8 <TIM_Base_SetConfig+0x100>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <TIM_Base_SetConfig+0x138>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d003      	beq.n	80009b8 <TIM_Base_SetConfig+0x100>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <TIM_Base_SetConfig+0x12c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d103      	bne.n	80009c0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2201      	movs	r2, #1
 80009c4:	615a      	str	r2, [r3, #20]
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40012c00 	.word	0x40012c00
 80009d8:	40000400 	.word	0x40000400
 80009dc:	40000800 	.word	0x40000800
 80009e0:	40013400 	.word	0x40013400
 80009e4:	40015000 	.word	0x40015000
 80009e8:	40014000 	.word	0x40014000
 80009ec:	40014400 	.word	0x40014400
 80009f0:	40014800 	.word	0x40014800

080009f4 <SysTick_Handler>:
 */

#include "stm32f3xx_hal.h"

void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80009f8:	f7ff fc32 	bl	8000260 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80009fc:	f7ff fd55 	bl	80004aa <HAL_SYSTICK_IRQHandler>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <main>:
void TIMER6_Init(void);
void GPIO_Init(void);
TIM_HandleTypeDef htimer6;

int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_Init();
 8000a08:	f7ff fbe4 	bl	80001d4 <HAL_Init>

	Sysclk_Config();
 8000a0c:	f000 f81c 	bl	8000a48 <Sysclk_Config>
	GPIO_Init();
 8000a10:	f000 f83c 	bl	8000a8c <GPIO_Init>
	TIMER6_Init();
 8000a14:	f000 f820 	bl	8000a58 <TIMER6_Init>

	//Lets start timer
	HAL_TIM_Base_Start(&htimer6);
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <main+0x3c>)
 8000a1a:	f7ff ff23 	bl	8000864 <HAL_TIM_Base_Start>
	while(1){
		/* Loop uintil the update event flag is set*/
		while(! (TIM6->SR &TIM_SR_UIF));
 8000a1e:	bf00      	nop
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <main+0x40>)
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f9      	beq.n	8000a20 <main+0x1c>
		/*toggle Pin 5*/
		TIM6->SR = 0;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <main+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a32:	2120      	movs	r1, #32
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f7ff fece 	bl	80007d8 <HAL_GPIO_TogglePin>
		while(! (TIM6->SR &TIM_SR_UIF));
 8000a3c:	e7ef      	b.n	8000a1e <main+0x1a>
 8000a3e:	bf00      	nop
 8000a40:	2000002c 	.word	0x2000002c
 8000a44:	40001000 	.word	0x40001000

08000a48 <Sysclk_Config>:

	return 0;
}

void Sysclk_Config(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0


}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	//__HAL_RCC_TIM6_CLK_ENABLE();
	htimer6.Instance = TIM6;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <TIMER6_Init+0x2c>)
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <TIMER6_Init+0x30>)
 8000a60:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 15;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <TIMER6_Init+0x2c>)
 8000a64:	220f      	movs	r2, #15
 8000a66:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 50000-1;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <TIMER6_Init+0x2c>)
 8000a6a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a6e:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htimer6)!= HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <TIMER6_Init+0x2c>)
 8000a72:	f7ff fecb 	bl	800080c <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <TIMER6_Init+0x28>
	{
		Error_handler();
 8000a7c:	f000 f828 	bl	8000ad0 <Error_handler>
	}
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	40001000 	.word	0x40001000

08000a8c <GPIO_Init>:
void GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <GPIO_Init+0x40>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <GPIO_Init+0x40>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <GPIO_Init+0x40>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
	ledgpio.Pin = GPIO_PIN_5;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f7ff fd01 	bl	80004c4 <HAL_GPIO_Init>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <Error_handler>:
void Error_handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	while(1);
 8000ad4:	e7fe      	b.n	8000ad4 <Error_handler+0x4>
	...

08000ad8 <HAL_MspInit>:
 *  Created on: Jun 11, 2020
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f7ff fca3 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exception
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x40>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_MspInit+0x40>)
 8000ae8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000aec:	6253      	str	r3, [r2, #36]	; 0x24
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	f06f 000b 	mvn.w	r0, #11
 8000af6:	f7ff fca2 	bl	800043e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	f06f 000a 	mvn.w	r0, #10
 8000b02:	f7ff fc9c 	bl	800043e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f06f 0009 	mvn.w	r0, #9
 8000b0e:	f7ff fc96 	bl	800043e <HAL_NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	// 1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_TIM_Base_MspInit+0x38>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_TIM_Base_MspInit+0x38>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_TIM_Base_MspInit+0x38>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b3c:	2036      	movs	r0, #54	; 0x36
 8000b3e:	f7ff fc9a 	bl	8000476 <HAL_NVIC_EnableIRQ>

	//3. Setup the priority for TIM6_DAC_TRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	2036      	movs	r0, #54	; 0x36
 8000b48:	f7ff fc79 	bl	800043e <HAL_NVIC_SetPriority>
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <SystemInit+0x28>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <SystemInit+0x28>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SystemInit+0x28>)
 8000b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b72:	609a      	str	r2, [r3, #8]
#endif
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b8a:	e003      	b.n	8000b94 <LoopCopyDataInit>

08000b8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b92:	3104      	adds	r1, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b9c:	d3f6      	bcc.n	8000b8c <CopyDataInit>
	ldr	r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ba0:	e002      	b.n	8000ba8 <LoopFillZerobss>

08000ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ba2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba4:	f842 3b04 	str.w	r3, [r2], #4

08000ba8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <LoopForever+0x16>)
	cmp	r2, r3
 8000baa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bac:	d3f9      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bae:	f7ff ffd3 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f000 f811 	bl	8000bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff ff25 	bl	8000a04 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bbc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bc0:	08000c40 	.word	0x08000c40
	ldr	r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bcc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bd0:	2000006c 	.word	0x2000006c

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <__libc_init_array>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4e0d      	ldr	r6, [pc, #52]	; (8000c10 <__libc_init_array+0x38>)
 8000bdc:	4c0d      	ldr	r4, [pc, #52]	; (8000c14 <__libc_init_array+0x3c>)
 8000bde:	1ba4      	subs	r4, r4, r6
 8000be0:	10a4      	asrs	r4, r4, #2
 8000be2:	2500      	movs	r5, #0
 8000be4:	42a5      	cmp	r5, r4
 8000be6:	d109      	bne.n	8000bfc <__libc_init_array+0x24>
 8000be8:	4e0b      	ldr	r6, [pc, #44]	; (8000c18 <__libc_init_array+0x40>)
 8000bea:	4c0c      	ldr	r4, [pc, #48]	; (8000c1c <__libc_init_array+0x44>)
 8000bec:	f000 f818 	bl	8000c20 <_init>
 8000bf0:	1ba4      	subs	r4, r4, r6
 8000bf2:	10a4      	asrs	r4, r4, #2
 8000bf4:	2500      	movs	r5, #0
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d105      	bne.n	8000c06 <__libc_init_array+0x2e>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c00:	4798      	blx	r3
 8000c02:	3501      	adds	r5, #1
 8000c04:	e7ee      	b.n	8000be4 <__libc_init_array+0xc>
 8000c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c0a:	4798      	blx	r3
 8000c0c:	3501      	adds	r5, #1
 8000c0e:	e7f2      	b.n	8000bf6 <__libc_init_array+0x1e>
 8000c10:	08000c38 	.word	0x08000c38
 8000c14:	08000c38 	.word	0x08000c38
 8000c18:	08000c38 	.word	0x08000c38
 8000c1c:	08000c3c 	.word	0x08000c3c

08000c20 <_init>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr

08000c2c <_fini>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr
