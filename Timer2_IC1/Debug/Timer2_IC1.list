
Timer2_IC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08005d10  08005d10  00015d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd0  08005fd0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005fd0  08005fd0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fd0  08005fd0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001dc  080061b4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080061b4  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3ef  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ee  00000000  00000000  0002b5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002d700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf31  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081bc  00000000  00000000  0004b089  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000af4cc  00000000  00000000  00053245  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  0010278c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cf4 	.word	0x08005cf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08005cf4 	.word	0x08005cf4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x28>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f92b 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f002 ff3a 	bl	8003a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f943 	bl	8000e8e <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f90b 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004
 8000c40:	20000000 	.word	0x20000000

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004
 8000c68:	20000210 	.word	0x20000210

08000c6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000210 	.word	0x20000210

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff3e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff31 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d106      	bne.n	8000ec4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ec2:	e005      	b.n	8000ed0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eca:	f023 0304 	bic.w	r3, r3, #4
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ee4:	f000 f802 	bl	8000eec <HAL_SYSTICK_Callback>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e160      	b.n	80011ce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8152 	beq.w	80011c8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x38>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b12      	cmp	r3, #18
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	6939      	ldr	r1, [r7, #16]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_GPIO_Init+0xd4>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc4:	2b11      	cmp	r3, #17
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80ac 	beq.w	80011c8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a5d      	ldr	r2, [pc, #372]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <HAL_GPIO_Init+0x2f0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001088:	4a59      	ldr	r2, [pc, #356]	; (80011f0 <HAL_GPIO_Init+0x2f4>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b2:	d025      	beq.n	8001100 <HAL_GPIO_Init+0x204>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x2f8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d01f      	beq.n	80010fc <HAL_GPIO_Init+0x200>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x2fc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d019      	beq.n	80010f8 <HAL_GPIO_Init+0x1fc>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x300>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x1f8>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x304>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1f4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x308>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1f0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_GPIO_Init+0x30c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1ec>
 80010e4:	2306      	movs	r3, #6
 80010e6:	e00c      	b.n	8001102 <HAL_GPIO_Init+0x206>
 80010e8:	2307      	movs	r3, #7
 80010ea:	e00a      	b.n	8001102 <HAL_GPIO_Init+0x206>
 80010ec:	2305      	movs	r3, #5
 80010ee:	e008      	b.n	8001102 <HAL_GPIO_Init+0x206>
 80010f0:	2304      	movs	r3, #4
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x206>
 80010f4:	2303      	movs	r3, #3
 80010f6:	e004      	b.n	8001102 <HAL_GPIO_Init+0x206>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_Init+0x206>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <HAL_GPIO_Init+0x206>
 8001100:	2300      	movs	r3, #0
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	f002 0203 	and.w	r2, r2, #3
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	4093      	lsls	r3, r2
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001112:	4937      	ldr	r1, [pc, #220]	; (80011f0 <HAL_GPIO_Init+0x2f4>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_GPIO_Init+0x310>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <HAL_GPIO_Init+0x310>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_GPIO_Init+0x310>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_GPIO_Init+0x310>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_GPIO_Init+0x310>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <HAL_GPIO_Init+0x310>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_GPIO_Init+0x310>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_GPIO_Init+0x310>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f47f ae97 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48001000 	.word	0x48001000
 8001204:	48001400 	.word	0x48001400
 8001208:	48001800 	.word	0x48001800
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001216:	af00      	add	r7, sp, #0
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	f000 bf01 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8160 	beq.w	80014fa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800123a:	4bae      	ldr	r3, [pc, #696]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d00c      	beq.n	8001260 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001246:	4bab      	ldr	r3, [pc, #684]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b08      	cmp	r3, #8
 8001250:	d159      	bne.n	8001306 <HAL_RCC_OscConfig+0xf6>
 8001252:	4ba8      	ldr	r3, [pc, #672]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d152      	bne.n	8001306 <HAL_RCC_OscConfig+0xf6>
 8001260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001264:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001268:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001274:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <HAL_RCC_OscConfig+0x82>
 800128c:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0xae>
 8001292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001296:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012ba:	4b8e      	ldr	r3, [pc, #568]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80012c6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80012d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8102 	beq.w	80014f8 <HAL_RCC_OscConfig+0x2e8>
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 80fc 	bne.w	80014f8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	f000 be93 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x110>
 8001312:	4b78      	ldr	r3, [pc, #480]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a77      	ldr	r2, [pc, #476]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e030      	b.n	8001382 <HAL_RCC_OscConfig+0x172>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x134>
 800132a:	4b72      	ldr	r3, [pc, #456]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a71      	ldr	r2, [pc, #452]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6f      	ldr	r3, [pc, #444]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6e      	ldr	r2, [pc, #440]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800133c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01e      	b.n	8001382 <HAL_RCC_OscConfig+0x172>
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x15a>
 8001350:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a67      	ldr	r2, [pc, #412]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a64      	ldr	r2, [pc, #400]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x172>
 800136a:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a61      	ldr	r2, [pc, #388]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a5e      	ldr	r2, [pc, #376]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d059      	beq.n	8001440 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fc6e 	bl	8000c6c <HAL_GetTick>
 8001390:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fc69 	bl	8000c6c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d902      	bls.n	80013ac <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f000 be40 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80013c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x1ce>
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x1fa>
 80013de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001412:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800141e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ab      	beq.n	8001396 <HAL_RCC_OscConfig+0x186>
 800143e:	e05c      	b.n	80014fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fc14 	bl	8000c6c <HAL_GetTick>
 8001444:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144a:	f7ff fc0f 	bl	8000c6c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d902      	bls.n	8001460 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	f000 bde6 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>
 8001460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001464:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001474:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0x282>
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x2ae>
 8001492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001496:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80014a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_RCC_OscConfig+0x2e4>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80014c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80014ca:	fa92 f2a2 	rbit	r2, r2
 80014ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80014d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014d6:	fab2 f282 	clz	r2, r2
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f002 021f 	and.w	r2, r2, #31
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ab      	bne.n	800144a <HAL_RCC_OscConfig+0x23a>
 80014f2:	e002      	b.n	80014fa <HAL_RCC_OscConfig+0x2ea>
 80014f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8170 	beq.w	80017ea <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800150a:	4bd0      	ldr	r3, [pc, #832]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00c      	beq.n	8001530 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001516:	4bcd      	ldr	r3, [pc, #820]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d16d      	bne.n	80015fe <HAL_RCC_OscConfig+0x3ee>
 8001522:	4bca      	ldr	r3, [pc, #808]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800152a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152e:	d166      	bne.n	80015fe <HAL_RCC_OscConfig+0x3ee>
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001542:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <HAL_RCC_OscConfig+0x350>
 800155a:	4bbc      	ldr	r3, [pc, #752]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0x378>
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001578:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001584:	4bb1      	ldr	r3, [pc, #708]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	2202      	movs	r2, #2
 800158a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800158e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001592:	fa92 f2a2 	rbit	r2, r2
 8001596:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800159a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f002 021f 	and.w	r2, r2, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_RCC_OscConfig+0x3ba>
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f000 bd31 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4ba0      	ldr	r3, [pc, #640]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	21f8      	movs	r1, #248	; 0xf8
 80015da:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80015e2:	fa91 f1a1 	rbit	r1, r1
 80015e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015ee:	fab1 f181 	clz	r1, r1
 80015f2:	b2c9      	uxtb	r1, r1
 80015f4:	408b      	lsls	r3, r1
 80015f6:	4995      	ldr	r1, [pc, #596]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fc:	e0f5      	b.n	80017ea <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8085 	beq.w	8001714 <HAL_RCC_OscConfig+0x504>
 800160a:	2301      	movs	r3, #1
 800160c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800161c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800162a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	461a      	mov	r2, r3
 8001632:	2301      	movs	r3, #1
 8001634:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fb19 	bl	8000c6c <HAL_GetTick>
 800163a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fb14 	bl	8000c6c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d902      	bls.n	8001656 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	f000 bceb 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001668:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <HAL_RCC_OscConfig+0x476>
 8001680:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	e013      	b.n	80016ae <HAL_RCC_OscConfig+0x49e>
 8001686:	2302      	movs	r3, #2
 8001688:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800169e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016aa:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2202      	movs	r2, #2
 80016b0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80016b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80016b8:	fa92 f2a2 	rbit	r2, r2
 80016bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80016c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016c4:	fab2 f282 	clz	r2, r2
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f042 0220 	orr.w	r2, r2, #32
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	f002 021f 	and.w	r2, r2, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f202 	lsl.w	r2, r1, r2
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0af      	beq.n	8001640 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	21f8      	movs	r1, #248	; 0xf8
 80016f0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80016f8:	fa91 f1a1 	rbit	r1, r1
 80016fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001700:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001704:	fab1 f181 	clz	r1, r1
 8001708:	b2c9      	uxtb	r1, r1
 800170a:	408b      	lsls	r3, r1
 800170c:	494f      	ldr	r1, [pc, #316]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
 8001712:	e06a      	b.n	80017ea <HAL_RCC_OscConfig+0x5da>
 8001714:	2301      	movs	r3, #1
 8001716:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001726:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	461a      	mov	r2, r3
 800173c:	2300      	movs	r3, #0
 800173e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fa94 	bl	8000c6c <HAL_GetTick>
 8001744:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fa8f 	bl	8000c6c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d902      	bls.n	8001760 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	f000 bc66 	b.w	800202c <HAL_RCC_OscConfig+0xe1c>
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001772:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0x580>
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	e013      	b.n	80017b8 <HAL_RCC_OscConfig+0x5a8>
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_RCC_OscConfig+0x63c>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	2202      	movs	r2, #2
 80017ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80017be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80017c2:	fa92 f2a2 	rbit	r2, r2
 80017c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80017ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017ce:	fab2 f282 	clz	r2, r2
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f042 0220 	orr.w	r2, r2, #32
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f002 021f 	and.w	r2, r2, #31
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1af      	bne.n	800174a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80da 	beq.w	80019ae <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d069      	beq.n	80018d8 <HAL_RCC_OscConfig+0x6c8>
 8001804:	2301      	movs	r3, #1
 8001806:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001816:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x640>)
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	461a      	mov	r2, r3
 800182a:	2301      	movs	r3, #1
 800182c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182e:	f7ff fa1d 	bl	8000c6c <HAL_GetTick>
 8001832:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	e00d      	b.n	8001854 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fa18 	bl	8000c6c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d905      	bls.n	8001854 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e3ef      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 800184c:	40021000 	.word	0x40021000
 8001850:	10908120 	.word	0x10908120
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001896:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001898:	4ba4      	ldr	r3, [pc, #656]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 800189a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018a0:	2102      	movs	r1, #2
 80018a2:	6019      	str	r1, [r3, #0]
 80018a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f1a3 	rbit	r1, r3
 80018ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018b2:	6019      	str	r1, [r3, #0]
  return result;
 80018b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0b0      	beq.n	8001838 <HAL_RCC_OscConfig+0x628>
 80018d6:	e06a      	b.n	80019ae <HAL_RCC_OscConfig+0x79e>
 80018d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fa93 f2a3 	rbit	r2, r3
 80018ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ee:	601a      	str	r2, [r3, #0]
  return result;
 80018f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_OscConfig+0x920>)
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	461a      	mov	r2, r3
 8001906:	2300      	movs	r3, #0
 8001908:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff f9af 	bl	8000c6c <HAL_GetTick>
 800190e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001912:	e009      	b.n	8001928 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff f9aa 	bl	8000c6c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e381      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 8001928:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001944:	2202      	movs	r2, #2
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800196e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001974:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001978:	2102      	movs	r1, #2
 800197a:	6019      	str	r1, [r3, #0]
 800197c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f1a3 	rbit	r1, r3
 8001986:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800198a:	6019      	str	r1, [r3, #0]
  return result;
 800198c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1b2      	bne.n	8001914 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8157 	beq.w	8001c6c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019da:	61d3      	str	r3, [r2, #28]
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_RCC_OscConfig+0x924>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11a      	bne.n	8001a38 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x924>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_RCC_OscConfig+0x924>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f92d 	bl	8000c6c <HAL_GetTick>
 8001a12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	e009      	b.n	8001a2c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a18:	f7ff f928 	bl	8000c6c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e2ff      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_OscConfig+0x924>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ef      	beq.n	8001a18 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x840>
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a39      	ldr	r2, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	e02f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x8a0>
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x864>
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x8a0>
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x888>
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x8a0>
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f8d7 	bl	8000c6c <HAL_GetTick>
 8001abe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f8d2 	bl	8000c6c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2a7      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 8001adc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x928>
 8001b26:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_RCC_OscConfig+0x91c>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	e013      	b.n	8001b54 <HAL_RCC_OscConfig+0x944>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	10908120 	.word	0x10908120
 8001b34:	40007000 	.word	0x40007000
 8001b38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4bc0      	ldr	r3, [pc, #768]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001b58:	2102      	movs	r1, #2
 8001b5a:	6011      	str	r1, [r2, #0]
 8001b5c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fa92 f1a2 	rbit	r1, r2
 8001b66:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b6a:	6011      	str	r1, [r2, #0]
  return result;
 8001b6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f002 021f 	and.w	r2, r2, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d09a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x8b4>
 8001b8e:	e063      	b.n	8001c58 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff f86c 	bl	8000c6c <HAL_GetTick>
 8001b94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff f867 	bl	8000c6c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e23c      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 8001bb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001be0:	601a      	str	r2, [r3, #0]
  return result;
 8001be2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001be6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_OscConfig+0x9f2>
 8001bfc:	4b95      	ldr	r3, [pc, #596]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	e00d      	b.n	8001c1e <HAL_RCC_OscConfig+0xa0e>
 8001c02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c06:	2202      	movs	r2, #2
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c22:	2102      	movs	r1, #2
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	fa92 f1a2 	rbit	r1, r2
 8001c30:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c34:	6011      	str	r1, [r2, #0]
  return result;
 8001c36:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1a0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c58:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a7b      	ldr	r2, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 81d9 	beq.w	800202a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	f000 81a6 	beq.w	8001fd2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	f040 811e 	bne.w	8001ece <HAL_RCC_OscConfig+0xcbe>
 8001c92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001caa:	601a      	str	r2, [r3, #0]
  return result;
 8001cac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7fe ffd0 	bl	8000c6c <HAL_GetTick>
 8001ccc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe ffcb 	bl	8000c6c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1a2      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 8001ce6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cfe:	601a      	str	r2, [r3, #0]
  return result;
 8001d00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0xb10>
 8001d1a:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	e01b      	b.n	8001d58 <HAL_RCC_OscConfig+0xb48>
 8001d20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d60:	6011      	str	r1, [r2, #0]
 8001d62:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fa92 f1a2 	rbit	r1, r2
 8001d6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d70:	6011      	str	r1, [r2, #0]
  return result;
 8001d72:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d19e      	bne.n	8001cd2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f023 020f 	bic.w	r2, r3, #15
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	492c      	ldr	r1, [pc, #176]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a19      	ldr	r1, [r3, #32]
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	4925      	ldr	r1, [pc, #148]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ddc:	601a      	str	r2, [r3, #0]
  return result;
 8001dde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001de2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	461a      	mov	r2, r3
 8001df6:	2301      	movs	r3, #1
 8001df8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7fe ff37 	bl	8000c6c <HAL_GetTick>
 8001dfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e02:	e009      	b.n	8001e18 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe ff32 	bl	8000c6c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e109      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 8001e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0xc48>
 8001e4c:	4b01      	ldr	r3, [pc, #4]	; (8001e54 <HAL_RCC_OscConfig+0xc44>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e01e      	b.n	8001e90 <HAL_RCC_OscConfig+0xc80>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fa93 f2a3 	rbit	r2, r3
 8001e6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0xe28>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e98:	6011      	str	r1, [r2, #0]
 8001e9a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	fa92 f1a2 	rbit	r1, r2
 8001ea4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ea8:	6011      	str	r1, [r2, #0]
  return result;
 8001eaa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f042 0220 	orr.w	r2, r2, #32
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f002 021f 	and.w	r2, r2, #31
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d09b      	beq.n	8001e04 <HAL_RCC_OscConfig+0xbf4>
 8001ecc:	e0ad      	b.n	800202a <HAL_RCC_OscConfig+0xe1a>
 8001ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee6:	601a      	str	r2, [r3, #0]
  return result;
 8001ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	461a      	mov	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe feb2 	bl	8000c6c <HAL_GetTick>
 8001f08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe fead 	bl	8000c6c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e084      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
 8001f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	601a      	str	r2, [r3, #0]
  return result;
 8001f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_RCC_OscConfig+0xd4c>
 8001f56:	4b38      	ldr	r3, [pc, #224]	; (8002038 <HAL_RCC_OscConfig+0xe28>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e01b      	b.n	8001f94 <HAL_RCC_OscConfig+0xd84>
 8001f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_OscConfig+0xe28>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f107 0214 	add.w	r2, r7, #20
 8001f98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	f107 0214 	add.w	r2, r7, #20
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	fa92 f1a2 	rbit	r1, r2
 8001fa8:	f107 0210 	add.w	r2, r7, #16
 8001fac:	6011      	str	r1, [r2, #0]
  return result;
 8001fae:	f107 0210 	add.w	r2, r7, #16
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d19e      	bne.n	8001f0e <HAL_RCC_OscConfig+0xcfe>
 8001fd0:	e02b      	b.n	800202a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e025      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0xe28>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_RCC_OscConfig+0xe28>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ff0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ff4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d111      	bne.n	8002026 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002002:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002010:	429a      	cmp	r2, r3
 8002012:	d108      	bne.n	8002026 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b09e      	sub	sp, #120	; 0x78
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e162      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b90      	ldr	r3, [pc, #576]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b8d      	ldr	r3, [pc, #564]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	498b      	ldr	r1, [pc, #556]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e14a      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	497f      	ldr	r1, [pc, #508]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80dc 	beq.w	8002268 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d13c      	bne.n	8002132 <HAL_RCC_ClockConfig+0xf6>
 80020b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xa6>
 80020dc:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e00f      	b.n	8002102 <HAL_RCC_ClockConfig+0xc6>
 80020e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	667b      	str	r3, [r7, #100]	; 0x64
 80020f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f4:	663b      	str	r3, [r7, #96]	; 0x60
 80020f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002106:	65ba      	str	r2, [r7, #88]	; 0x58
 8002108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002112:	fab2 f282 	clz	r2, r2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 021f 	and.w	r2, r2, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d17b      	bne.n	8002226 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0f3      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d13c      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x178>
 800213a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_ClockConfig+0x128>
 800215e:	4b4f      	ldr	r3, [pc, #316]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e00f      	b.n	8002184 <HAL_RCC_ClockConfig+0x148>
 8002164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002168:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
 8002172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002176:	643b      	str	r3, [r7, #64]	; 0x40
 8002178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002188:	63ba      	str	r2, [r7, #56]	; 0x38
 800218a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f002 021f 	and.w	r2, r2, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d13a      	bne.n	8002226 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b2      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
 80021b4:	2302      	movs	r3, #2
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1a0>
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	e00d      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1bc>
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
 80021e8:	2302      	movs	r3, #2
 80021ea:	623b      	str	r3, [r7, #32]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	2202      	movs	r2, #2
 80021fa:	61ba      	str	r2, [r7, #24]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	617a      	str	r2, [r7, #20]
  return result;
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f002 021f 	and.w	r2, r2, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e079      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	491a      	ldr	r1, [pc, #104]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7fe fd18 	bl	8000c6c <HAL_GetTick>
 800223c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7fe fd14 	bl	8000c6c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e061      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_ClockConfig+0x260>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d214      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4906      	ldr	r1, [pc, #24]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_RCC_ClockConfig+0x25c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e040      	b.n	800231a <HAL_RCC_ClockConfig+0x2de>
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_ClockConfig+0x2e8>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	491a      	ldr	r1, [pc, #104]	; (8002324 <HAL_RCC_ClockConfig+0x2e8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_RCC_ClockConfig+0x2e8>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4912      	ldr	r1, [pc, #72]	; (8002324 <HAL_RCC_ClockConfig+0x2e8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022de:	f000 f85d 	bl	800239c <HAL_RCC_GetSysClockFreq>
 80022e2:	4601      	mov	r1, r0
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_RCC_ClockConfig+0x2e8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ec:	22f0      	movs	r2, #240	; 0xf0
 80022ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	fa92 f2a2 	rbit	r2, r2
 80022f6:	60fa      	str	r2, [r7, #12]
  return result;
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	40d3      	lsrs	r3, r2
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x2ec>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	fa21 f303 	lsr.w	r3, r1, r3
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_RCC_ClockConfig+0x2f0>)
 800230c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_RCC_ClockConfig+0x2f4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fc66 	bl	8000be4 <HAL_InitTick>
  
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3778      	adds	r7, #120	; 0x78
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	08005d58 	.word	0x08005d58
 800232c:	20000008 	.word	0x20000008
 8002330:	20000000 	.word	0x20000000

08002334 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800234c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002350:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_MCOConfig+0x64>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_RCC_MCOConfig+0x64>)
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	6153      	str	r3, [r2, #20]
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_MCOConfig+0x64>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002378:	f7fe fdc0 	bl	8000efc <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_MCOConfig+0x64>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	430b      	orrs	r3, r1
 800238a:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_MCOConfig+0x64>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b08b      	sub	sp, #44	; 0x2c
 80023a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x30>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ca:	e03f      	b.n	800244c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ce:	623b      	str	r3, [r7, #32]
      break;
 80023d0:	e03f      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	607a      	str	r2, [r7, #4]
  return result;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	40d3      	lsrs	r3, r2
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	220f      	movs	r2, #15
 8002400:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	60fa      	str	r2, [r7, #12]
  return result;
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	fbb2 f2f3 	udiv	r2, r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	e007      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fbb2 f2f3 	udiv	r2, r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	623b      	str	r3, [r7, #32]
      break;
 800244a:	e002      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc8>)
 800244e:	623b      	str	r3, [r7, #32]
      break;
 8002450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002452:	6a3b      	ldr	r3, [r7, #32]
}
 8002454:	4618      	mov	r0, r3
 8002456:	372c      	adds	r7, #44	; 0x2c
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	40021000 	.word	0x40021000
 8002464:	007a1200 	.word	0x007a1200
 8002468:	08005d38 	.word	0x08005d38
 800246c:	08005d48 	.word	0x08005d48

08002470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_GetHCLKFreq+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800248e:	f7ff ffef 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 8002492:	4601      	mov	r1, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800249c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	fa92 f2a2 	rbit	r2, r2
 80024a8:	603a      	str	r2, [r7, #0]
  return result;
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	40d3      	lsrs	r3, r2
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08005d68 	.word	0x08005d68

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024d2:	f7ff ffcd 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 80024d6:	4601      	mov	r1, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	fa92 f2a2 	rbit	r2, r2
 80024ec:	603a      	str	r2, [r7, #0]
  return result;
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	40d3      	lsrs	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_RCC_GetPCLK2Freq+0x40>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08005d68 	.word	0x08005d68

08002510 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e01d      	b.n	800255e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 faaa 	bl	8003a90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 fa5c 	bl	8002a0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d841      	bhi.n	80025fc <HAL_TIM_IC_Start_IT+0x94>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_TIM_IC_Start_IT+0x18>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025b5 	.word	0x080025b5
 8002584:	080025fd 	.word	0x080025fd
 8002588:	080025fd 	.word	0x080025fd
 800258c:	080025fd 	.word	0x080025fd
 8002590:	080025c7 	.word	0x080025c7
 8002594:	080025fd 	.word	0x080025fd
 8002598:	080025fd 	.word	0x080025fd
 800259c:	080025fd 	.word	0x080025fd
 80025a0:	080025d9 	.word	0x080025d9
 80025a4:	080025fd 	.word	0x080025fd
 80025a8:	080025fd 	.word	0x080025fd
 80025ac:	080025fd 	.word	0x080025fd
 80025b0:	080025eb 	.word	0x080025eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0202 	orr.w	r2, r2, #2
 80025c2:	60da      	str	r2, [r3, #12]
      break;
 80025c4:	e01b      	b.n	80025fe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	60da      	str	r2, [r3, #12]
      break;
 80025d6:	e012      	b.n	80025fe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	60da      	str	r2, [r3, #12]
      break;
 80025e8:	e009      	b.n	80025fe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0210 	orr.w	r2, r2, #16
 80025f8:	60da      	str	r2, [r3, #12]
      break;
 80025fa:	e000      	b.n	80025fe <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80025fc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fbc2 	bl	8002d90 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_TIM_IC_Start_IT+0xd8>)
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b06      	cmp	r3, #6
 800261c:	d00b      	beq.n	8002636 <HAL_TIM_IC_Start_IT+0xce>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d007      	beq.n	8002636 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	00010007 	.word	0x00010007

08002644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0202 	mvn.w	r2, #2
 8002670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f001 f950 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f99d 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f9a4 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0204 	mvn.w	r2, #4
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f001 f926 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f973 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f97a 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b08      	cmp	r3, #8
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0208 	mvn.w	r2, #8
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f001 f8fc 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f949 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f950 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b10      	cmp	r3, #16
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b10      	cmp	r3, #16
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0210 	mvn.w	r2, #16
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2208      	movs	r2, #8
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 f8d2 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f91f 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f926 	bl	80029e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10e      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0201 	mvn.w	r2, #1
 80027c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8f9 	bl	80029ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fafd 	bl	8002dee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002802:	d10e      	bne.n	8002822 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b80      	cmp	r3, #128	; 0x80
 8002810:	d107      	bne.n	8002822 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800281a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 faf0 	bl	8002e02 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d10e      	bne.n	800284e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d107      	bne.n	800284e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f8d4 	bl	80029f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d10e      	bne.n	800287a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b20      	cmp	r3, #32
 8002868:	d107      	bne.n	800287a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f06f 0220 	mvn.w	r2, #32
 8002872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fab0 	bl	8002dda <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_TIM_IC_ConfigChannel+0x1a>
 8002898:	2302      	movs	r3, #2
 800289a:	e08a      	b.n	80029b2 <HAL_TIM_IC_ConfigChannel+0x130>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11b      	bne.n	80028ea <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f000 f941 	bl	8002b48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020c 	bic.w	r2, r2, #12
 80028d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6999      	ldr	r1, [r3, #24]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	619a      	str	r2, [r3, #24]
 80028e8:	e05a      	b.n	80029a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d11c      	bne.n	800292a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f000 f990 	bl	8002c24 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002912:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	e03a      	b.n	80029a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f000 f9ad 	bl	8002c9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020c 	bic.w	r2, r2, #12
 8002952:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69d9      	ldr	r1, [r3, #28]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	61da      	str	r2, [r3, #28]
 8002966:	e01b      	b.n	80029a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f000 f9cd 	bl	8002d16 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800298a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69d9      	ldr	r1, [r3, #28]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	021a      	lsls	r2, r3, #8
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <TIM_Base_SetConfig+0x11c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d00f      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <TIM_Base_SetConfig+0x120>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <TIM_Base_SetConfig+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <TIM_Base_SetConfig+0x128>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <TIM_Base_SetConfig+0x12c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <TIM_Base_SetConfig+0x11c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d01b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <TIM_Base_SetConfig+0x120>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d017      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <TIM_Base_SetConfig+0x124>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <TIM_Base_SetConfig+0x128>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00f      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <TIM_Base_SetConfig+0x130>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <TIM_Base_SetConfig+0x134>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2a      	ldr	r2, [pc, #168]	; (8002b44 <TIM_Base_SetConfig+0x138>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_Base_SetConfig+0x9a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <TIM_Base_SetConfig+0x12c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <TIM_Base_SetConfig+0x11c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <TIM_Base_SetConfig+0x128>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00f      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <TIM_Base_SetConfig+0x130>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <TIM_Base_SetConfig+0x134>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <TIM_Base_SetConfig+0x138>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x100>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <TIM_Base_SetConfig+0x12c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40013400 	.word	0x40013400
 8002b38:	40015000 	.word	0x40015000
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <TIM_TI1_SetConfig+0xc4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d017      	beq.n	8002ba6 <TIM_TI1_SetConfig+0x5e>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d013      	beq.n	8002ba6 <TIM_TI1_SetConfig+0x5e>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <TIM_TI1_SetConfig+0xc8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00f      	beq.n	8002ba6 <TIM_TI1_SetConfig+0x5e>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <TIM_TI1_SetConfig+0xcc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_TI1_SetConfig+0x5e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <TIM_TI1_SetConfig+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <TIM_TI1_SetConfig+0x5e>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <TIM_TI1_SetConfig+0xd4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_TI1_SetConfig+0x5e>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <TIM_TI1_SetConfig+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <TIM_TI1_SetConfig+0x62>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <TIM_TI1_SetConfig+0x64>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e003      	b.n	8002bca <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f023 030a 	bic.w	r3, r3, #10
 8002be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 030a 	and.w	r3, r3, #10
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40013400 	.word	0x40013400
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40015000 	.word	0x40015000

08002c24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0210 	bic.w	r2, r3, #16
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b087      	sub	sp, #28
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	031b      	lsls	r3, r3, #12
 8002d6e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2201      	movs	r2, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e040      	b.n	8002eaa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fe61 	bl	8003b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2224      	movs	r2, #36	; 0x24
 8002e42:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f8bf 	bl	8002fd8 <UART_SetConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e022      	b.n	8002eaa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 facd 	bl	800340c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fb54 	bl	8003550 <UART_CheckIdleState>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b08a      	sub	sp, #40	; 0x28
 8002eb6:	af02      	add	r7, sp, #8
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	f040 8081 	bne.w	8002fce <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Transmit+0x26>
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e079      	b.n	8002fd0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Transmit+0x38>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e072      	b.n	8002fd0 <HAL_UART_Transmit+0x11e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2221      	movs	r2, #33	; 0x21
 8002efc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002efe:	f7fd feb5 	bl	8000c6c <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d108      	bne.n	8002f30 <HAL_UART_Transmit+0x7e>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e003      	b.n	8002f38 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f38:	e02d      	b.n	8002f96 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fb48 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e03d      	b.n	8002fd0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f66:	b292      	uxth	r2, r2
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e008      	b.n	8002f84 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1cb      	bne.n	8002f3a <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2140      	movs	r1, #64	; 0x40
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fb14 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e009      	b.n	8002fd0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4bac      	ldr	r3, [pc, #688]	; (80032b8 <UART_SetConfig+0x2e0>)
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	6939      	ldr	r1, [r7, #16]
 8003010:	430b      	orrs	r3, r1
 8003012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a9a      	ldr	r2, [pc, #616]	; (80032bc <UART_SetConfig+0x2e4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d121      	bne.n	800309c <UART_SetConfig+0xc4>
 8003058:	4b99      	ldr	r3, [pc, #612]	; (80032c0 <UART_SetConfig+0x2e8>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d817      	bhi.n	8003094 <UART_SetConfig+0xbc>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <UART_SetConfig+0x94>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	0800307d 	.word	0x0800307d
 8003070:	08003089 	.word	0x08003089
 8003074:	0800308f 	.word	0x0800308f
 8003078:	08003083 	.word	0x08003083
 800307c:	2301      	movs	r3, #1
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e0b2      	b.n	80031e8 <UART_SetConfig+0x210>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e0af      	b.n	80031e8 <UART_SetConfig+0x210>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e0ac      	b.n	80031e8 <UART_SetConfig+0x210>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0a9      	b.n	80031e8 <UART_SetConfig+0x210>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	bf00      	nop
 800309a:	e0a5      	b.n	80031e8 <UART_SetConfig+0x210>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a88      	ldr	r2, [pc, #544]	; (80032c4 <UART_SetConfig+0x2ec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d123      	bne.n	80030ee <UART_SetConfig+0x116>
 80030a6:	4b86      	ldr	r3, [pc, #536]	; (80032c0 <UART_SetConfig+0x2e8>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b2:	d012      	beq.n	80030da <UART_SetConfig+0x102>
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d802      	bhi.n	80030c0 <UART_SetConfig+0xe8>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <UART_SetConfig+0xf6>
 80030be:	e012      	b.n	80030e6 <UART_SetConfig+0x10e>
 80030c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c4:	d00c      	beq.n	80030e0 <UART_SetConfig+0x108>
 80030c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030ca:	d003      	beq.n	80030d4 <UART_SetConfig+0xfc>
 80030cc:	e00b      	b.n	80030e6 <UART_SetConfig+0x10e>
 80030ce:	2300      	movs	r3, #0
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e089      	b.n	80031e8 <UART_SetConfig+0x210>
 80030d4:	2302      	movs	r3, #2
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e086      	b.n	80031e8 <UART_SetConfig+0x210>
 80030da:	2304      	movs	r3, #4
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e083      	b.n	80031e8 <UART_SetConfig+0x210>
 80030e0:	2308      	movs	r3, #8
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e080      	b.n	80031e8 <UART_SetConfig+0x210>
 80030e6:	2310      	movs	r3, #16
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	bf00      	nop
 80030ec:	e07c      	b.n	80031e8 <UART_SetConfig+0x210>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <UART_SetConfig+0x2f0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d123      	bne.n	8003140 <UART_SetConfig+0x168>
 80030f8:	4b71      	ldr	r3, [pc, #452]	; (80032c0 <UART_SetConfig+0x2e8>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003104:	d012      	beq.n	800312c <UART_SetConfig+0x154>
 8003106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800310a:	d802      	bhi.n	8003112 <UART_SetConfig+0x13a>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <UART_SetConfig+0x148>
 8003110:	e012      	b.n	8003138 <UART_SetConfig+0x160>
 8003112:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003116:	d00c      	beq.n	8003132 <UART_SetConfig+0x15a>
 8003118:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800311c:	d003      	beq.n	8003126 <UART_SetConfig+0x14e>
 800311e:	e00b      	b.n	8003138 <UART_SetConfig+0x160>
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e060      	b.n	80031e8 <UART_SetConfig+0x210>
 8003126:	2302      	movs	r3, #2
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e05d      	b.n	80031e8 <UART_SetConfig+0x210>
 800312c:	2304      	movs	r3, #4
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e05a      	b.n	80031e8 <UART_SetConfig+0x210>
 8003132:	2308      	movs	r3, #8
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e057      	b.n	80031e8 <UART_SetConfig+0x210>
 8003138:	2310      	movs	r3, #16
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	bf00      	nop
 800313e:	e053      	b.n	80031e8 <UART_SetConfig+0x210>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a61      	ldr	r2, [pc, #388]	; (80032cc <UART_SetConfig+0x2f4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d123      	bne.n	8003192 <UART_SetConfig+0x1ba>
 800314a:	4b5d      	ldr	r3, [pc, #372]	; (80032c0 <UART_SetConfig+0x2e8>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003156:	d012      	beq.n	800317e <UART_SetConfig+0x1a6>
 8003158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800315c:	d802      	bhi.n	8003164 <UART_SetConfig+0x18c>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <UART_SetConfig+0x19a>
 8003162:	e012      	b.n	800318a <UART_SetConfig+0x1b2>
 8003164:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003168:	d00c      	beq.n	8003184 <UART_SetConfig+0x1ac>
 800316a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800316e:	d003      	beq.n	8003178 <UART_SetConfig+0x1a0>
 8003170:	e00b      	b.n	800318a <UART_SetConfig+0x1b2>
 8003172:	2300      	movs	r3, #0
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e037      	b.n	80031e8 <UART_SetConfig+0x210>
 8003178:	2302      	movs	r3, #2
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e034      	b.n	80031e8 <UART_SetConfig+0x210>
 800317e:	2304      	movs	r3, #4
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e031      	b.n	80031e8 <UART_SetConfig+0x210>
 8003184:	2308      	movs	r3, #8
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e02e      	b.n	80031e8 <UART_SetConfig+0x210>
 800318a:	2310      	movs	r3, #16
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	bf00      	nop
 8003190:	e02a      	b.n	80031e8 <UART_SetConfig+0x210>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <UART_SetConfig+0x2f8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d123      	bne.n	80031e4 <UART_SetConfig+0x20c>
 800319c:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <UART_SetConfig+0x2e8>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a8:	d012      	beq.n	80031d0 <UART_SetConfig+0x1f8>
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ae:	d802      	bhi.n	80031b6 <UART_SetConfig+0x1de>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <UART_SetConfig+0x1ec>
 80031b4:	e012      	b.n	80031dc <UART_SetConfig+0x204>
 80031b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ba:	d00c      	beq.n	80031d6 <UART_SetConfig+0x1fe>
 80031bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031c0:	d003      	beq.n	80031ca <UART_SetConfig+0x1f2>
 80031c2:	e00b      	b.n	80031dc <UART_SetConfig+0x204>
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e00e      	b.n	80031e8 <UART_SetConfig+0x210>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e00b      	b.n	80031e8 <UART_SetConfig+0x210>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e008      	b.n	80031e8 <UART_SetConfig+0x210>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e005      	b.n	80031e8 <UART_SetConfig+0x210>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	bf00      	nop
 80031e2:	e001      	b.n	80031e8 <UART_SetConfig+0x210>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	f040 8090 	bne.w	8003314 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80031f4:	7ffb      	ldrb	r3, [r7, #31]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d86c      	bhi.n	80032d4 <UART_SetConfig+0x2fc>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x228>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003225 	.word	0x08003225
 8003204:	08003245 	.word	0x08003245
 8003208:	08003265 	.word	0x08003265
 800320c:	080032d5 	.word	0x080032d5
 8003210:	08003281 	.word	0x08003281
 8003214:	080032d5 	.word	0x080032d5
 8003218:	080032d5 	.word	0x080032d5
 800321c:	080032d5 	.word	0x080032d5
 8003220:	080032a1 	.word	0x080032a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7ff f930 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	005a      	lsls	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	b29b      	uxth	r3, r3
 8003240:	61bb      	str	r3, [r7, #24]
        break;
 8003242:	e04a      	b.n	80032da <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7ff f942 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8003248:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	b29b      	uxth	r3, r3
 8003260:	61bb      	str	r3, [r7, #24]
        break;
 8003262:	e03a      	b.n	80032da <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800326e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6852      	ldr	r2, [r2, #4]
 8003276:	fbb3 f3f2 	udiv	r3, r3, r2
 800327a:	b29b      	uxth	r3, r3
 800327c:	61bb      	str	r3, [r7, #24]
        break;
 800327e:	e02c      	b.n	80032da <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003280:	f7ff f88c 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8003284:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	005a      	lsls	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	b29b      	uxth	r3, r3
 800329c:	61bb      	str	r3, [r7, #24]
        break;
 800329e:	e01c      	b.n	80032da <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	61bb      	str	r3, [r7, #24]
        break;
 80032b6:	e010      	b.n	80032da <UART_SetConfig+0x302>
 80032b8:	efff69f3 	.word	0xefff69f3
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
        break;
 80032d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d916      	bls.n	800330e <UART_SetConfig+0x336>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e6:	d212      	bcs.n	800330e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f023 030f 	bic.w	r3, r3, #15
 80032f0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	4313      	orrs	r3, r2
 8003302:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	897a      	ldrh	r2, [r7, #10]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e072      	b.n	80033f4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
 8003312:	e06f      	b.n	80033f4 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d85b      	bhi.n	80033d2 <UART_SetConfig+0x3fa>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0x348>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003345 	.word	0x08003345
 8003324:	08003363 	.word	0x08003363
 8003328:	08003381 	.word	0x08003381
 800332c:	080033d3 	.word	0x080033d3
 8003330:	0800339d 	.word	0x0800339d
 8003334:	080033d3 	.word	0x080033d3
 8003338:	080033d3 	.word	0x080033d3
 800333c:	080033d3 	.word	0x080033d3
 8003340:	080033bb 	.word	0x080033bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003344:	f7ff f8a0 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8003348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085a      	lsrs	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	61bb      	str	r3, [r7, #24]
        break;
 8003360:	e03a      	b.n	80033d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003362:	f7ff f8b3 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8003366:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	085a      	lsrs	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	61bb      	str	r3, [r7, #24]
        break;
 800337e:	e02b      	b.n	80033d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800338a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6852      	ldr	r2, [r2, #4]
 8003392:	fbb3 f3f2 	udiv	r3, r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	61bb      	str	r3, [r7, #24]
        break;
 800339a:	e01d      	b.n	80033d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339c:	f7fe fffe 	bl	800239c <HAL_RCC_GetSysClockFreq>
 80033a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085a      	lsrs	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e00e      	b.n	80033d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	61bb      	str	r3, [r7, #24]
        break;
 80033d0:	e002      	b.n	80033d8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
        break;
 80033d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	d908      	bls.n	80033f0 <UART_SetConfig+0x418>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d204      	bcs.n	80033f0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e001      	b.n	80033f4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop

0800340c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01a      	beq.n	8003522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350a:	d10a      	bne.n	8003522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af02      	add	r7, sp, #8
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800355e:	f7fd fb85 	bl	8000c6c <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b08      	cmp	r3, #8
 8003570:	d10e      	bne.n	8003590 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f82a 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e020      	b.n	80035d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d10e      	bne.n	80035bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f814 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e00a      	b.n	80035d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e05d      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d059      	beq.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fd fb3a 	bl	8000c6c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <UART_WaitOnFlagUntilTimeout+0x30>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11b      	bne.n	8003642 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003618:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e042      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d02b      	beq.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	d123      	bne.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003668:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003678:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e00f      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d092      	beq.n	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <SysTick_Handler>:
 */

#include "stm32f3xx_hal.h"
extern TIM_HandleTypeDef htimer2;
void SysTick_Handler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80036d4:	f7fd fab6 	bl	8000c44 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80036d8:	f7fd fc02 	bl	8000ee0 <HAL_SYSTICK_IRQHandler>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <TIM2_IRQHandler+0x10>)
 80036e6:	f7fe ffad 	bl	8002644 <HAL_TIM_IRQHandler>
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000214 	.word	0x20000214

080036f4 <main>:

TIM_HandleTypeDef htimer2;
UART_HandleTypeDef huart2;

int main(void)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b0a5      	sub	sp, #148	; 0x94
 80036f8:	af00      	add	r7, sp, #0
	uint32_t capture_difference = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	double timer2_cnt_freq = 0 ;
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	f04f 0400 	mov.w	r4, #0
 8003708:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	double timer2_cnt_res = 0;
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	double user_signal_time_period = 0;
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	double user_signal_freq = 0;
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	char msg[100];
	HAL_Init();
 8003730:	f7fd fa42 	bl	8000bb8 <HAL_Init>
	Sysclk_Config(SYS_CLOCK_FREQ_48_MHZ);
 8003734:	2030      	movs	r0, #48	; 0x30
 8003736:	f000 f881 	bl	800383c <Sysclk_Config>

	//GPIO_Init();
	TIMER2_Init();
 800373a:	f000 f92b 	bl	8003994 <TIMER2_Init>
	LSE_Config();
 800373e:	f000 f8eb 	bl	8003918 <LSE_Config>
	UART2_Init();
 8003742:	f000 f959 	bl	80039f8 <UART2_Init>

	if(HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1)!= HAL_OK)
 8003746:	2100      	movs	r1, #0
 8003748:	4836      	ldr	r0, [pc, #216]	; (8003824 <main+0x130>)
 800374a:	f7fe ff0d 	bl	8002568 <HAL_TIM_IC_Start_IT>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <main+0x64>
		{
			Error_handler();
 8003754:	f000 f976 	bl	8003a44 <Error_handler>

		}
	while(1)
	{

		if(is_capture_done)
 8003758:	4b33      	ldr	r3, [pc, #204]	; (8003828 <main+0x134>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0fb      	beq.n	8003758 <main+0x64>
		{
			if(input_capture[1] > input_capture[0])
 8003760:	4b32      	ldr	r3, [pc, #200]	; (800382c <main+0x138>)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <main+0x138>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d907      	bls.n	800377c <main+0x88>
				capture_difference = input_capture[1]- input_capture[0];
 800376c:	4b2f      	ldr	r3, [pc, #188]	; (800382c <main+0x138>)
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	4b2e      	ldr	r3, [pc, #184]	; (800382c <main+0x138>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800377a:	e007      	b.n	800378c <main+0x98>
			else
				capture_difference = (0XFFFFFFFF - input_capture[0])+ input_capture[1];
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <main+0x138>)
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <main+0x138>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq()*2)-(htimer2.Init.Prescaler+1);
 800378c:	f7fe fe7c 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8003790:	4603      	mov	r3, r0
 8003792:	005a      	lsls	r2, r3, #1
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <main+0x130>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc feb9 	bl	8000514 <__aeabi_ui2d>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
		timer2_cnt_res = 1/ timer2_cnt_freq;
 80037aa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80037ae:	f04f 0000 	mov.w	r0, #0
 80037b2:	491f      	ldr	r1, [pc, #124]	; (8003830 <main+0x13c>)
 80037b4:	f7fd f852 	bl	800085c <__aeabi_ddiv>
 80037b8:	4603      	mov	r3, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		user_signal_time_period = capture_difference * timer2_cnt_res;
 80037c0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80037c4:	f7fc fea6 	bl	8000514 <__aeabi_ui2d>
 80037c8:	4603      	mov	r3, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	461a      	mov	r2, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037d4:	f7fc ff18 	bl	8000608 <__aeabi_dmul>
 80037d8:	4603      	mov	r3, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		user_signal_freq = 1/user_signal_time_period;
 80037e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	4911      	ldr	r1, [pc, #68]	; (8003830 <main+0x13c>)
 80037ea:	f7fd f837 	bl	800085c <__aeabi_ddiv>
 80037ee:	4603      	mov	r3, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		sprintf(msg,"Frequency of the signal applied = %f\r\n",user_signal_freq);
 80037f6:	1d38      	adds	r0, r7, #4
 80037f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80037fc:	490d      	ldr	r1, [pc, #52]	; (8003834 <main+0x140>)
 80037fe:	f000 fe8b 	bl	8004518 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fceb 	bl	80001e0 <strlen>
 800380a:	4603      	mov	r3, r0
 800380c:	b29a      	uxth	r2, r3
 800380e:	1d39      	adds	r1, r7, #4
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	4808      	ldr	r0, [pc, #32]	; (8003838 <main+0x144>)
 8003816:	f7ff fb4c 	bl	8002eb2 <HAL_UART_Transmit>
		is_capture_done = FALSE;
 800381a:	4b03      	ldr	r3, [pc, #12]	; (8003828 <main+0x134>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
		if(is_capture_done)
 8003820:	e79a      	b.n	8003758 <main+0x64>
 8003822:	bf00      	nop
 8003824:	20000214 	.word	0x20000214
 8003828:	20000200 	.word	0x20000200
 800382c:	200001f8 	.word	0x200001f8
 8003830:	3ff00000 	.word	0x3ff00000
 8003834:	08005d10 	.word	0x08005d10
 8003838:	20000254 	.word	0x20000254

0800383c <Sysclk_Config>:

	return 0;
}

void Sysclk_Config(uint8_t freq)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b092      	sub	sp, #72	; 0x48
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]

	uint8_t latency = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		RCC_OscInitTypeDef osc_init;
		RCC_ClkInitTypeDef clk_init;

		osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800384c:	2306      	movs	r3, #6
 800384e:	61fb      	str	r3, [r7, #28]
		osc_init.HSIState = RCC_HSI_ON;
 8003850:	2301      	movs	r3, #1
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
		osc_init.LSEState = RCC_LSE_ON;
 8003854:	2301      	movs	r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
		osc_init.HSICalibrationValue = 16;
 8003858:	2310      	movs	r3, #16
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
		osc_init.PLL.PLLState = RCC_PLL_ON;
 800385c:	2302      	movs	r3, #2
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
		osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003864:	63bb      	str	r3, [r7, #56]	; 0x38

		switch(freq)
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d00d      	beq.n	8003888 <Sysclk_Config+0x4c>
 800386c:	2b48      	cmp	r3, #72	; 0x48
 800386e:	d014      	beq.n	800389a <Sysclk_Config+0x5e>
 8003870:	2b18      	cmp	r3, #24
 8003872:	d000      	beq.n	8003876 <Sysclk_Config+0x3a>
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
				latency = FLASH_LATENCY_2;
				break;
			}
			default:
				return ;
 8003874:	e04a      	b.n	800390c <Sysclk_Config+0xd0>
				osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV3;
 8003876:	2302      	movs	r3, #2
 8003878:	643b      	str	r3, [r7, #64]	; 0x40
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 800387a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
				latency = FLASH_LATENCY_0;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003886:	e011      	b.n	80038ac <Sysclk_Config+0x70>
				osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV2;
 8003888:	2301      	movs	r3, #1
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL12;
 800388c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8003890:	63fb      	str	r3, [r7, #60]	; 0x3c
				latency = FLASH_LATENCY_1;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003898:	e008      	b.n	80038ac <Sysclk_Config+0x70>
				osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV1;
 800389a:	2300      	movs	r3, #0
 800389c:	643b      	str	r3, [r7, #64]	; 0x40
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 800389e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
				latency = FLASH_LATENCY_2;
 80038a4:	2302      	movs	r3, #2
 80038a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80038aa:	bf00      	nop
		}
		if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fcad 	bl	8001210 <HAL_RCC_OscConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <Sysclk_Config+0x84>
		{
			Error_handler();
 80038bc:	f000 f8c2 	bl	8003a44 <Error_handler>
		}
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80038c0:	230f      	movs	r3, #15
 80038c2:	60bb      	str	r3, [r7, #8]
							RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c4:	2302      	movs	r3, #2
 80038c6:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80038cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d0:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80038d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d6:	61bb      	str	r3, [r7, #24]

		if(HAL_RCC_ClockConfig(&clk_init, latency)!= HAL_OK)
 80038d8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fbaa 	bl	800203c <HAL_RCC_ClockConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <Sysclk_Config+0xb6>
		{
			Error_handler();
 80038ee:	f000 f8a9 	bl	8003a44 <Error_handler>
		}
		//Systick configuration
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80038f2:	f7fe fdbd 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <Sysclk_Config+0xd8>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fac4 	bl	8000e8e <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003906:	2004      	movs	r0, #4
 8003908:	f7fd face 	bl	8000ea8 <HAL_SYSTICK_CLKSourceConfig>
}
 800390c:	3748      	adds	r7, #72	; 0x48
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	10624dd3 	.word	0x10624dd3

08003918 <LSE_Config>:

void LSE_Config(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	if(HAL_RCC_OscConfig(&Osc_Init)!= HAL_OK)
	{
		Error_handler();
	}
#endif
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 800391c:	2200      	movs	r2, #0
 800391e:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8003922:	2000      	movs	r0, #0
 8003924:	f7fe fd06 	bl	8002334 <HAL_RCC_MCOConfig>

}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	if(!is_capture_done)
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11e      	bne.n	800397a <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(count == 1)
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_TIM_IC_CaptureCallback+0x60>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10b      	bne.n	800395c <HAL_TIM_IC_CaptureCallback+0x30>
		{
			input_capture[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x64>)
 800394c:	6013      	str	r3, [r2, #0]
			count ++;
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003958:	701a      	strb	r2, [r3, #0]
			input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			count = 1;
			is_capture_done = TRUE;
		}
	}
}
 800395a:	e00e      	b.n	800397a <HAL_TIM_IC_CaptureCallback+0x4e>
		else if(count == 2)
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_TIM_IC_CaptureCallback+0x60>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d10a      	bne.n	800397a <HAL_TIM_IC_CaptureCallback+0x4e>
			input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_TIM_IC_CaptureCallback+0x64>)
 800396c:	6053      	str	r3, [r2, #4]
			count = 1;
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <HAL_TIM_IC_CaptureCallback+0x60>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
			is_capture_done = TRUE;
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000200 	.word	0x20000200
 800398c:	20000005 	.word	0x20000005
 8003990:	200001f8 	.word	0x200001f8

08003994 <TIMER2_Init>:
void TIMER2_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
	TIM_IC_InitTypeDef timer2IC_Config;
	htimer2.Instance = TIM2;
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <TIMER2_Init+0x60>)
 800399c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039a0:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP ;
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <TIMER2_Init+0x60>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
	htimer2.Init.Period = 0xFFFFFFFF;
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <TIMER2_Init+0x60>)
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <TIMER2_Init+0x60>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_IC_Init(&htimer2)!= HAL_OK)
 80039b6:	480f      	ldr	r0, [pc, #60]	; (80039f4 <TIMER2_Init+0x60>)
 80039b8:	f7fe fdaa 	bl	8002510 <HAL_TIM_IC_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <TIMER2_Init+0x32>
	{
		Error_handler();
 80039c2:	f000 f83f 	bl	8003a44 <Error_handler>
	}
	timer2IC_Config.ICFilter = 0 ;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
	timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 80039ca:	2300      	movs	r3, #0
 80039cc:	603b      	str	r3, [r7, #0]
	timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
	timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039d2:	2301      	movs	r3, #1
 80039d4:	607b      	str	r3, [r7, #4]
	if(HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK)
 80039d6:	463b      	mov	r3, r7
 80039d8:	2200      	movs	r2, #0
 80039da:	4619      	mov	r1, r3
 80039dc:	4805      	ldr	r0, [pc, #20]	; (80039f4 <TIMER2_Init+0x60>)
 80039de:	f7fe ff50 	bl	8002882 <HAL_TIM_IC_ConfigChannel>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <TIMER2_Init+0x58>
	{
		Error_handler();
 80039e8:	f000 f82c 	bl	8003a44 <Error_handler>
	}
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000214 	.word	0x20000214

080039f8 <UART2_Init>:
void UART2_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <UART2_Init+0x44>)
 80039fe:	4a10      	ldr	r2, [pc, #64]	; (8003a40 <UART2_Init+0x48>)
 8003a00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <UART2_Init+0x44>)
 8003a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <UART2_Init+0x44>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <UART2_Init+0x44>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <UART2_Init+0x44>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <UART2_Init+0x44>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <UART2_Init+0x44>)
 8003a24:	220c      	movs	r2, #12
 8003a26:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!=HAL_OK)
 8003a28:	4804      	ldr	r0, [pc, #16]	; (8003a3c <UART2_Init+0x44>)
 8003a2a:	f7ff f9f4 	bl	8002e16 <HAL_UART_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8003a34:	f000 f806 	bl	8003a44 <Error_handler>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000254 	.word	0x20000254
 8003a40:	40004400 	.word	0x40004400

08003a44 <Error_handler>:
	ledgpio.Pull = GPIO_NOPULL;
	ledgpio.Pin = GPIO_PIN_5;
	HAL_GPIO_Init(GPIOA, &ledgpio);
}
void Error_handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	while(1);
 8003a48:	e7fe      	b.n	8003a48 <Error_handler+0x4>
	...

08003a4c <HAL_MspInit>:
 *  Created on: Jun 11, 2020
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
void HAL_MspInit(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a50:	2003      	movs	r0, #3
 8003a52:	f7fd f9e7 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exception
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_MspInit+0x40>)
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <HAL_MspInit+0x40>)
 8003a5c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003a60:	6253      	str	r3, [r2, #36]	; 0x24
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	f06f 000b 	mvn.w	r0, #11
 8003a6a:	f7fd f9e6 	bl	8000e3a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	f06f 000a 	mvn.w	r0, #10
 8003a76:	f7fd f9e0 	bl	8000e3a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f06f 0009 	mvn.w	r0, #9
 8003a82:	f7fd f9da 	bl	8000e3a <HAL_NVIC_SetPriority>
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2ch1_gpio;
	//1. Enable the clock for timer 2
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003a98:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_TIM_IC_MspInit+0x6c>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_TIM_IC_MspInit+0x6c>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	61d3      	str	r3, [r2, #28]
 8003aa4:	4b15      	ldr	r3, [pc, #84]	; (8003afc <HAL_TIM_IC_MspInit+0x6c>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_TIM_IC_MspInit+0x6c>)
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_TIM_IC_MspInit+0x6c>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aba:	6153      	str	r3, [r2, #20]
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_TIM_IC_MspInit+0x6c>)
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
	//2. Configure a gpio to behave as timer2

	tim2ch1_gpio.Pin = GPIO_PIN_0;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
	tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	61bb      	str	r3, [r7, #24]
	tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ade:	f7fd fa0d 	bl	8000efc <HAL_GPIO_Init>

	//3. nvic setting
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	210f      	movs	r1, #15
 8003ae6:	201c      	movs	r0, #28
 8003ae8:	f7fd f9a7 	bl	8000e3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003aec:	201c      	movs	r0, #28
 8003aee:	f7fd f9c0 	bl	8000e72 <HAL_NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
  // here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_UART_MspInit+0x84>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_UART_MspInit+0x84>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	61d3      	str	r3, [r2, #28]
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_UART_MspInit+0x84>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <HAL_UART_MspInit+0x84>)
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <HAL_UART_MspInit+0x84>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2a:	6153      	str	r3, [r2, #20]
 8003b2c:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_UART_MspInit+0x84>)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations

	gpio_uart.Pin = GPIO_PIN_2;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8003b40:	2301      	movs	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_TX
 8003b48:	2307      	movs	r3, #7
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4619      	mov	r1, r3
 8003b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b56:	f7fd f9d1 	bl	8000efc <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	4619      	mov	r1, r3
 8003b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b68:	f7fd f9c8 	bl	8000efc <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC setting)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b6c:	2026      	movs	r0, #38	; 0x26
 8003b6e:	f7fd f980 	bl	8000e72 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	210f      	movs	r1, #15
 8003b76:	2026      	movs	r0, #38	; 0x26
 8003b78:	f7fd f95f 	bl	8000e3a <HAL_NVIC_SetPriority>
}
 8003b7c:	bf00      	nop
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000

08003b88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <SystemInit+0x28>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <SystemInit+0x28>)
 8003b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <SystemInit+0x28>)
 8003b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003bba:	e003      	b.n	8003bc4 <LoopCopyDataInit>

08003bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003bc2:	3104      	adds	r1, #4

08003bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003bc4:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003bcc:	d3f6      	bcc.n	8003bbc <CopyDataInit>
	ldr	r2, =_sbss
 8003bce:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003bd0:	e002      	b.n	8003bd8 <LoopFillZerobss>

08003bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003bd4:	f842 3b04 	str.w	r3, [r2], #4

08003bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <LoopForever+0x16>)
	cmp	r2, r3
 8003bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003bdc:	d3f9      	bcc.n	8003bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bde:	f7ff ffd3 	bl	8003b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003be2:	f000 f811 	bl	8003c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003be6:	f7ff fd85 	bl	80036f4 <main>

08003bea <LoopForever>:

LoopForever:
    b LoopForever
 8003bea:	e7fe      	b.n	8003bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003bf0:	08005fd8 	.word	0x08005fd8
	ldr	r0, =_sdata
 8003bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003bf8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8003bfc:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8003c00:	200002d8 	.word	0x200002d8

08003c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c04:	e7fe      	b.n	8003c04 <ADC1_2_IRQHandler>
	...

08003c08 <__libc_init_array>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4e0d      	ldr	r6, [pc, #52]	; (8003c40 <__libc_init_array+0x38>)
 8003c0c:	4c0d      	ldr	r4, [pc, #52]	; (8003c44 <__libc_init_array+0x3c>)
 8003c0e:	1ba4      	subs	r4, r4, r6
 8003c10:	10a4      	asrs	r4, r4, #2
 8003c12:	2500      	movs	r5, #0
 8003c14:	42a5      	cmp	r5, r4
 8003c16:	d109      	bne.n	8003c2c <__libc_init_array+0x24>
 8003c18:	4e0b      	ldr	r6, [pc, #44]	; (8003c48 <__libc_init_array+0x40>)
 8003c1a:	4c0c      	ldr	r4, [pc, #48]	; (8003c4c <__libc_init_array+0x44>)
 8003c1c:	f002 f86a 	bl	8005cf4 <_init>
 8003c20:	1ba4      	subs	r4, r4, r6
 8003c22:	10a4      	asrs	r4, r4, #2
 8003c24:	2500      	movs	r5, #0
 8003c26:	42a5      	cmp	r5, r4
 8003c28:	d105      	bne.n	8003c36 <__libc_init_array+0x2e>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c30:	4798      	blx	r3
 8003c32:	3501      	adds	r5, #1
 8003c34:	e7ee      	b.n	8003c14 <__libc_init_array+0xc>
 8003c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3a:	4798      	blx	r3
 8003c3c:	3501      	adds	r5, #1
 8003c3e:	e7f2      	b.n	8003c26 <__libc_init_array+0x1e>
 8003c40:	08005fd0 	.word	0x08005fd0
 8003c44:	08005fd0 	.word	0x08005fd0
 8003c48:	08005fd0 	.word	0x08005fd0
 8003c4c:	08005fd4 	.word	0x08005fd4

08003c50 <memset>:
 8003c50:	4402      	add	r2, r0
 8003c52:	4603      	mov	r3, r0
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d100      	bne.n	8003c5a <memset+0xa>
 8003c58:	4770      	bx	lr
 8003c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c5e:	e7f9      	b.n	8003c54 <memset+0x4>

08003c60 <__cvt>:
 8003c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	ec55 4b10 	vmov	r4, r5, d0
 8003c68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003c6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	460e      	mov	r6, r1
 8003c72:	4691      	mov	r9, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	bfb8      	it	lt
 8003c78:	4622      	movlt	r2, r4
 8003c7a:	462b      	mov	r3, r5
 8003c7c:	f027 0720 	bic.w	r7, r7, #32
 8003c80:	bfbb      	ittet	lt
 8003c82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003c86:	461d      	movlt	r5, r3
 8003c88:	2300      	movge	r3, #0
 8003c8a:	232d      	movlt	r3, #45	; 0x2d
 8003c8c:	bfb8      	it	lt
 8003c8e:	4614      	movlt	r4, r2
 8003c90:	2f46      	cmp	r7, #70	; 0x46
 8003c92:	700b      	strb	r3, [r1, #0]
 8003c94:	d004      	beq.n	8003ca0 <__cvt+0x40>
 8003c96:	2f45      	cmp	r7, #69	; 0x45
 8003c98:	d100      	bne.n	8003c9c <__cvt+0x3c>
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	e000      	b.n	8003ca2 <__cvt+0x42>
 8003ca0:	2103      	movs	r1, #3
 8003ca2:	ab03      	add	r3, sp, #12
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	ab02      	add	r3, sp, #8
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	4632      	mov	r2, r6
 8003cac:	4653      	mov	r3, sl
 8003cae:	ec45 4b10 	vmov	d0, r4, r5
 8003cb2:	f000 fcdd 	bl	8004670 <_dtoa_r>
 8003cb6:	2f47      	cmp	r7, #71	; 0x47
 8003cb8:	4680      	mov	r8, r0
 8003cba:	d102      	bne.n	8003cc2 <__cvt+0x62>
 8003cbc:	f019 0f01 	tst.w	r9, #1
 8003cc0:	d026      	beq.n	8003d10 <__cvt+0xb0>
 8003cc2:	2f46      	cmp	r7, #70	; 0x46
 8003cc4:	eb08 0906 	add.w	r9, r8, r6
 8003cc8:	d111      	bne.n	8003cee <__cvt+0x8e>
 8003cca:	f898 3000 	ldrb.w	r3, [r8]
 8003cce:	2b30      	cmp	r3, #48	; 0x30
 8003cd0:	d10a      	bne.n	8003ce8 <__cvt+0x88>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7fc fefd 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cde:	b918      	cbnz	r0, 8003ce8 <__cvt+0x88>
 8003ce0:	f1c6 0601 	rsb	r6, r6, #1
 8003ce4:	f8ca 6000 	str.w	r6, [sl]
 8003ce8:	f8da 3000 	ldr.w	r3, [sl]
 8003cec:	4499      	add	r9, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7fc feef 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cfa:	b938      	cbnz	r0, 8003d0c <__cvt+0xac>
 8003cfc:	2230      	movs	r2, #48	; 0x30
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	454b      	cmp	r3, r9
 8003d02:	d205      	bcs.n	8003d10 <__cvt+0xb0>
 8003d04:	1c59      	adds	r1, r3, #1
 8003d06:	9103      	str	r1, [sp, #12]
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e7f8      	b.n	8003cfe <__cvt+0x9e>
 8003d0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d14:	eba3 0308 	sub.w	r3, r3, r8
 8003d18:	4640      	mov	r0, r8
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	b004      	add	sp, #16
 8003d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d22 <__exponent>:
 8003d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d24:	2900      	cmp	r1, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	bfba      	itte	lt
 8003d2a:	4249      	neglt	r1, r1
 8003d2c:	232d      	movlt	r3, #45	; 0x2d
 8003d2e:	232b      	movge	r3, #43	; 0x2b
 8003d30:	2909      	cmp	r1, #9
 8003d32:	f804 2b02 	strb.w	r2, [r4], #2
 8003d36:	7043      	strb	r3, [r0, #1]
 8003d38:	dd20      	ble.n	8003d7c <__exponent+0x5a>
 8003d3a:	f10d 0307 	add.w	r3, sp, #7
 8003d3e:	461f      	mov	r7, r3
 8003d40:	260a      	movs	r6, #10
 8003d42:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d46:	fb06 1115 	mls	r1, r6, r5, r1
 8003d4a:	3130      	adds	r1, #48	; 0x30
 8003d4c:	2d09      	cmp	r5, #9
 8003d4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d52:	f103 32ff 	add.w	r2, r3, #4294967295
 8003d56:	4629      	mov	r1, r5
 8003d58:	dc09      	bgt.n	8003d6e <__exponent+0x4c>
 8003d5a:	3130      	adds	r1, #48	; 0x30
 8003d5c:	3b02      	subs	r3, #2
 8003d5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d62:	42bb      	cmp	r3, r7
 8003d64:	4622      	mov	r2, r4
 8003d66:	d304      	bcc.n	8003d72 <__exponent+0x50>
 8003d68:	1a10      	subs	r0, r2, r0
 8003d6a:	b003      	add	sp, #12
 8003d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d6e:	4613      	mov	r3, r2
 8003d70:	e7e7      	b.n	8003d42 <__exponent+0x20>
 8003d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d76:	f804 2b01 	strb.w	r2, [r4], #1
 8003d7a:	e7f2      	b.n	8003d62 <__exponent+0x40>
 8003d7c:	2330      	movs	r3, #48	; 0x30
 8003d7e:	4419      	add	r1, r3
 8003d80:	7083      	strb	r3, [r0, #2]
 8003d82:	1d02      	adds	r2, r0, #4
 8003d84:	70c1      	strb	r1, [r0, #3]
 8003d86:	e7ef      	b.n	8003d68 <__exponent+0x46>

08003d88 <_printf_float>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	b08d      	sub	sp, #52	; 0x34
 8003d8e:	460c      	mov	r4, r1
 8003d90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003d94:	4616      	mov	r6, r2
 8003d96:	461f      	mov	r7, r3
 8003d98:	4605      	mov	r5, r0
 8003d9a:	f001 fa21 	bl	80051e0 <_localeconv_r>
 8003d9e:	6803      	ldr	r3, [r0, #0]
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fa1c 	bl	80001e0 <strlen>
 8003da8:	2300      	movs	r3, #0
 8003daa:	930a      	str	r3, [sp, #40]	; 0x28
 8003dac:	f8d8 3000 	ldr.w	r3, [r8]
 8003db0:	9005      	str	r0, [sp, #20]
 8003db2:	3307      	adds	r3, #7
 8003db4:	f023 0307 	bic.w	r3, r3, #7
 8003db8:	f103 0208 	add.w	r2, r3, #8
 8003dbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003dc0:	f8d4 b000 	ldr.w	fp, [r4]
 8003dc4:	f8c8 2000 	str.w	r2, [r8]
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003dd0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003dd4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003dd8:	9307      	str	r3, [sp, #28]
 8003dda:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	4ba7      	ldr	r3, [pc, #668]	; (8004080 <_printf_float+0x2f8>)
 8003de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003de8:	f7fc fea8 	bl	8000b3c <__aeabi_dcmpun>
 8003dec:	bb70      	cbnz	r0, 8003e4c <_printf_float+0xc4>
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295
 8003df2:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <_printf_float+0x2f8>)
 8003df4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003df8:	f7fc fe82 	bl	8000b00 <__aeabi_dcmple>
 8003dfc:	bb30      	cbnz	r0, 8003e4c <_printf_float+0xc4>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4640      	mov	r0, r8
 8003e04:	4649      	mov	r1, r9
 8003e06:	f7fc fe71 	bl	8000aec <__aeabi_dcmplt>
 8003e0a:	b110      	cbz	r0, 8003e12 <_printf_float+0x8a>
 8003e0c:	232d      	movs	r3, #45	; 0x2d
 8003e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e12:	4a9c      	ldr	r2, [pc, #624]	; (8004084 <_printf_float+0x2fc>)
 8003e14:	4b9c      	ldr	r3, [pc, #624]	; (8004088 <_printf_float+0x300>)
 8003e16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e1a:	bf8c      	ite	hi
 8003e1c:	4690      	movhi	r8, r2
 8003e1e:	4698      	movls	r8, r3
 8003e20:	2303      	movs	r3, #3
 8003e22:	f02b 0204 	bic.w	r2, fp, #4
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	f04f 0900 	mov.w	r9, #0
 8003e2e:	9700      	str	r7, [sp, #0]
 8003e30:	4633      	mov	r3, r6
 8003e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e34:	4621      	mov	r1, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 f9e6 	bl	8004208 <_printf_common>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	f040 808d 	bne.w	8003f5c <_printf_float+0x1d4>
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
 8003e46:	b00d      	add	sp, #52	; 0x34
 8003e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	f7fc fe72 	bl	8000b3c <__aeabi_dcmpun>
 8003e58:	b110      	cbz	r0, 8003e60 <_printf_float+0xd8>
 8003e5a:	4a8c      	ldr	r2, [pc, #560]	; (800408c <_printf_float+0x304>)
 8003e5c:	4b8c      	ldr	r3, [pc, #560]	; (8004090 <_printf_float+0x308>)
 8003e5e:	e7da      	b.n	8003e16 <_printf_float+0x8e>
 8003e60:	6861      	ldr	r1, [r4, #4]
 8003e62:	1c4b      	adds	r3, r1, #1
 8003e64:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003e68:	a80a      	add	r0, sp, #40	; 0x28
 8003e6a:	d13e      	bne.n	8003eea <_printf_float+0x162>
 8003e6c:	2306      	movs	r3, #6
 8003e6e:	6063      	str	r3, [r4, #4]
 8003e70:	2300      	movs	r3, #0
 8003e72:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003e76:	ab09      	add	r3, sp, #36	; 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	ec49 8b10 	vmov	d0, r8, r9
 8003e7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e82:	6022      	str	r2, [r4, #0]
 8003e84:	f8cd a004 	str.w	sl, [sp, #4]
 8003e88:	6861      	ldr	r1, [r4, #4]
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f7ff fee8 	bl	8003c60 <__cvt>
 8003e90:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003e94:	2b47      	cmp	r3, #71	; 0x47
 8003e96:	4680      	mov	r8, r0
 8003e98:	d109      	bne.n	8003eae <_printf_float+0x126>
 8003e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9c:	1cd8      	adds	r0, r3, #3
 8003e9e:	db02      	blt.n	8003ea6 <_printf_float+0x11e>
 8003ea0:	6862      	ldr	r2, [r4, #4]
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	dd47      	ble.n	8003f36 <_printf_float+0x1ae>
 8003ea6:	f1aa 0a02 	sub.w	sl, sl, #2
 8003eaa:	fa5f fa8a 	uxtb.w	sl, sl
 8003eae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003eb4:	d824      	bhi.n	8003f00 <_printf_float+0x178>
 8003eb6:	3901      	subs	r1, #1
 8003eb8:	4652      	mov	r2, sl
 8003eba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8003ec0:	f7ff ff2f 	bl	8003d22 <__exponent>
 8003ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ec6:	1813      	adds	r3, r2, r0
 8003ec8:	2a01      	cmp	r2, #1
 8003eca:	4681      	mov	r9, r0
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	dc02      	bgt.n	8003ed6 <_printf_float+0x14e>
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	07d1      	lsls	r1, r2, #31
 8003ed4:	d501      	bpl.n	8003eda <_printf_float+0x152>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0a5      	beq.n	8003e2e <_printf_float+0xa6>
 8003ee2:	232d      	movs	r3, #45	; 0x2d
 8003ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee8:	e7a1      	b.n	8003e2e <_printf_float+0xa6>
 8003eea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003eee:	f000 8177 	beq.w	80041e0 <_printf_float+0x458>
 8003ef2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ef6:	d1bb      	bne.n	8003e70 <_printf_float+0xe8>
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d1b9      	bne.n	8003e70 <_printf_float+0xe8>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e7b6      	b.n	8003e6e <_printf_float+0xe6>
 8003f00:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003f04:	d119      	bne.n	8003f3a <_printf_float+0x1b2>
 8003f06:	2900      	cmp	r1, #0
 8003f08:	6863      	ldr	r3, [r4, #4]
 8003f0a:	dd0c      	ble.n	8003f26 <_printf_float+0x19e>
 8003f0c:	6121      	str	r1, [r4, #16]
 8003f0e:	b913      	cbnz	r3, 8003f16 <_printf_float+0x18e>
 8003f10:	6822      	ldr	r2, [r4, #0]
 8003f12:	07d2      	lsls	r2, r2, #31
 8003f14:	d502      	bpl.n	8003f1c <_printf_float+0x194>
 8003f16:	3301      	adds	r3, #1
 8003f18:	440b      	add	r3, r1
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f20:	f04f 0900 	mov.w	r9, #0
 8003f24:	e7d9      	b.n	8003eda <_printf_float+0x152>
 8003f26:	b913      	cbnz	r3, 8003f2e <_printf_float+0x1a6>
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	07d0      	lsls	r0, r2, #31
 8003f2c:	d501      	bpl.n	8003f32 <_printf_float+0x1aa>
 8003f2e:	3302      	adds	r3, #2
 8003f30:	e7f3      	b.n	8003f1a <_printf_float+0x192>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e7f1      	b.n	8003f1a <_printf_float+0x192>
 8003f36:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003f3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	db05      	blt.n	8003f4e <_printf_float+0x1c6>
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	6123      	str	r3, [r4, #16]
 8003f46:	07d1      	lsls	r1, r2, #31
 8003f48:	d5e8      	bpl.n	8003f1c <_printf_float+0x194>
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	e7e5      	b.n	8003f1a <_printf_float+0x192>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bfd4      	ite	le
 8003f52:	f1c3 0302 	rsble	r3, r3, #2
 8003f56:	2301      	movgt	r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	e7de      	b.n	8003f1a <_printf_float+0x192>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	055a      	lsls	r2, r3, #21
 8003f60:	d407      	bmi.n	8003f72 <_printf_float+0x1ea>
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	4642      	mov	r2, r8
 8003f66:	4631      	mov	r1, r6
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b8      	blx	r7
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d12b      	bne.n	8003fc8 <_printf_float+0x240>
 8003f70:	e767      	b.n	8003e42 <_printf_float+0xba>
 8003f72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003f76:	f240 80dc 	bls.w	8004132 <_printf_float+0x3aa>
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f82:	f7fc fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d033      	beq.n	8003ff2 <_printf_float+0x26a>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4a41      	ldr	r2, [pc, #260]	; (8004094 <_printf_float+0x30c>)
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b8      	blx	r7
 8003f94:	3001      	adds	r0, #1
 8003f96:	f43f af54 	beq.w	8003e42 <_printf_float+0xba>
 8003f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	db02      	blt.n	8003fa8 <_printf_float+0x220>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	07d8      	lsls	r0, r3, #31
 8003fa6:	d50f      	bpl.n	8003fc8 <_printf_float+0x240>
 8003fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f af45 	beq.w	8003e42 <_printf_float+0xba>
 8003fb8:	f04f 0800 	mov.w	r8, #0
 8003fbc:	f104 091a 	add.w	r9, r4, #26
 8003fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4543      	cmp	r3, r8
 8003fc6:	dc09      	bgt.n	8003fdc <_printf_float+0x254>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	079b      	lsls	r3, r3, #30
 8003fcc:	f100 8103 	bmi.w	80041d6 <_printf_float+0x44e>
 8003fd0:	68e0      	ldr	r0, [r4, #12]
 8003fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	bfb8      	it	lt
 8003fd8:	4618      	movlt	r0, r3
 8003fda:	e734      	b.n	8003e46 <_printf_float+0xbe>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	464a      	mov	r2, r9
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b8      	blx	r7
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	f43f af2b 	beq.w	8003e42 <_printf_float+0xba>
 8003fec:	f108 0801 	add.w	r8, r8, #1
 8003ff0:	e7e6      	b.n	8003fc0 <_printf_float+0x238>
 8003ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dc2b      	bgt.n	8004050 <_printf_float+0x2c8>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <_printf_float+0x30c>)
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	f43f af1d 	beq.w	8003e42 <_printf_float+0xba>
 8004008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400a:	b923      	cbnz	r3, 8004016 <_printf_float+0x28e>
 800400c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800400e:	b913      	cbnz	r3, 8004016 <_printf_float+0x28e>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	07d9      	lsls	r1, r3, #31
 8004014:	d5d8      	bpl.n	8003fc8 <_printf_float+0x240>
 8004016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	47b8      	blx	r7
 8004020:	3001      	adds	r0, #1
 8004022:	f43f af0e 	beq.w	8003e42 <_printf_float+0xba>
 8004026:	f04f 0900 	mov.w	r9, #0
 800402a:	f104 0a1a 	add.w	sl, r4, #26
 800402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004030:	425b      	negs	r3, r3
 8004032:	454b      	cmp	r3, r9
 8004034:	dc01      	bgt.n	800403a <_printf_float+0x2b2>
 8004036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004038:	e794      	b.n	8003f64 <_printf_float+0x1dc>
 800403a:	2301      	movs	r3, #1
 800403c:	4652      	mov	r2, sl
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	47b8      	blx	r7
 8004044:	3001      	adds	r0, #1
 8004046:	f43f aefc 	beq.w	8003e42 <_printf_float+0xba>
 800404a:	f109 0901 	add.w	r9, r9, #1
 800404e:	e7ee      	b.n	800402e <_printf_float+0x2a6>
 8004050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004054:	429a      	cmp	r2, r3
 8004056:	bfa8      	it	ge
 8004058:	461a      	movge	r2, r3
 800405a:	2a00      	cmp	r2, #0
 800405c:	4691      	mov	r9, r2
 800405e:	dd07      	ble.n	8004070 <_printf_float+0x2e8>
 8004060:	4613      	mov	r3, r2
 8004062:	4631      	mov	r1, r6
 8004064:	4642      	mov	r2, r8
 8004066:	4628      	mov	r0, r5
 8004068:	47b8      	blx	r7
 800406a:	3001      	adds	r0, #1
 800406c:	f43f aee9 	beq.w	8003e42 <_printf_float+0xba>
 8004070:	f104 031a 	add.w	r3, r4, #26
 8004074:	f04f 0b00 	mov.w	fp, #0
 8004078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800407c:	9306      	str	r3, [sp, #24]
 800407e:	e015      	b.n	80040ac <_printf_float+0x324>
 8004080:	7fefffff 	.word	0x7fefffff
 8004084:	08005d74 	.word	0x08005d74
 8004088:	08005d70 	.word	0x08005d70
 800408c:	08005d7c 	.word	0x08005d7c
 8004090:	08005d78 	.word	0x08005d78
 8004094:	08005d80 	.word	0x08005d80
 8004098:	2301      	movs	r3, #1
 800409a:	9a06      	ldr	r2, [sp, #24]
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f aecd 	beq.w	8003e42 <_printf_float+0xba>
 80040a8:	f10b 0b01 	add.w	fp, fp, #1
 80040ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040b0:	ebaa 0309 	sub.w	r3, sl, r9
 80040b4:	455b      	cmp	r3, fp
 80040b6:	dcef      	bgt.n	8004098 <_printf_float+0x310>
 80040b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040bc:	429a      	cmp	r2, r3
 80040be:	44d0      	add	r8, sl
 80040c0:	db15      	blt.n	80040ee <_printf_float+0x366>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	07da      	lsls	r2, r3, #31
 80040c6:	d412      	bmi.n	80040ee <_printf_float+0x366>
 80040c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040cc:	eba3 020a 	sub.w	r2, r3, sl
 80040d0:	eba3 0a01 	sub.w	sl, r3, r1
 80040d4:	4592      	cmp	sl, r2
 80040d6:	bfa8      	it	ge
 80040d8:	4692      	movge	sl, r2
 80040da:	f1ba 0f00 	cmp.w	sl, #0
 80040de:	dc0e      	bgt.n	80040fe <_printf_float+0x376>
 80040e0:	f04f 0800 	mov.w	r8, #0
 80040e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040e8:	f104 091a 	add.w	r9, r4, #26
 80040ec:	e019      	b.n	8004122 <_printf_float+0x39a>
 80040ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f2:	4631      	mov	r1, r6
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	d1e5      	bne.n	80040c8 <_printf_float+0x340>
 80040fc:	e6a1      	b.n	8003e42 <_printf_float+0xba>
 80040fe:	4653      	mov	r3, sl
 8004100:	4642      	mov	r2, r8
 8004102:	4631      	mov	r1, r6
 8004104:	4628      	mov	r0, r5
 8004106:	47b8      	blx	r7
 8004108:	3001      	adds	r0, #1
 800410a:	d1e9      	bne.n	80040e0 <_printf_float+0x358>
 800410c:	e699      	b.n	8003e42 <_printf_float+0xba>
 800410e:	2301      	movs	r3, #1
 8004110:	464a      	mov	r2, r9
 8004112:	4631      	mov	r1, r6
 8004114:	4628      	mov	r0, r5
 8004116:	47b8      	blx	r7
 8004118:	3001      	adds	r0, #1
 800411a:	f43f ae92 	beq.w	8003e42 <_printf_float+0xba>
 800411e:	f108 0801 	add.w	r8, r8, #1
 8004122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	eba3 030a 	sub.w	r3, r3, sl
 800412c:	4543      	cmp	r3, r8
 800412e:	dcee      	bgt.n	800410e <_printf_float+0x386>
 8004130:	e74a      	b.n	8003fc8 <_printf_float+0x240>
 8004132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004134:	2a01      	cmp	r2, #1
 8004136:	dc01      	bgt.n	800413c <_printf_float+0x3b4>
 8004138:	07db      	lsls	r3, r3, #31
 800413a:	d53a      	bpl.n	80041b2 <_printf_float+0x42a>
 800413c:	2301      	movs	r3, #1
 800413e:	4642      	mov	r2, r8
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f ae7b 	beq.w	8003e42 <_printf_float+0xba>
 800414c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004150:	4631      	mov	r1, r6
 8004152:	4628      	mov	r0, r5
 8004154:	47b8      	blx	r7
 8004156:	3001      	adds	r0, #1
 8004158:	f108 0801 	add.w	r8, r8, #1
 800415c:	f43f ae71 	beq.w	8003e42 <_printf_float+0xba>
 8004160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004162:	2200      	movs	r2, #0
 8004164:	f103 3aff 	add.w	sl, r3, #4294967295
 8004168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800416c:	2300      	movs	r3, #0
 800416e:	f7fc fcb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004172:	b9c8      	cbnz	r0, 80041a8 <_printf_float+0x420>
 8004174:	4653      	mov	r3, sl
 8004176:	4642      	mov	r2, r8
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	d10e      	bne.n	80041a0 <_printf_float+0x418>
 8004182:	e65e      	b.n	8003e42 <_printf_float+0xba>
 8004184:	2301      	movs	r3, #1
 8004186:	4652      	mov	r2, sl
 8004188:	4631      	mov	r1, r6
 800418a:	4628      	mov	r0, r5
 800418c:	47b8      	blx	r7
 800418e:	3001      	adds	r0, #1
 8004190:	f43f ae57 	beq.w	8003e42 <_printf_float+0xba>
 8004194:	f108 0801 	add.w	r8, r8, #1
 8004198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	4543      	cmp	r3, r8
 800419e:	dcf1      	bgt.n	8004184 <_printf_float+0x3fc>
 80041a0:	464b      	mov	r3, r9
 80041a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041a6:	e6de      	b.n	8003f66 <_printf_float+0x1de>
 80041a8:	f04f 0800 	mov.w	r8, #0
 80041ac:	f104 0a1a 	add.w	sl, r4, #26
 80041b0:	e7f2      	b.n	8004198 <_printf_float+0x410>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e7df      	b.n	8004176 <_printf_float+0x3ee>
 80041b6:	2301      	movs	r3, #1
 80041b8:	464a      	mov	r2, r9
 80041ba:	4631      	mov	r1, r6
 80041bc:	4628      	mov	r0, r5
 80041be:	47b8      	blx	r7
 80041c0:	3001      	adds	r0, #1
 80041c2:	f43f ae3e 	beq.w	8003e42 <_printf_float+0xba>
 80041c6:	f108 0801 	add.w	r8, r8, #1
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	4543      	cmp	r3, r8
 80041d2:	dcf0      	bgt.n	80041b6 <_printf_float+0x42e>
 80041d4:	e6fc      	b.n	8003fd0 <_printf_float+0x248>
 80041d6:	f04f 0800 	mov.w	r8, #0
 80041da:	f104 0919 	add.w	r9, r4, #25
 80041de:	e7f4      	b.n	80041ca <_printf_float+0x442>
 80041e0:	2900      	cmp	r1, #0
 80041e2:	f43f ae8b 	beq.w	8003efc <_printf_float+0x174>
 80041e6:	2300      	movs	r3, #0
 80041e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80041ec:	ab09      	add	r3, sp, #36	; 0x24
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	ec49 8b10 	vmov	d0, r8, r9
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	f8cd a004 	str.w	sl, [sp, #4]
 80041fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041fe:	4628      	mov	r0, r5
 8004200:	f7ff fd2e 	bl	8003c60 <__cvt>
 8004204:	4680      	mov	r8, r0
 8004206:	e648      	b.n	8003e9a <_printf_float+0x112>

08004208 <_printf_common>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	4691      	mov	r9, r2
 800420e:	461f      	mov	r7, r3
 8004210:	688a      	ldr	r2, [r1, #8]
 8004212:	690b      	ldr	r3, [r1, #16]
 8004214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004218:	4293      	cmp	r3, r2
 800421a:	bfb8      	it	lt
 800421c:	4613      	movlt	r3, r2
 800421e:	f8c9 3000 	str.w	r3, [r9]
 8004222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004226:	4606      	mov	r6, r0
 8004228:	460c      	mov	r4, r1
 800422a:	b112      	cbz	r2, 8004232 <_printf_common+0x2a>
 800422c:	3301      	adds	r3, #1
 800422e:	f8c9 3000 	str.w	r3, [r9]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800423c:	3302      	addmi	r3, #2
 800423e:	f8c9 3000 	strmi.w	r3, [r9]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d107      	bne.n	800425a <_printf_common+0x52>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	f8d9 2000 	ldr.w	r2, [r9]
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	42ab      	cmp	r3, r5
 8004258:	dc28      	bgt.n	80042ac <_printf_common+0xa4>
 800425a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	3300      	adds	r3, #0
 8004262:	bf18      	it	ne
 8004264:	2301      	movne	r3, #1
 8004266:	0692      	lsls	r2, r2, #26
 8004268:	d42d      	bmi.n	80042c6 <_printf_common+0xbe>
 800426a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426e:	4639      	mov	r1, r7
 8004270:	4630      	mov	r0, r6
 8004272:	47c0      	blx	r8
 8004274:	3001      	adds	r0, #1
 8004276:	d020      	beq.n	80042ba <_printf_common+0xb2>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	68e5      	ldr	r5, [r4, #12]
 800427c:	f8d9 2000 	ldr.w	r2, [r9]
 8004280:	f003 0306 	and.w	r3, r3, #6
 8004284:	2b04      	cmp	r3, #4
 8004286:	bf08      	it	eq
 8004288:	1aad      	subeq	r5, r5, r2
 800428a:	68a3      	ldr	r3, [r4, #8]
 800428c:	6922      	ldr	r2, [r4, #16]
 800428e:	bf0c      	ite	eq
 8004290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004294:	2500      	movne	r5, #0
 8004296:	4293      	cmp	r3, r2
 8004298:	bfc4      	itt	gt
 800429a:	1a9b      	subgt	r3, r3, r2
 800429c:	18ed      	addgt	r5, r5, r3
 800429e:	f04f 0900 	mov.w	r9, #0
 80042a2:	341a      	adds	r4, #26
 80042a4:	454d      	cmp	r5, r9
 80042a6:	d11a      	bne.n	80042de <_printf_common+0xd6>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e008      	b.n	80042be <_printf_common+0xb6>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4652      	mov	r2, sl
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d103      	bne.n	80042c2 <_printf_common+0xba>
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	3501      	adds	r5, #1
 80042c4:	e7c3      	b.n	800424e <_printf_common+0x46>
 80042c6:	18e1      	adds	r1, r4, r3
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	2030      	movs	r0, #48	; 0x30
 80042cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d0:	4422      	add	r2, r4
 80042d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042da:	3302      	adds	r3, #2
 80042dc:	e7c5      	b.n	800426a <_printf_common+0x62>
 80042de:	2301      	movs	r3, #1
 80042e0:	4622      	mov	r2, r4
 80042e2:	4639      	mov	r1, r7
 80042e4:	4630      	mov	r0, r6
 80042e6:	47c0      	blx	r8
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0e6      	beq.n	80042ba <_printf_common+0xb2>
 80042ec:	f109 0901 	add.w	r9, r9, #1
 80042f0:	e7d8      	b.n	80042a4 <_printf_common+0x9c>
	...

080042f4 <_printf_i>:
 80042f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042fc:	460c      	mov	r4, r1
 80042fe:	7e09      	ldrb	r1, [r1, #24]
 8004300:	b085      	sub	sp, #20
 8004302:	296e      	cmp	r1, #110	; 0x6e
 8004304:	4617      	mov	r7, r2
 8004306:	4606      	mov	r6, r0
 8004308:	4698      	mov	r8, r3
 800430a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800430c:	f000 80b3 	beq.w	8004476 <_printf_i+0x182>
 8004310:	d822      	bhi.n	8004358 <_printf_i+0x64>
 8004312:	2963      	cmp	r1, #99	; 0x63
 8004314:	d036      	beq.n	8004384 <_printf_i+0x90>
 8004316:	d80a      	bhi.n	800432e <_printf_i+0x3a>
 8004318:	2900      	cmp	r1, #0
 800431a:	f000 80b9 	beq.w	8004490 <_printf_i+0x19c>
 800431e:	2958      	cmp	r1, #88	; 0x58
 8004320:	f000 8083 	beq.w	800442a <_printf_i+0x136>
 8004324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800432c:	e032      	b.n	8004394 <_printf_i+0xa0>
 800432e:	2964      	cmp	r1, #100	; 0x64
 8004330:	d001      	beq.n	8004336 <_printf_i+0x42>
 8004332:	2969      	cmp	r1, #105	; 0x69
 8004334:	d1f6      	bne.n	8004324 <_printf_i+0x30>
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	0605      	lsls	r5, r0, #24
 800433c:	f103 0104 	add.w	r1, r3, #4
 8004340:	d52a      	bpl.n	8004398 <_printf_i+0xa4>
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	da03      	bge.n	8004352 <_printf_i+0x5e>
 800434a:	222d      	movs	r2, #45	; 0x2d
 800434c:	425b      	negs	r3, r3
 800434e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004352:	486f      	ldr	r0, [pc, #444]	; (8004510 <_printf_i+0x21c>)
 8004354:	220a      	movs	r2, #10
 8004356:	e039      	b.n	80043cc <_printf_i+0xd8>
 8004358:	2973      	cmp	r1, #115	; 0x73
 800435a:	f000 809d 	beq.w	8004498 <_printf_i+0x1a4>
 800435e:	d808      	bhi.n	8004372 <_printf_i+0x7e>
 8004360:	296f      	cmp	r1, #111	; 0x6f
 8004362:	d020      	beq.n	80043a6 <_printf_i+0xb2>
 8004364:	2970      	cmp	r1, #112	; 0x70
 8004366:	d1dd      	bne.n	8004324 <_printf_i+0x30>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	e003      	b.n	800437a <_printf_i+0x86>
 8004372:	2975      	cmp	r1, #117	; 0x75
 8004374:	d017      	beq.n	80043a6 <_printf_i+0xb2>
 8004376:	2978      	cmp	r1, #120	; 0x78
 8004378:	d1d4      	bne.n	8004324 <_printf_i+0x30>
 800437a:	2378      	movs	r3, #120	; 0x78
 800437c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004380:	4864      	ldr	r0, [pc, #400]	; (8004514 <_printf_i+0x220>)
 8004382:	e055      	b.n	8004430 <_printf_i+0x13c>
 8004384:	6813      	ldr	r3, [r2, #0]
 8004386:	1d19      	adds	r1, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6011      	str	r1, [r2, #0]
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e08c      	b.n	80044b2 <_printf_i+0x1be>
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6011      	str	r1, [r2, #0]
 800439c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043a0:	bf18      	it	ne
 80043a2:	b21b      	sxthne	r3, r3
 80043a4:	e7cf      	b.n	8004346 <_printf_i+0x52>
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	6825      	ldr	r5, [r4, #0]
 80043aa:	1d18      	adds	r0, r3, #4
 80043ac:	6010      	str	r0, [r2, #0]
 80043ae:	0628      	lsls	r0, r5, #24
 80043b0:	d501      	bpl.n	80043b6 <_printf_i+0xc2>
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	e002      	b.n	80043bc <_printf_i+0xc8>
 80043b6:	0668      	lsls	r0, r5, #25
 80043b8:	d5fb      	bpl.n	80043b2 <_printf_i+0xbe>
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	4854      	ldr	r0, [pc, #336]	; (8004510 <_printf_i+0x21c>)
 80043be:	296f      	cmp	r1, #111	; 0x6f
 80043c0:	bf14      	ite	ne
 80043c2:	220a      	movne	r2, #10
 80043c4:	2208      	moveq	r2, #8
 80043c6:	2100      	movs	r1, #0
 80043c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043cc:	6865      	ldr	r5, [r4, #4]
 80043ce:	60a5      	str	r5, [r4, #8]
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	f2c0 8095 	blt.w	8004500 <_printf_i+0x20c>
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	f021 0104 	bic.w	r1, r1, #4
 80043dc:	6021      	str	r1, [r4, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d13d      	bne.n	800445e <_printf_i+0x16a>
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	f040 808e 	bne.w	8004504 <_printf_i+0x210>
 80043e8:	4665      	mov	r5, ip
 80043ea:	2a08      	cmp	r2, #8
 80043ec:	d10b      	bne.n	8004406 <_printf_i+0x112>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	07db      	lsls	r3, r3, #31
 80043f2:	d508      	bpl.n	8004406 <_printf_i+0x112>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	6862      	ldr	r2, [r4, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	bfde      	ittt	le
 80043fc:	2330      	movle	r3, #48	; 0x30
 80043fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004406:	ebac 0305 	sub.w	r3, ip, r5
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	f8cd 8000 	str.w	r8, [sp]
 8004410:	463b      	mov	r3, r7
 8004412:	aa03      	add	r2, sp, #12
 8004414:	4621      	mov	r1, r4
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff fef6 	bl	8004208 <_printf_common>
 800441c:	3001      	adds	r0, #1
 800441e:	d14d      	bne.n	80044bc <_printf_i+0x1c8>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b005      	add	sp, #20
 8004426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800442a:	4839      	ldr	r0, [pc, #228]	; (8004510 <_printf_i+0x21c>)
 800442c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	1d1d      	adds	r5, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6015      	str	r5, [r2, #0]
 800443a:	060a      	lsls	r2, r1, #24
 800443c:	d50b      	bpl.n	8004456 <_printf_i+0x162>
 800443e:	07ca      	lsls	r2, r1, #31
 8004440:	bf44      	itt	mi
 8004442:	f041 0120 	orrmi.w	r1, r1, #32
 8004446:	6021      	strmi	r1, [r4, #0]
 8004448:	b91b      	cbnz	r3, 8004452 <_printf_i+0x15e>
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	f022 0220 	bic.w	r2, r2, #32
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	e7b7      	b.n	80043c6 <_printf_i+0xd2>
 8004456:	064d      	lsls	r5, r1, #25
 8004458:	bf48      	it	mi
 800445a:	b29b      	uxthmi	r3, r3
 800445c:	e7ef      	b.n	800443e <_printf_i+0x14a>
 800445e:	4665      	mov	r5, ip
 8004460:	fbb3 f1f2 	udiv	r1, r3, r2
 8004464:	fb02 3311 	mls	r3, r2, r1, r3
 8004468:	5cc3      	ldrb	r3, [r0, r3]
 800446a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800446e:	460b      	mov	r3, r1
 8004470:	2900      	cmp	r1, #0
 8004472:	d1f5      	bne.n	8004460 <_printf_i+0x16c>
 8004474:	e7b9      	b.n	80043ea <_printf_i+0xf6>
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	6825      	ldr	r5, [r4, #0]
 800447a:	6961      	ldr	r1, [r4, #20]
 800447c:	1d18      	adds	r0, r3, #4
 800447e:	6010      	str	r0, [r2, #0]
 8004480:	0628      	lsls	r0, r5, #24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	d501      	bpl.n	800448a <_printf_i+0x196>
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	e002      	b.n	8004490 <_printf_i+0x19c>
 800448a:	066a      	lsls	r2, r5, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0x192>
 800448e:	8019      	strh	r1, [r3, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	6123      	str	r3, [r4, #16]
 8004494:	4665      	mov	r5, ip
 8004496:	e7b9      	b.n	800440c <_printf_i+0x118>
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	1d19      	adds	r1, r3, #4
 800449c:	6011      	str	r1, [r2, #0]
 800449e:	681d      	ldr	r5, [r3, #0]
 80044a0:	6862      	ldr	r2, [r4, #4]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7fb fea3 	bl	80001f0 <memchr>
 80044aa:	b108      	cbz	r0, 80044b0 <_printf_i+0x1bc>
 80044ac:	1b40      	subs	r0, r0, r5
 80044ae:	6060      	str	r0, [r4, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	2300      	movs	r3, #0
 80044b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ba:	e7a7      	b.n	800440c <_printf_i+0x118>
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	462a      	mov	r2, r5
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0aa      	beq.n	8004420 <_printf_i+0x12c>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	079b      	lsls	r3, r3, #30
 80044ce:	d413      	bmi.n	80044f8 <_printf_i+0x204>
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	4298      	cmp	r0, r3
 80044d6:	bfb8      	it	lt
 80044d8:	4618      	movlt	r0, r3
 80044da:	e7a3      	b.n	8004424 <_printf_i+0x130>
 80044dc:	2301      	movs	r3, #1
 80044de:	464a      	mov	r2, r9
 80044e0:	4639      	mov	r1, r7
 80044e2:	4630      	mov	r0, r6
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d09a      	beq.n	8004420 <_printf_i+0x12c>
 80044ea:	3501      	adds	r5, #1
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	9a03      	ldr	r2, [sp, #12]
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	dcf2      	bgt.n	80044dc <_printf_i+0x1e8>
 80044f6:	e7eb      	b.n	80044d0 <_printf_i+0x1dc>
 80044f8:	2500      	movs	r5, #0
 80044fa:	f104 0919 	add.w	r9, r4, #25
 80044fe:	e7f5      	b.n	80044ec <_printf_i+0x1f8>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ac      	bne.n	800445e <_printf_i+0x16a>
 8004504:	7803      	ldrb	r3, [r0, #0]
 8004506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800450a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800450e:	e76c      	b.n	80043ea <_printf_i+0xf6>
 8004510:	08005d82 	.word	0x08005d82
 8004514:	08005d93 	.word	0x08005d93

08004518 <siprintf>:
 8004518:	b40e      	push	{r1, r2, r3}
 800451a:	b500      	push	{lr}
 800451c:	b09c      	sub	sp, #112	; 0x70
 800451e:	ab1d      	add	r3, sp, #116	; 0x74
 8004520:	9002      	str	r0, [sp, #8]
 8004522:	9006      	str	r0, [sp, #24]
 8004524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004528:	4809      	ldr	r0, [pc, #36]	; (8004550 <siprintf+0x38>)
 800452a:	9107      	str	r1, [sp, #28]
 800452c:	9104      	str	r1, [sp, #16]
 800452e:	4909      	ldr	r1, [pc, #36]	; (8004554 <siprintf+0x3c>)
 8004530:	f853 2b04 	ldr.w	r2, [r3], #4
 8004534:	9105      	str	r1, [sp, #20]
 8004536:	6800      	ldr	r0, [r0, #0]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	a902      	add	r1, sp, #8
 800453c:	f001 fa5c 	bl	80059f8 <_svfiprintf_r>
 8004540:	9b02      	ldr	r3, [sp, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	b01c      	add	sp, #112	; 0x70
 8004548:	f85d eb04 	ldr.w	lr, [sp], #4
 800454c:	b003      	add	sp, #12
 800454e:	4770      	bx	lr
 8004550:	2000000c 	.word	0x2000000c
 8004554:	ffff0208 	.word	0xffff0208

08004558 <quorem>:
 8004558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	6903      	ldr	r3, [r0, #16]
 800455e:	690c      	ldr	r4, [r1, #16]
 8004560:	42a3      	cmp	r3, r4
 8004562:	4680      	mov	r8, r0
 8004564:	f2c0 8082 	blt.w	800466c <quorem+0x114>
 8004568:	3c01      	subs	r4, #1
 800456a:	f101 0714 	add.w	r7, r1, #20
 800456e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004572:	f100 0614 	add.w	r6, r0, #20
 8004576:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800457a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800457e:	eb06 030c 	add.w	r3, r6, ip
 8004582:	3501      	adds	r5, #1
 8004584:	eb07 090c 	add.w	r9, r7, ip
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	fbb0 f5f5 	udiv	r5, r0, r5
 800458e:	b395      	cbz	r5, 80045f6 <quorem+0x9e>
 8004590:	f04f 0a00 	mov.w	sl, #0
 8004594:	4638      	mov	r0, r7
 8004596:	46b6      	mov	lr, r6
 8004598:	46d3      	mov	fp, sl
 800459a:	f850 2b04 	ldr.w	r2, [r0], #4
 800459e:	b293      	uxth	r3, r2
 80045a0:	fb05 a303 	mla	r3, r5, r3, sl
 80045a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	ebab 0303 	sub.w	r3, fp, r3
 80045ae:	0c12      	lsrs	r2, r2, #16
 80045b0:	f8de b000 	ldr.w	fp, [lr]
 80045b4:	fb05 a202 	mla	r2, r5, r2, sl
 80045b8:	fa13 f38b 	uxtah	r3, r3, fp
 80045bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80045c0:	fa1f fb82 	uxth.w	fp, r2
 80045c4:	f8de 2000 	ldr.w	r2, [lr]
 80045c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80045cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045d6:	4581      	cmp	r9, r0
 80045d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80045dc:	f84e 3b04 	str.w	r3, [lr], #4
 80045e0:	d2db      	bcs.n	800459a <quorem+0x42>
 80045e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80045e6:	b933      	cbnz	r3, 80045f6 <quorem+0x9e>
 80045e8:	9b01      	ldr	r3, [sp, #4]
 80045ea:	3b04      	subs	r3, #4
 80045ec:	429e      	cmp	r6, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	d330      	bcc.n	8004654 <quorem+0xfc>
 80045f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80045f6:	4640      	mov	r0, r8
 80045f8:	f001 f828 	bl	800564c <__mcmp>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	db25      	blt.n	800464c <quorem+0xf4>
 8004600:	3501      	adds	r5, #1
 8004602:	4630      	mov	r0, r6
 8004604:	f04f 0c00 	mov.w	ip, #0
 8004608:	f857 2b04 	ldr.w	r2, [r7], #4
 800460c:	f8d0 e000 	ldr.w	lr, [r0]
 8004610:	b293      	uxth	r3, r2
 8004612:	ebac 0303 	sub.w	r3, ip, r3
 8004616:	0c12      	lsrs	r2, r2, #16
 8004618:	fa13 f38e 	uxtah	r3, r3, lr
 800461c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004624:	b29b      	uxth	r3, r3
 8004626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800462a:	45b9      	cmp	r9, r7
 800462c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004630:	f840 3b04 	str.w	r3, [r0], #4
 8004634:	d2e8      	bcs.n	8004608 <quorem+0xb0>
 8004636:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800463a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800463e:	b92a      	cbnz	r2, 800464c <quorem+0xf4>
 8004640:	3b04      	subs	r3, #4
 8004642:	429e      	cmp	r6, r3
 8004644:	461a      	mov	r2, r3
 8004646:	d30b      	bcc.n	8004660 <quorem+0x108>
 8004648:	f8c8 4010 	str.w	r4, [r8, #16]
 800464c:	4628      	mov	r0, r5
 800464e:	b003      	add	sp, #12
 8004650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	3b04      	subs	r3, #4
 8004658:	2a00      	cmp	r2, #0
 800465a:	d1ca      	bne.n	80045f2 <quorem+0x9a>
 800465c:	3c01      	subs	r4, #1
 800465e:	e7c5      	b.n	80045ec <quorem+0x94>
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	3b04      	subs	r3, #4
 8004664:	2a00      	cmp	r2, #0
 8004666:	d1ef      	bne.n	8004648 <quorem+0xf0>
 8004668:	3c01      	subs	r4, #1
 800466a:	e7ea      	b.n	8004642 <quorem+0xea>
 800466c:	2000      	movs	r0, #0
 800466e:	e7ee      	b.n	800464e <quorem+0xf6>

08004670 <_dtoa_r>:
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	ec57 6b10 	vmov	r6, r7, d0
 8004678:	b097      	sub	sp, #92	; 0x5c
 800467a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800467c:	9106      	str	r1, [sp, #24]
 800467e:	4604      	mov	r4, r0
 8004680:	920b      	str	r2, [sp, #44]	; 0x2c
 8004682:	9312      	str	r3, [sp, #72]	; 0x48
 8004684:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004688:	e9cd 6700 	strd	r6, r7, [sp]
 800468c:	b93d      	cbnz	r5, 800469e <_dtoa_r+0x2e>
 800468e:	2010      	movs	r0, #16
 8004690:	f000 fdb4 	bl	80051fc <malloc>
 8004694:	6260      	str	r0, [r4, #36]	; 0x24
 8004696:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800469a:	6005      	str	r5, [r0, #0]
 800469c:	60c5      	str	r5, [r0, #12]
 800469e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046a0:	6819      	ldr	r1, [r3, #0]
 80046a2:	b151      	cbz	r1, 80046ba <_dtoa_r+0x4a>
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	604a      	str	r2, [r1, #4]
 80046a8:	2301      	movs	r3, #1
 80046aa:	4093      	lsls	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 fdeb 	bl	800528a <_Bfree>
 80046b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	1e3b      	subs	r3, r7, #0
 80046bc:	bfbb      	ittet	lt
 80046be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046c2:	9301      	strlt	r3, [sp, #4]
 80046c4:	2300      	movge	r3, #0
 80046c6:	2201      	movlt	r2, #1
 80046c8:	bfac      	ite	ge
 80046ca:	f8c8 3000 	strge.w	r3, [r8]
 80046ce:	f8c8 2000 	strlt.w	r2, [r8]
 80046d2:	4baf      	ldr	r3, [pc, #700]	; (8004990 <_dtoa_r+0x320>)
 80046d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046d8:	ea33 0308 	bics.w	r3, r3, r8
 80046dc:	d114      	bne.n	8004708 <_dtoa_r+0x98>
 80046de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	9b00      	ldr	r3, [sp, #0]
 80046e8:	b923      	cbnz	r3, 80046f4 <_dtoa_r+0x84>
 80046ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f000 8542 	beq.w	8005178 <_dtoa_r+0xb08>
 80046f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80049a4 <_dtoa_r+0x334>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8544 	beq.w	8005188 <_dtoa_r+0xb18>
 8004700:	f10b 0303 	add.w	r3, fp, #3
 8004704:	f000 bd3e 	b.w	8005184 <_dtoa_r+0xb14>
 8004708:	e9dd 6700 	ldrd	r6, r7, [sp]
 800470c:	2200      	movs	r2, #0
 800470e:	2300      	movs	r3, #0
 8004710:	4630      	mov	r0, r6
 8004712:	4639      	mov	r1, r7
 8004714:	f7fc f9e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004718:	4681      	mov	r9, r0
 800471a:	b168      	cbz	r0, 8004738 <_dtoa_r+0xc8>
 800471c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800471e:	2301      	movs	r3, #1
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8524 	beq.w	8005172 <_dtoa_r+0xb02>
 800472a:	4b9a      	ldr	r3, [pc, #616]	; (8004994 <_dtoa_r+0x324>)
 800472c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800472e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	f000 bd28 	b.w	8005188 <_dtoa_r+0xb18>
 8004738:	aa14      	add	r2, sp, #80	; 0x50
 800473a:	a915      	add	r1, sp, #84	; 0x54
 800473c:	ec47 6b10 	vmov	d0, r6, r7
 8004740:	4620      	mov	r0, r4
 8004742:	f000 fffa 	bl	800573a <__d2b>
 8004746:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800474a:	9004      	str	r0, [sp, #16]
 800474c:	2d00      	cmp	r5, #0
 800474e:	d07c      	beq.n	800484a <_dtoa_r+0x1da>
 8004750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004754:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004758:	46b2      	mov	sl, r6
 800475a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800475e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004762:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004766:	2200      	movs	r2, #0
 8004768:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <_dtoa_r+0x328>)
 800476a:	4650      	mov	r0, sl
 800476c:	4659      	mov	r1, fp
 800476e:	f7fb fd93 	bl	8000298 <__aeabi_dsub>
 8004772:	a381      	add	r3, pc, #516	; (adr r3, 8004978 <_dtoa_r+0x308>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb ff46 	bl	8000608 <__aeabi_dmul>
 800477c:	a380      	add	r3, pc, #512	; (adr r3, 8004980 <_dtoa_r+0x310>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb fd8b 	bl	800029c <__adddf3>
 8004786:	4606      	mov	r6, r0
 8004788:	4628      	mov	r0, r5
 800478a:	460f      	mov	r7, r1
 800478c:	f7fb fed2 	bl	8000534 <__aeabi_i2d>
 8004790:	a37d      	add	r3, pc, #500	; (adr r3, 8004988 <_dtoa_r+0x318>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb ff37 	bl	8000608 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4630      	mov	r0, r6
 80047a0:	4639      	mov	r1, r7
 80047a2:	f7fb fd7b 	bl	800029c <__adddf3>
 80047a6:	4606      	mov	r6, r0
 80047a8:	460f      	mov	r7, r1
 80047aa:	f7fc f9dd 	bl	8000b68 <__aeabi_d2iz>
 80047ae:	2200      	movs	r2, #0
 80047b0:	4682      	mov	sl, r0
 80047b2:	2300      	movs	r3, #0
 80047b4:	4630      	mov	r0, r6
 80047b6:	4639      	mov	r1, r7
 80047b8:	f7fc f998 	bl	8000aec <__aeabi_dcmplt>
 80047bc:	b148      	cbz	r0, 80047d2 <_dtoa_r+0x162>
 80047be:	4650      	mov	r0, sl
 80047c0:	f7fb feb8 	bl	8000534 <__aeabi_i2d>
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	f7fc f986 	bl	8000ad8 <__aeabi_dcmpeq>
 80047cc:	b908      	cbnz	r0, 80047d2 <_dtoa_r+0x162>
 80047ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047d2:	f1ba 0f16 	cmp.w	sl, #22
 80047d6:	d859      	bhi.n	800488c <_dtoa_r+0x21c>
 80047d8:	4970      	ldr	r1, [pc, #448]	; (800499c <_dtoa_r+0x32c>)
 80047da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80047de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047e6:	f7fc f99f 	bl	8000b28 <__aeabi_dcmpgt>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d050      	beq.n	8004890 <_dtoa_r+0x220>
 80047ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047f2:	2300      	movs	r3, #0
 80047f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80047f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047f8:	1b5d      	subs	r5, r3, r5
 80047fa:	f1b5 0801 	subs.w	r8, r5, #1
 80047fe:	bf49      	itett	mi
 8004800:	f1c5 0301 	rsbmi	r3, r5, #1
 8004804:	2300      	movpl	r3, #0
 8004806:	9305      	strmi	r3, [sp, #20]
 8004808:	f04f 0800 	movmi.w	r8, #0
 800480c:	bf58      	it	pl
 800480e:	9305      	strpl	r3, [sp, #20]
 8004810:	f1ba 0f00 	cmp.w	sl, #0
 8004814:	db3e      	blt.n	8004894 <_dtoa_r+0x224>
 8004816:	2300      	movs	r3, #0
 8004818:	44d0      	add	r8, sl
 800481a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800481e:	9307      	str	r3, [sp, #28]
 8004820:	9b06      	ldr	r3, [sp, #24]
 8004822:	2b09      	cmp	r3, #9
 8004824:	f200 8090 	bhi.w	8004948 <_dtoa_r+0x2d8>
 8004828:	2b05      	cmp	r3, #5
 800482a:	bfc4      	itt	gt
 800482c:	3b04      	subgt	r3, #4
 800482e:	9306      	strgt	r3, [sp, #24]
 8004830:	9b06      	ldr	r3, [sp, #24]
 8004832:	f1a3 0302 	sub.w	r3, r3, #2
 8004836:	bfcc      	ite	gt
 8004838:	2500      	movgt	r5, #0
 800483a:	2501      	movle	r5, #1
 800483c:	2b03      	cmp	r3, #3
 800483e:	f200 808f 	bhi.w	8004960 <_dtoa_r+0x2f0>
 8004842:	e8df f003 	tbb	[pc, r3]
 8004846:	7f7d      	.short	0x7f7d
 8004848:	7131      	.short	0x7131
 800484a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800484e:	441d      	add	r5, r3
 8004850:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004854:	2820      	cmp	r0, #32
 8004856:	dd13      	ble.n	8004880 <_dtoa_r+0x210>
 8004858:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800485c:	9b00      	ldr	r3, [sp, #0]
 800485e:	fa08 f800 	lsl.w	r8, r8, r0
 8004862:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004866:	fa23 f000 	lsr.w	r0, r3, r0
 800486a:	ea48 0000 	orr.w	r0, r8, r0
 800486e:	f7fb fe51 	bl	8000514 <__aeabi_ui2d>
 8004872:	2301      	movs	r3, #1
 8004874:	4682      	mov	sl, r0
 8004876:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800487a:	3d01      	subs	r5, #1
 800487c:	9313      	str	r3, [sp, #76]	; 0x4c
 800487e:	e772      	b.n	8004766 <_dtoa_r+0xf6>
 8004880:	9b00      	ldr	r3, [sp, #0]
 8004882:	f1c0 0020 	rsb	r0, r0, #32
 8004886:	fa03 f000 	lsl.w	r0, r3, r0
 800488a:	e7f0      	b.n	800486e <_dtoa_r+0x1fe>
 800488c:	2301      	movs	r3, #1
 800488e:	e7b1      	b.n	80047f4 <_dtoa_r+0x184>
 8004890:	900f      	str	r0, [sp, #60]	; 0x3c
 8004892:	e7b0      	b.n	80047f6 <_dtoa_r+0x186>
 8004894:	9b05      	ldr	r3, [sp, #20]
 8004896:	eba3 030a 	sub.w	r3, r3, sl
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f1ca 0300 	rsb	r3, sl, #0
 80048a0:	9307      	str	r3, [sp, #28]
 80048a2:	2300      	movs	r3, #0
 80048a4:	930e      	str	r3, [sp, #56]	; 0x38
 80048a6:	e7bb      	b.n	8004820 <_dtoa_r+0x1b0>
 80048a8:	2301      	movs	r3, #1
 80048aa:	930a      	str	r3, [sp, #40]	; 0x28
 80048ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dd59      	ble.n	8004966 <_dtoa_r+0x2f6>
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	4699      	mov	r9, r3
 80048b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048b8:	2200      	movs	r2, #0
 80048ba:	6072      	str	r2, [r6, #4]
 80048bc:	2204      	movs	r2, #4
 80048be:	f102 0014 	add.w	r0, r2, #20
 80048c2:	4298      	cmp	r0, r3
 80048c4:	6871      	ldr	r1, [r6, #4]
 80048c6:	d953      	bls.n	8004970 <_dtoa_r+0x300>
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 fcaa 	bl	8005222 <_Balloc>
 80048ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d0:	6030      	str	r0, [r6, #0]
 80048d2:	f1b9 0f0e 	cmp.w	r9, #14
 80048d6:	f8d3 b000 	ldr.w	fp, [r3]
 80048da:	f200 80e6 	bhi.w	8004aaa <_dtoa_r+0x43a>
 80048de:	2d00      	cmp	r5, #0
 80048e0:	f000 80e3 	beq.w	8004aaa <_dtoa_r+0x43a>
 80048e4:	ed9d 7b00 	vldr	d7, [sp]
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80048f0:	dd74      	ble.n	80049dc <_dtoa_r+0x36c>
 80048f2:	4a2a      	ldr	r2, [pc, #168]	; (800499c <_dtoa_r+0x32c>)
 80048f4:	f00a 030f 	and.w	r3, sl, #15
 80048f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80048fc:	ed93 7b00 	vldr	d7, [r3]
 8004900:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004904:	06f0      	lsls	r0, r6, #27
 8004906:	ed8d 7b08 	vstr	d7, [sp, #32]
 800490a:	d565      	bpl.n	80049d8 <_dtoa_r+0x368>
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <_dtoa_r+0x330>)
 800490e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004912:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004916:	f7fb ffa1 	bl	800085c <__aeabi_ddiv>
 800491a:	e9cd 0100 	strd	r0, r1, [sp]
 800491e:	f006 060f 	and.w	r6, r6, #15
 8004922:	2503      	movs	r5, #3
 8004924:	4f1e      	ldr	r7, [pc, #120]	; (80049a0 <_dtoa_r+0x330>)
 8004926:	e04c      	b.n	80049c2 <_dtoa_r+0x352>
 8004928:	2301      	movs	r3, #1
 800492a:	930a      	str	r3, [sp, #40]	; 0x28
 800492c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800492e:	4453      	add	r3, sl
 8004930:	f103 0901 	add.w	r9, r3, #1
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	464b      	mov	r3, r9
 8004938:	2b01      	cmp	r3, #1
 800493a:	bfb8      	it	lt
 800493c:	2301      	movlt	r3, #1
 800493e:	e7ba      	b.n	80048b6 <_dtoa_r+0x246>
 8004940:	2300      	movs	r3, #0
 8004942:	e7b2      	b.n	80048aa <_dtoa_r+0x23a>
 8004944:	2300      	movs	r3, #0
 8004946:	e7f0      	b.n	800492a <_dtoa_r+0x2ba>
 8004948:	2501      	movs	r5, #1
 800494a:	2300      	movs	r3, #0
 800494c:	9306      	str	r3, [sp, #24]
 800494e:	950a      	str	r5, [sp, #40]	; 0x28
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	4699      	mov	r9, r3
 8004958:	2200      	movs	r2, #0
 800495a:	2312      	movs	r3, #18
 800495c:	920b      	str	r2, [sp, #44]	; 0x2c
 800495e:	e7aa      	b.n	80048b6 <_dtoa_r+0x246>
 8004960:	2301      	movs	r3, #1
 8004962:	930a      	str	r3, [sp, #40]	; 0x28
 8004964:	e7f4      	b.n	8004950 <_dtoa_r+0x2e0>
 8004966:	2301      	movs	r3, #1
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	4699      	mov	r9, r3
 800496c:	461a      	mov	r2, r3
 800496e:	e7f5      	b.n	800495c <_dtoa_r+0x2ec>
 8004970:	3101      	adds	r1, #1
 8004972:	6071      	str	r1, [r6, #4]
 8004974:	0052      	lsls	r2, r2, #1
 8004976:	e7a2      	b.n	80048be <_dtoa_r+0x24e>
 8004978:	636f4361 	.word	0x636f4361
 800497c:	3fd287a7 	.word	0x3fd287a7
 8004980:	8b60c8b3 	.word	0x8b60c8b3
 8004984:	3fc68a28 	.word	0x3fc68a28
 8004988:	509f79fb 	.word	0x509f79fb
 800498c:	3fd34413 	.word	0x3fd34413
 8004990:	7ff00000 	.word	0x7ff00000
 8004994:	08005d81 	.word	0x08005d81
 8004998:	3ff80000 	.word	0x3ff80000
 800499c:	08005de0 	.word	0x08005de0
 80049a0:	08005db8 	.word	0x08005db8
 80049a4:	08005dad 	.word	0x08005dad
 80049a8:	07f1      	lsls	r1, r6, #31
 80049aa:	d508      	bpl.n	80049be <_dtoa_r+0x34e>
 80049ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b4:	f7fb fe28 	bl	8000608 <__aeabi_dmul>
 80049b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049bc:	3501      	adds	r5, #1
 80049be:	1076      	asrs	r6, r6, #1
 80049c0:	3708      	adds	r7, #8
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d1f0      	bne.n	80049a8 <_dtoa_r+0x338>
 80049c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049ce:	f7fb ff45 	bl	800085c <__aeabi_ddiv>
 80049d2:	e9cd 0100 	strd	r0, r1, [sp]
 80049d6:	e01a      	b.n	8004a0e <_dtoa_r+0x39e>
 80049d8:	2502      	movs	r5, #2
 80049da:	e7a3      	b.n	8004924 <_dtoa_r+0x2b4>
 80049dc:	f000 80a0 	beq.w	8004b20 <_dtoa_r+0x4b0>
 80049e0:	f1ca 0600 	rsb	r6, sl, #0
 80049e4:	4b9f      	ldr	r3, [pc, #636]	; (8004c64 <_dtoa_r+0x5f4>)
 80049e6:	4fa0      	ldr	r7, [pc, #640]	; (8004c68 <_dtoa_r+0x5f8>)
 80049e8:	f006 020f 	and.w	r2, r6, #15
 80049ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049f8:	f7fb fe06 	bl	8000608 <__aeabi_dmul>
 80049fc:	e9cd 0100 	strd	r0, r1, [sp]
 8004a00:	1136      	asrs	r6, r6, #4
 8004a02:	2300      	movs	r3, #0
 8004a04:	2502      	movs	r5, #2
 8004a06:	2e00      	cmp	r6, #0
 8004a08:	d17f      	bne.n	8004b0a <_dtoa_r+0x49a>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e1      	bne.n	80049d2 <_dtoa_r+0x362>
 8004a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8087 	beq.w	8004b24 <_dtoa_r+0x4b4>
 8004a16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	4b93      	ldr	r3, [pc, #588]	; (8004c6c <_dtoa_r+0x5fc>)
 8004a1e:	4630      	mov	r0, r6
 8004a20:	4639      	mov	r1, r7
 8004a22:	f7fc f863 	bl	8000aec <__aeabi_dcmplt>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d07c      	beq.n	8004b24 <_dtoa_r+0x4b4>
 8004a2a:	f1b9 0f00 	cmp.w	r9, #0
 8004a2e:	d079      	beq.n	8004b24 <_dtoa_r+0x4b4>
 8004a30:	9b02      	ldr	r3, [sp, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	dd35      	ble.n	8004aa2 <_dtoa_r+0x432>
 8004a36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004a3a:	9308      	str	r3, [sp, #32]
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4b8b      	ldr	r3, [pc, #556]	; (8004c70 <_dtoa_r+0x600>)
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7fb fde0 	bl	8000608 <__aeabi_dmul>
 8004a48:	e9cd 0100 	strd	r0, r1, [sp]
 8004a4c:	9f02      	ldr	r7, [sp, #8]
 8004a4e:	3501      	adds	r5, #1
 8004a50:	4628      	mov	r0, r5
 8004a52:	f7fb fd6f 	bl	8000534 <__aeabi_i2d>
 8004a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a5a:	f7fb fdd5 	bl	8000608 <__aeabi_dmul>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <_dtoa_r+0x604>)
 8004a62:	f7fb fc1b 	bl	800029c <__adddf3>
 8004a66:	4605      	mov	r5, r0
 8004a68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	d15d      	bne.n	8004b2c <_dtoa_r+0x4bc>
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <_dtoa_r+0x608>)
 8004a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a78:	f7fb fc0e 	bl	8000298 <__aeabi_dsub>
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	4633      	mov	r3, r6
 8004a80:	e9cd 0100 	strd	r0, r1, [sp]
 8004a84:	f7fc f850 	bl	8000b28 <__aeabi_dcmpgt>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f040 8288 	bne.w	8004f9e <_dtoa_r+0x92e>
 8004a8e:	462a      	mov	r2, r5
 8004a90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a98:	f7fc f828 	bl	8000aec <__aeabi_dcmplt>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f040 827c 	bne.w	8004f9a <_dtoa_r+0x92a>
 8004aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004aa6:	e9cd 2300 	strd	r2, r3, [sp]
 8004aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f2c0 8150 	blt.w	8004d52 <_dtoa_r+0x6e2>
 8004ab2:	f1ba 0f0e 	cmp.w	sl, #14
 8004ab6:	f300 814c 	bgt.w	8004d52 <_dtoa_r+0x6e2>
 8004aba:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <_dtoa_r+0x5f4>)
 8004abc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ac0:	ed93 7b00 	vldr	d7, [r3]
 8004ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004acc:	f280 80d8 	bge.w	8004c80 <_dtoa_r+0x610>
 8004ad0:	f1b9 0f00 	cmp.w	r9, #0
 8004ad4:	f300 80d4 	bgt.w	8004c80 <_dtoa_r+0x610>
 8004ad8:	f040 825e 	bne.w	8004f98 <_dtoa_r+0x928>
 8004adc:	2200      	movs	r2, #0
 8004ade:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <_dtoa_r+0x608>)
 8004ae0:	ec51 0b17 	vmov	r0, r1, d7
 8004ae4:	f7fb fd90 	bl	8000608 <__aeabi_dmul>
 8004ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aec:	f7fc f812 	bl	8000b14 <__aeabi_dcmpge>
 8004af0:	464f      	mov	r7, r9
 8004af2:	464e      	mov	r6, r9
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f040 8234 	bne.w	8004f62 <_dtoa_r+0x8f2>
 8004afa:	2331      	movs	r3, #49	; 0x31
 8004afc:	f10b 0501 	add.w	r5, fp, #1
 8004b00:	f88b 3000 	strb.w	r3, [fp]
 8004b04:	f10a 0a01 	add.w	sl, sl, #1
 8004b08:	e22f      	b.n	8004f6a <_dtoa_r+0x8fa>
 8004b0a:	07f2      	lsls	r2, r6, #31
 8004b0c:	d505      	bpl.n	8004b1a <_dtoa_r+0x4aa>
 8004b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b12:	f7fb fd79 	bl	8000608 <__aeabi_dmul>
 8004b16:	3501      	adds	r5, #1
 8004b18:	2301      	movs	r3, #1
 8004b1a:	1076      	asrs	r6, r6, #1
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	e772      	b.n	8004a06 <_dtoa_r+0x396>
 8004b20:	2502      	movs	r5, #2
 8004b22:	e774      	b.n	8004a0e <_dtoa_r+0x39e>
 8004b24:	f8cd a020 	str.w	sl, [sp, #32]
 8004b28:	464f      	mov	r7, r9
 8004b2a:	e791      	b.n	8004a50 <_dtoa_r+0x3e0>
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <_dtoa_r+0x5f4>)
 8004b2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d047      	beq.n	8004bcc <_dtoa_r+0x55c>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	2000      	movs	r0, #0
 8004b42:	494e      	ldr	r1, [pc, #312]	; (8004c7c <_dtoa_r+0x60c>)
 8004b44:	f7fb fe8a 	bl	800085c <__aeabi_ddiv>
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4633      	mov	r3, r6
 8004b4c:	f7fb fba4 	bl	8000298 <__aeabi_dsub>
 8004b50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004b54:	465d      	mov	r5, fp
 8004b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b5a:	f7fc f805 	bl	8000b68 <__aeabi_d2iz>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	f7fb fce8 	bl	8000534 <__aeabi_i2d>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b6c:	f7fb fb94 	bl	8000298 <__aeabi_dsub>
 8004b70:	3630      	adds	r6, #48	; 0x30
 8004b72:	f805 6b01 	strb.w	r6, [r5], #1
 8004b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b7a:	e9cd 0100 	strd	r0, r1, [sp]
 8004b7e:	f7fb ffb5 	bl	8000aec <__aeabi_dcmplt>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d163      	bne.n	8004c4e <_dtoa_r+0x5de>
 8004b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	4937      	ldr	r1, [pc, #220]	; (8004c6c <_dtoa_r+0x5fc>)
 8004b8e:	f7fb fb83 	bl	8000298 <__aeabi_dsub>
 8004b92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b96:	f7fb ffa9 	bl	8000aec <__aeabi_dcmplt>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f040 80b7 	bne.w	8004d0e <_dtoa_r+0x69e>
 8004ba0:	eba5 030b 	sub.w	r3, r5, fp
 8004ba4:	429f      	cmp	r7, r3
 8004ba6:	f77f af7c 	ble.w	8004aa2 <_dtoa_r+0x432>
 8004baa:	2200      	movs	r2, #0
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <_dtoa_r+0x600>)
 8004bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bb2:	f7fb fd29 	bl	8000608 <__aeabi_dmul>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <_dtoa_r+0x600>)
 8004bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bc2:	f7fb fd21 	bl	8000608 <__aeabi_dmul>
 8004bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8004bca:	e7c4      	b.n	8004b56 <_dtoa_r+0x4e6>
 8004bcc:	462a      	mov	r2, r5
 8004bce:	4633      	mov	r3, r6
 8004bd0:	f7fb fd1a 	bl	8000608 <__aeabi_dmul>
 8004bd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004bd8:	eb0b 0507 	add.w	r5, fp, r7
 8004bdc:	465e      	mov	r6, fp
 8004bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004be2:	f7fb ffc1 	bl	8000b68 <__aeabi_d2iz>
 8004be6:	4607      	mov	r7, r0
 8004be8:	f7fb fca4 	bl	8000534 <__aeabi_i2d>
 8004bec:	3730      	adds	r7, #48	; 0x30
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bf6:	f7fb fb4f 	bl	8000298 <__aeabi_dsub>
 8004bfa:	f806 7b01 	strb.w	r7, [r6], #1
 8004bfe:	42ae      	cmp	r6, r5
 8004c00:	e9cd 0100 	strd	r0, r1, [sp]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	d126      	bne.n	8004c58 <_dtoa_r+0x5e8>
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <_dtoa_r+0x60c>)
 8004c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c10:	f7fb fb44 	bl	800029c <__adddf3>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c1c:	f7fb ff84 	bl	8000b28 <__aeabi_dcmpgt>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d174      	bne.n	8004d0e <_dtoa_r+0x69e>
 8004c24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c28:	2000      	movs	r0, #0
 8004c2a:	4914      	ldr	r1, [pc, #80]	; (8004c7c <_dtoa_r+0x60c>)
 8004c2c:	f7fb fb34 	bl	8000298 <__aeabi_dsub>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c38:	f7fb ff58 	bl	8000aec <__aeabi_dcmplt>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f43f af30 	beq.w	8004aa2 <_dtoa_r+0x432>
 8004c42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c46:	2b30      	cmp	r3, #48	; 0x30
 8004c48:	f105 32ff 	add.w	r2, r5, #4294967295
 8004c4c:	d002      	beq.n	8004c54 <_dtoa_r+0x5e4>
 8004c4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004c52:	e04a      	b.n	8004cea <_dtoa_r+0x67a>
 8004c54:	4615      	mov	r5, r2
 8004c56:	e7f4      	b.n	8004c42 <_dtoa_r+0x5d2>
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <_dtoa_r+0x600>)
 8004c5a:	f7fb fcd5 	bl	8000608 <__aeabi_dmul>
 8004c5e:	e9cd 0100 	strd	r0, r1, [sp]
 8004c62:	e7bc      	b.n	8004bde <_dtoa_r+0x56e>
 8004c64:	08005de0 	.word	0x08005de0
 8004c68:	08005db8 	.word	0x08005db8
 8004c6c:	3ff00000 	.word	0x3ff00000
 8004c70:	40240000 	.word	0x40240000
 8004c74:	401c0000 	.word	0x401c0000
 8004c78:	40140000 	.word	0x40140000
 8004c7c:	3fe00000 	.word	0x3fe00000
 8004c80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004c84:	465d      	mov	r5, fp
 8004c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	f7fb fde5 	bl	800085c <__aeabi_ddiv>
 8004c92:	f7fb ff69 	bl	8000b68 <__aeabi_d2iz>
 8004c96:	4680      	mov	r8, r0
 8004c98:	f7fb fc4c 	bl	8000534 <__aeabi_i2d>
 8004c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ca0:	f7fb fcb2 	bl	8000608 <__aeabi_dmul>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004cb0:	f7fb faf2 	bl	8000298 <__aeabi_dsub>
 8004cb4:	f805 6b01 	strb.w	r6, [r5], #1
 8004cb8:	eba5 060b 	sub.w	r6, r5, fp
 8004cbc:	45b1      	cmp	r9, r6
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	d139      	bne.n	8004d38 <_dtoa_r+0x6c8>
 8004cc4:	f7fb faea 	bl	800029c <__adddf3>
 8004cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ccc:	4606      	mov	r6, r0
 8004cce:	460f      	mov	r7, r1
 8004cd0:	f7fb ff2a 	bl	8000b28 <__aeabi_dcmpgt>
 8004cd4:	b9c8      	cbnz	r0, 8004d0a <_dtoa_r+0x69a>
 8004cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cda:	4630      	mov	r0, r6
 8004cdc:	4639      	mov	r1, r7
 8004cde:	f7fb fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ce2:	b110      	cbz	r0, 8004cea <_dtoa_r+0x67a>
 8004ce4:	f018 0f01 	tst.w	r8, #1
 8004ce8:	d10f      	bne.n	8004d0a <_dtoa_r+0x69a>
 8004cea:	9904      	ldr	r1, [sp, #16]
 8004cec:	4620      	mov	r0, r4
 8004cee:	f000 facc 	bl	800528a <_Bfree>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cf6:	702b      	strb	r3, [r5, #0]
 8004cf8:	f10a 0301 	add.w	r3, sl, #1
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8241 	beq.w	8005188 <_dtoa_r+0xb18>
 8004d06:	601d      	str	r5, [r3, #0]
 8004d08:	e23e      	b.n	8005188 <_dtoa_r+0xb18>
 8004d0a:	f8cd a020 	str.w	sl, [sp, #32]
 8004d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d12:	2a39      	cmp	r2, #57	; 0x39
 8004d14:	f105 33ff 	add.w	r3, r5, #4294967295
 8004d18:	d108      	bne.n	8004d2c <_dtoa_r+0x6bc>
 8004d1a:	459b      	cmp	fp, r3
 8004d1c:	d10a      	bne.n	8004d34 <_dtoa_r+0x6c4>
 8004d1e:	9b08      	ldr	r3, [sp, #32]
 8004d20:	3301      	adds	r3, #1
 8004d22:	9308      	str	r3, [sp, #32]
 8004d24:	2330      	movs	r3, #48	; 0x30
 8004d26:	f88b 3000 	strb.w	r3, [fp]
 8004d2a:	465b      	mov	r3, fp
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	3201      	adds	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e78c      	b.n	8004c4e <_dtoa_r+0x5de>
 8004d34:	461d      	mov	r5, r3
 8004d36:	e7ea      	b.n	8004d0e <_dtoa_r+0x69e>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4b9b      	ldr	r3, [pc, #620]	; (8004fa8 <_dtoa_r+0x938>)
 8004d3c:	f7fb fc64 	bl	8000608 <__aeabi_dmul>
 8004d40:	2200      	movs	r2, #0
 8004d42:	2300      	movs	r3, #0
 8004d44:	4606      	mov	r6, r0
 8004d46:	460f      	mov	r7, r1
 8004d48:	f7fb fec6 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d09a      	beq.n	8004c86 <_dtoa_r+0x616>
 8004d50:	e7cb      	b.n	8004cea <_dtoa_r+0x67a>
 8004d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	f000 808b 	beq.w	8004e70 <_dtoa_r+0x800>
 8004d5a:	9a06      	ldr	r2, [sp, #24]
 8004d5c:	2a01      	cmp	r2, #1
 8004d5e:	dc6e      	bgt.n	8004e3e <_dtoa_r+0x7ce>
 8004d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	d067      	beq.n	8004e36 <_dtoa_r+0x7c6>
 8004d66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004d6a:	9f07      	ldr	r7, [sp, #28]
 8004d6c:	9d05      	ldr	r5, [sp, #20]
 8004d6e:	9a05      	ldr	r2, [sp, #20]
 8004d70:	2101      	movs	r1, #1
 8004d72:	441a      	add	r2, r3
 8004d74:	4620      	mov	r0, r4
 8004d76:	9205      	str	r2, [sp, #20]
 8004d78:	4498      	add	r8, r3
 8004d7a:	f000 fb26 	bl	80053ca <__i2b>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	dd0c      	ble.n	8004d9e <_dtoa_r+0x72e>
 8004d84:	f1b8 0f00 	cmp.w	r8, #0
 8004d88:	dd09      	ble.n	8004d9e <_dtoa_r+0x72e>
 8004d8a:	4545      	cmp	r5, r8
 8004d8c:	9a05      	ldr	r2, [sp, #20]
 8004d8e:	462b      	mov	r3, r5
 8004d90:	bfa8      	it	ge
 8004d92:	4643      	movge	r3, r8
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	9205      	str	r2, [sp, #20]
 8004d98:	1aed      	subs	r5, r5, r3
 8004d9a:	eba8 0803 	sub.w	r8, r8, r3
 8004d9e:	9b07      	ldr	r3, [sp, #28]
 8004da0:	b1eb      	cbz	r3, 8004dde <_dtoa_r+0x76e>
 8004da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d067      	beq.n	8004e78 <_dtoa_r+0x808>
 8004da8:	b18f      	cbz	r7, 8004dce <_dtoa_r+0x75e>
 8004daa:	4631      	mov	r1, r6
 8004dac:	463a      	mov	r2, r7
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 fbaa 	bl	8005508 <__pow5mult>
 8004db4:	9a04      	ldr	r2, [sp, #16]
 8004db6:	4601      	mov	r1, r0
 8004db8:	4606      	mov	r6, r0
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 fb0e 	bl	80053dc <__multiply>
 8004dc0:	9904      	ldr	r1, [sp, #16]
 8004dc2:	9008      	str	r0, [sp, #32]
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fa60 	bl	800528a <_Bfree>
 8004dca:	9b08      	ldr	r3, [sp, #32]
 8004dcc:	9304      	str	r3, [sp, #16]
 8004dce:	9b07      	ldr	r3, [sp, #28]
 8004dd0:	1bda      	subs	r2, r3, r7
 8004dd2:	d004      	beq.n	8004dde <_dtoa_r+0x76e>
 8004dd4:	9904      	ldr	r1, [sp, #16]
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 fb96 	bl	8005508 <__pow5mult>
 8004ddc:	9004      	str	r0, [sp, #16]
 8004dde:	2101      	movs	r1, #1
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 faf2 	bl	80053ca <__i2b>
 8004de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de8:	4607      	mov	r7, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 81d0 	beq.w	8005190 <_dtoa_r+0xb20>
 8004df0:	461a      	mov	r2, r3
 8004df2:	4601      	mov	r1, r0
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 fb87 	bl	8005508 <__pow5mult>
 8004dfa:	9b06      	ldr	r3, [sp, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	4607      	mov	r7, r0
 8004e00:	dc40      	bgt.n	8004e84 <_dtoa_r+0x814>
 8004e02:	9b00      	ldr	r3, [sp, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d139      	bne.n	8004e7c <_dtoa_r+0x80c>
 8004e08:	9b01      	ldr	r3, [sp, #4]
 8004e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d136      	bne.n	8004e80 <_dtoa_r+0x810>
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e18:	0d1b      	lsrs	r3, r3, #20
 8004e1a:	051b      	lsls	r3, r3, #20
 8004e1c:	b12b      	cbz	r3, 8004e2a <_dtoa_r+0x7ba>
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	3301      	adds	r3, #1
 8004e22:	9305      	str	r3, [sp, #20]
 8004e24:	f108 0801 	add.w	r8, r8, #1
 8004e28:	2301      	movs	r3, #1
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d12a      	bne.n	8004e88 <_dtoa_r+0x818>
 8004e32:	2001      	movs	r0, #1
 8004e34:	e030      	b.n	8004e98 <_dtoa_r+0x828>
 8004e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e3c:	e795      	b.n	8004d6a <_dtoa_r+0x6fa>
 8004e3e:	9b07      	ldr	r3, [sp, #28]
 8004e40:	f109 37ff 	add.w	r7, r9, #4294967295
 8004e44:	42bb      	cmp	r3, r7
 8004e46:	bfbf      	itttt	lt
 8004e48:	9b07      	ldrlt	r3, [sp, #28]
 8004e4a:	9707      	strlt	r7, [sp, #28]
 8004e4c:	1afa      	sublt	r2, r7, r3
 8004e4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004e50:	bfbb      	ittet	lt
 8004e52:	189b      	addlt	r3, r3, r2
 8004e54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004e56:	1bdf      	subge	r7, r3, r7
 8004e58:	2700      	movlt	r7, #0
 8004e5a:	f1b9 0f00 	cmp.w	r9, #0
 8004e5e:	bfb5      	itete	lt
 8004e60:	9b05      	ldrlt	r3, [sp, #20]
 8004e62:	9d05      	ldrge	r5, [sp, #20]
 8004e64:	eba3 0509 	sublt.w	r5, r3, r9
 8004e68:	464b      	movge	r3, r9
 8004e6a:	bfb8      	it	lt
 8004e6c:	2300      	movlt	r3, #0
 8004e6e:	e77e      	b.n	8004d6e <_dtoa_r+0x6fe>
 8004e70:	9f07      	ldr	r7, [sp, #28]
 8004e72:	9d05      	ldr	r5, [sp, #20]
 8004e74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004e76:	e783      	b.n	8004d80 <_dtoa_r+0x710>
 8004e78:	9a07      	ldr	r2, [sp, #28]
 8004e7a:	e7ab      	b.n	8004dd4 <_dtoa_r+0x764>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e7d4      	b.n	8004e2a <_dtoa_r+0x7ba>
 8004e80:	9b00      	ldr	r3, [sp, #0]
 8004e82:	e7d2      	b.n	8004e2a <_dtoa_r+0x7ba>
 8004e84:	2300      	movs	r3, #0
 8004e86:	9307      	str	r3, [sp, #28]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004e8e:	6918      	ldr	r0, [r3, #16]
 8004e90:	f000 fa4d 	bl	800532e <__hi0bits>
 8004e94:	f1c0 0020 	rsb	r0, r0, #32
 8004e98:	4440      	add	r0, r8
 8004e9a:	f010 001f 	ands.w	r0, r0, #31
 8004e9e:	d047      	beq.n	8004f30 <_dtoa_r+0x8c0>
 8004ea0:	f1c0 0320 	rsb	r3, r0, #32
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	dd3b      	ble.n	8004f20 <_dtoa_r+0x8b0>
 8004ea8:	9b05      	ldr	r3, [sp, #20]
 8004eaa:	f1c0 001c 	rsb	r0, r0, #28
 8004eae:	4403      	add	r3, r0
 8004eb0:	9305      	str	r3, [sp, #20]
 8004eb2:	4405      	add	r5, r0
 8004eb4:	4480      	add	r8, r0
 8004eb6:	9b05      	ldr	r3, [sp, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dd05      	ble.n	8004ec8 <_dtoa_r+0x858>
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	9904      	ldr	r1, [sp, #16]
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 fb6f 	bl	80055a4 <__lshift>
 8004ec6:	9004      	str	r0, [sp, #16]
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	dd05      	ble.n	8004eda <_dtoa_r+0x86a>
 8004ece:	4639      	mov	r1, r7
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 fb66 	bl	80055a4 <__lshift>
 8004ed8:	4607      	mov	r7, r0
 8004eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004edc:	b353      	cbz	r3, 8004f34 <_dtoa_r+0x8c4>
 8004ede:	4639      	mov	r1, r7
 8004ee0:	9804      	ldr	r0, [sp, #16]
 8004ee2:	f000 fbb3 	bl	800564c <__mcmp>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	da24      	bge.n	8004f34 <_dtoa_r+0x8c4>
 8004eea:	2300      	movs	r3, #0
 8004eec:	220a      	movs	r2, #10
 8004eee:	9904      	ldr	r1, [sp, #16]
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f9e1 	bl	80052b8 <__multadd>
 8004ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef8:	9004      	str	r0, [sp, #16]
 8004efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 814d 	beq.w	800519e <_dtoa_r+0xb2e>
 8004f04:	2300      	movs	r3, #0
 8004f06:	4631      	mov	r1, r6
 8004f08:	220a      	movs	r2, #10
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 f9d4 	bl	80052b8 <__multadd>
 8004f10:	9b02      	ldr	r3, [sp, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	4606      	mov	r6, r0
 8004f16:	dc4f      	bgt.n	8004fb8 <_dtoa_r+0x948>
 8004f18:	9b06      	ldr	r3, [sp, #24]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	dd4c      	ble.n	8004fb8 <_dtoa_r+0x948>
 8004f1e:	e011      	b.n	8004f44 <_dtoa_r+0x8d4>
 8004f20:	d0c9      	beq.n	8004eb6 <_dtoa_r+0x846>
 8004f22:	9a05      	ldr	r2, [sp, #20]
 8004f24:	331c      	adds	r3, #28
 8004f26:	441a      	add	r2, r3
 8004f28:	9205      	str	r2, [sp, #20]
 8004f2a:	441d      	add	r5, r3
 8004f2c:	4498      	add	r8, r3
 8004f2e:	e7c2      	b.n	8004eb6 <_dtoa_r+0x846>
 8004f30:	4603      	mov	r3, r0
 8004f32:	e7f6      	b.n	8004f22 <_dtoa_r+0x8b2>
 8004f34:	f1b9 0f00 	cmp.w	r9, #0
 8004f38:	dc38      	bgt.n	8004fac <_dtoa_r+0x93c>
 8004f3a:	9b06      	ldr	r3, [sp, #24]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	dd35      	ble.n	8004fac <_dtoa_r+0x93c>
 8004f40:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f44:	9b02      	ldr	r3, [sp, #8]
 8004f46:	b963      	cbnz	r3, 8004f62 <_dtoa_r+0x8f2>
 8004f48:	4639      	mov	r1, r7
 8004f4a:	2205      	movs	r2, #5
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 f9b3 	bl	80052b8 <__multadd>
 8004f52:	4601      	mov	r1, r0
 8004f54:	4607      	mov	r7, r0
 8004f56:	9804      	ldr	r0, [sp, #16]
 8004f58:	f000 fb78 	bl	800564c <__mcmp>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f73f adcc 	bgt.w	8004afa <_dtoa_r+0x48a>
 8004f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f64:	465d      	mov	r5, fp
 8004f66:	ea6f 0a03 	mvn.w	sl, r3
 8004f6a:	f04f 0900 	mov.w	r9, #0
 8004f6e:	4639      	mov	r1, r7
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 f98a 	bl	800528a <_Bfree>
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	f43f aeb7 	beq.w	8004cea <_dtoa_r+0x67a>
 8004f7c:	f1b9 0f00 	cmp.w	r9, #0
 8004f80:	d005      	beq.n	8004f8e <_dtoa_r+0x91e>
 8004f82:	45b1      	cmp	r9, r6
 8004f84:	d003      	beq.n	8004f8e <_dtoa_r+0x91e>
 8004f86:	4649      	mov	r1, r9
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f97e 	bl	800528a <_Bfree>
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 f97a 	bl	800528a <_Bfree>
 8004f96:	e6a8      	b.n	8004cea <_dtoa_r+0x67a>
 8004f98:	2700      	movs	r7, #0
 8004f9a:	463e      	mov	r6, r7
 8004f9c:	e7e1      	b.n	8004f62 <_dtoa_r+0x8f2>
 8004f9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004fa2:	463e      	mov	r6, r7
 8004fa4:	e5a9      	b.n	8004afa <_dtoa_r+0x48a>
 8004fa6:	bf00      	nop
 8004fa8:	40240000 	.word	0x40240000
 8004fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fae:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80fa 	beq.w	80051ac <_dtoa_r+0xb3c>
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	dd05      	ble.n	8004fc8 <_dtoa_r+0x958>
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 faef 	bl	80055a4 <__lshift>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	9b07      	ldr	r3, [sp, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04c      	beq.n	8005068 <_dtoa_r+0x9f8>
 8004fce:	6871      	ldr	r1, [r6, #4]
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 f926 	bl	8005222 <_Balloc>
 8004fd6:	6932      	ldr	r2, [r6, #16]
 8004fd8:	3202      	adds	r2, #2
 8004fda:	4605      	mov	r5, r0
 8004fdc:	0092      	lsls	r2, r2, #2
 8004fde:	f106 010c 	add.w	r1, r6, #12
 8004fe2:	300c      	adds	r0, #12
 8004fe4:	f000 f912 	bl	800520c <memcpy>
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4629      	mov	r1, r5
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 fad9 	bl	80055a4 <__lshift>
 8004ff2:	9b00      	ldr	r3, [sp, #0]
 8004ff4:	f8cd b014 	str.w	fp, [sp, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	46b1      	mov	r9, r6
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	4606      	mov	r6, r0
 8005002:	4639      	mov	r1, r7
 8005004:	9804      	ldr	r0, [sp, #16]
 8005006:	f7ff faa7 	bl	8004558 <quorem>
 800500a:	4649      	mov	r1, r9
 800500c:	4605      	mov	r5, r0
 800500e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005012:	9804      	ldr	r0, [sp, #16]
 8005014:	f000 fb1a 	bl	800564c <__mcmp>
 8005018:	4632      	mov	r2, r6
 800501a:	9000      	str	r0, [sp, #0]
 800501c:	4639      	mov	r1, r7
 800501e:	4620      	mov	r0, r4
 8005020:	f000 fb2e 	bl	8005680 <__mdiff>
 8005024:	68c3      	ldr	r3, [r0, #12]
 8005026:	4602      	mov	r2, r0
 8005028:	bb03      	cbnz	r3, 800506c <_dtoa_r+0x9fc>
 800502a:	4601      	mov	r1, r0
 800502c:	9008      	str	r0, [sp, #32]
 800502e:	9804      	ldr	r0, [sp, #16]
 8005030:	f000 fb0c 	bl	800564c <__mcmp>
 8005034:	9a08      	ldr	r2, [sp, #32]
 8005036:	4603      	mov	r3, r0
 8005038:	4611      	mov	r1, r2
 800503a:	4620      	mov	r0, r4
 800503c:	9308      	str	r3, [sp, #32]
 800503e:	f000 f924 	bl	800528a <_Bfree>
 8005042:	9b08      	ldr	r3, [sp, #32]
 8005044:	b9a3      	cbnz	r3, 8005070 <_dtoa_r+0xa00>
 8005046:	9a06      	ldr	r2, [sp, #24]
 8005048:	b992      	cbnz	r2, 8005070 <_dtoa_r+0xa00>
 800504a:	9a07      	ldr	r2, [sp, #28]
 800504c:	b982      	cbnz	r2, 8005070 <_dtoa_r+0xa00>
 800504e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005052:	d029      	beq.n	80050a8 <_dtoa_r+0xa38>
 8005054:	9b00      	ldr	r3, [sp, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	dd01      	ble.n	800505e <_dtoa_r+0x9ee>
 800505a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800505e:	9b05      	ldr	r3, [sp, #20]
 8005060:	1c5d      	adds	r5, r3, #1
 8005062:	f883 8000 	strb.w	r8, [r3]
 8005066:	e782      	b.n	8004f6e <_dtoa_r+0x8fe>
 8005068:	4630      	mov	r0, r6
 800506a:	e7c2      	b.n	8004ff2 <_dtoa_r+0x982>
 800506c:	2301      	movs	r3, #1
 800506e:	e7e3      	b.n	8005038 <_dtoa_r+0x9c8>
 8005070:	9a00      	ldr	r2, [sp, #0]
 8005072:	2a00      	cmp	r2, #0
 8005074:	db04      	blt.n	8005080 <_dtoa_r+0xa10>
 8005076:	d125      	bne.n	80050c4 <_dtoa_r+0xa54>
 8005078:	9a06      	ldr	r2, [sp, #24]
 800507a:	bb1a      	cbnz	r2, 80050c4 <_dtoa_r+0xa54>
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	bb0a      	cbnz	r2, 80050c4 <_dtoa_r+0xa54>
 8005080:	2b00      	cmp	r3, #0
 8005082:	ddec      	ble.n	800505e <_dtoa_r+0x9ee>
 8005084:	2201      	movs	r2, #1
 8005086:	9904      	ldr	r1, [sp, #16]
 8005088:	4620      	mov	r0, r4
 800508a:	f000 fa8b 	bl	80055a4 <__lshift>
 800508e:	4639      	mov	r1, r7
 8005090:	9004      	str	r0, [sp, #16]
 8005092:	f000 fadb 	bl	800564c <__mcmp>
 8005096:	2800      	cmp	r0, #0
 8005098:	dc03      	bgt.n	80050a2 <_dtoa_r+0xa32>
 800509a:	d1e0      	bne.n	800505e <_dtoa_r+0x9ee>
 800509c:	f018 0f01 	tst.w	r8, #1
 80050a0:	d0dd      	beq.n	800505e <_dtoa_r+0x9ee>
 80050a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80050a6:	d1d8      	bne.n	800505a <_dtoa_r+0x9ea>
 80050a8:	9b05      	ldr	r3, [sp, #20]
 80050aa:	9a05      	ldr	r2, [sp, #20]
 80050ac:	1c5d      	adds	r5, r3, #1
 80050ae:	2339      	movs	r3, #57	; 0x39
 80050b0:	7013      	strb	r3, [r2, #0]
 80050b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050b6:	2b39      	cmp	r3, #57	; 0x39
 80050b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80050bc:	d04f      	beq.n	800515e <_dtoa_r+0xaee>
 80050be:	3301      	adds	r3, #1
 80050c0:	7013      	strb	r3, [r2, #0]
 80050c2:	e754      	b.n	8004f6e <_dtoa_r+0x8fe>
 80050c4:	9a05      	ldr	r2, [sp, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f102 0501 	add.w	r5, r2, #1
 80050cc:	dd06      	ble.n	80050dc <_dtoa_r+0xa6c>
 80050ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80050d2:	d0e9      	beq.n	80050a8 <_dtoa_r+0xa38>
 80050d4:	f108 0801 	add.w	r8, r8, #1
 80050d8:	9b05      	ldr	r3, [sp, #20]
 80050da:	e7c2      	b.n	8005062 <_dtoa_r+0x9f2>
 80050dc:	9a02      	ldr	r2, [sp, #8]
 80050de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80050e2:	eba5 030b 	sub.w	r3, r5, fp
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d021      	beq.n	800512e <_dtoa_r+0xabe>
 80050ea:	2300      	movs	r3, #0
 80050ec:	220a      	movs	r2, #10
 80050ee:	9904      	ldr	r1, [sp, #16]
 80050f0:	4620      	mov	r0, r4
 80050f2:	f000 f8e1 	bl	80052b8 <__multadd>
 80050f6:	45b1      	cmp	r9, r6
 80050f8:	9004      	str	r0, [sp, #16]
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	f04f 020a 	mov.w	r2, #10
 8005102:	4649      	mov	r1, r9
 8005104:	4620      	mov	r0, r4
 8005106:	d105      	bne.n	8005114 <_dtoa_r+0xaa4>
 8005108:	f000 f8d6 	bl	80052b8 <__multadd>
 800510c:	4681      	mov	r9, r0
 800510e:	4606      	mov	r6, r0
 8005110:	9505      	str	r5, [sp, #20]
 8005112:	e776      	b.n	8005002 <_dtoa_r+0x992>
 8005114:	f000 f8d0 	bl	80052b8 <__multadd>
 8005118:	4631      	mov	r1, r6
 800511a:	4681      	mov	r9, r0
 800511c:	2300      	movs	r3, #0
 800511e:	220a      	movs	r2, #10
 8005120:	4620      	mov	r0, r4
 8005122:	f000 f8c9 	bl	80052b8 <__multadd>
 8005126:	4606      	mov	r6, r0
 8005128:	e7f2      	b.n	8005110 <_dtoa_r+0xaa0>
 800512a:	f04f 0900 	mov.w	r9, #0
 800512e:	2201      	movs	r2, #1
 8005130:	9904      	ldr	r1, [sp, #16]
 8005132:	4620      	mov	r0, r4
 8005134:	f000 fa36 	bl	80055a4 <__lshift>
 8005138:	4639      	mov	r1, r7
 800513a:	9004      	str	r0, [sp, #16]
 800513c:	f000 fa86 	bl	800564c <__mcmp>
 8005140:	2800      	cmp	r0, #0
 8005142:	dcb6      	bgt.n	80050b2 <_dtoa_r+0xa42>
 8005144:	d102      	bne.n	800514c <_dtoa_r+0xadc>
 8005146:	f018 0f01 	tst.w	r8, #1
 800514a:	d1b2      	bne.n	80050b2 <_dtoa_r+0xa42>
 800514c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005150:	2b30      	cmp	r3, #48	; 0x30
 8005152:	f105 32ff 	add.w	r2, r5, #4294967295
 8005156:	f47f af0a 	bne.w	8004f6e <_dtoa_r+0x8fe>
 800515a:	4615      	mov	r5, r2
 800515c:	e7f6      	b.n	800514c <_dtoa_r+0xadc>
 800515e:	4593      	cmp	fp, r2
 8005160:	d105      	bne.n	800516e <_dtoa_r+0xafe>
 8005162:	2331      	movs	r3, #49	; 0x31
 8005164:	f10a 0a01 	add.w	sl, sl, #1
 8005168:	f88b 3000 	strb.w	r3, [fp]
 800516c:	e6ff      	b.n	8004f6e <_dtoa_r+0x8fe>
 800516e:	4615      	mov	r5, r2
 8005170:	e79f      	b.n	80050b2 <_dtoa_r+0xa42>
 8005172:	f8df b064 	ldr.w	fp, [pc, #100]	; 80051d8 <_dtoa_r+0xb68>
 8005176:	e007      	b.n	8005188 <_dtoa_r+0xb18>
 8005178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800517a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80051dc <_dtoa_r+0xb6c>
 800517e:	b11b      	cbz	r3, 8005188 <_dtoa_r+0xb18>
 8005180:	f10b 0308 	add.w	r3, fp, #8
 8005184:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4658      	mov	r0, fp
 800518a:	b017      	add	sp, #92	; 0x5c
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	9b06      	ldr	r3, [sp, #24]
 8005192:	2b01      	cmp	r3, #1
 8005194:	f77f ae35 	ble.w	8004e02 <_dtoa_r+0x792>
 8005198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	e649      	b.n	8004e32 <_dtoa_r+0x7c2>
 800519e:	9b02      	ldr	r3, [sp, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dc03      	bgt.n	80051ac <_dtoa_r+0xb3c>
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	f73f aecc 	bgt.w	8004f44 <_dtoa_r+0x8d4>
 80051ac:	465d      	mov	r5, fp
 80051ae:	4639      	mov	r1, r7
 80051b0:	9804      	ldr	r0, [sp, #16]
 80051b2:	f7ff f9d1 	bl	8004558 <quorem>
 80051b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80051ba:	f805 8b01 	strb.w	r8, [r5], #1
 80051be:	9a02      	ldr	r2, [sp, #8]
 80051c0:	eba5 030b 	sub.w	r3, r5, fp
 80051c4:	429a      	cmp	r2, r3
 80051c6:	ddb0      	ble.n	800512a <_dtoa_r+0xaba>
 80051c8:	2300      	movs	r3, #0
 80051ca:	220a      	movs	r2, #10
 80051cc:	9904      	ldr	r1, [sp, #16]
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f872 	bl	80052b8 <__multadd>
 80051d4:	9004      	str	r0, [sp, #16]
 80051d6:	e7ea      	b.n	80051ae <_dtoa_r+0xb3e>
 80051d8:	08005d80 	.word	0x08005d80
 80051dc:	08005da4 	.word	0x08005da4

080051e0 <_localeconv_r>:
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <_localeconv_r+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a18      	ldr	r0, [r3, #32]
 80051e6:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <_localeconv_r+0x18>)
 80051e8:	2800      	cmp	r0, #0
 80051ea:	bf08      	it	eq
 80051ec:	4618      	moveq	r0, r3
 80051ee:	30f0      	adds	r0, #240	; 0xf0
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c
 80051f8:	20000070 	.word	0x20000070

080051fc <malloc>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <malloc+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f000 bb45 	b.w	8005890 <_malloc_r>
 8005206:	bf00      	nop
 8005208:	2000000c 	.word	0x2000000c

0800520c <memcpy>:
 800520c:	b510      	push	{r4, lr}
 800520e:	1e43      	subs	r3, r0, #1
 8005210:	440a      	add	r2, r1
 8005212:	4291      	cmp	r1, r2
 8005214:	d100      	bne.n	8005218 <memcpy+0xc>
 8005216:	bd10      	pop	{r4, pc}
 8005218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005220:	e7f7      	b.n	8005212 <memcpy+0x6>

08005222 <_Balloc>:
 8005222:	b570      	push	{r4, r5, r6, lr}
 8005224:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005226:	4604      	mov	r4, r0
 8005228:	460e      	mov	r6, r1
 800522a:	b93d      	cbnz	r5, 800523c <_Balloc+0x1a>
 800522c:	2010      	movs	r0, #16
 800522e:	f7ff ffe5 	bl	80051fc <malloc>
 8005232:	6260      	str	r0, [r4, #36]	; 0x24
 8005234:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005238:	6005      	str	r5, [r0, #0]
 800523a:	60c5      	str	r5, [r0, #12]
 800523c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800523e:	68eb      	ldr	r3, [r5, #12]
 8005240:	b183      	cbz	r3, 8005264 <_Balloc+0x42>
 8005242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800524a:	b9b8      	cbnz	r0, 800527c <_Balloc+0x5a>
 800524c:	2101      	movs	r1, #1
 800524e:	fa01 f506 	lsl.w	r5, r1, r6
 8005252:	1d6a      	adds	r2, r5, #5
 8005254:	0092      	lsls	r2, r2, #2
 8005256:	4620      	mov	r0, r4
 8005258:	f000 fabe 	bl	80057d8 <_calloc_r>
 800525c:	b160      	cbz	r0, 8005278 <_Balloc+0x56>
 800525e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005262:	e00e      	b.n	8005282 <_Balloc+0x60>
 8005264:	2221      	movs	r2, #33	; 0x21
 8005266:	2104      	movs	r1, #4
 8005268:	4620      	mov	r0, r4
 800526a:	f000 fab5 	bl	80057d8 <_calloc_r>
 800526e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005270:	60e8      	str	r0, [r5, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e4      	bne.n	8005242 <_Balloc+0x20>
 8005278:	2000      	movs	r0, #0
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	6802      	ldr	r2, [r0, #0]
 800527e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005282:	2300      	movs	r3, #0
 8005284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005288:	e7f7      	b.n	800527a <_Balloc+0x58>

0800528a <_Bfree>:
 800528a:	b570      	push	{r4, r5, r6, lr}
 800528c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800528e:	4606      	mov	r6, r0
 8005290:	460d      	mov	r5, r1
 8005292:	b93c      	cbnz	r4, 80052a4 <_Bfree+0x1a>
 8005294:	2010      	movs	r0, #16
 8005296:	f7ff ffb1 	bl	80051fc <malloc>
 800529a:	6270      	str	r0, [r6, #36]	; 0x24
 800529c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052a0:	6004      	str	r4, [r0, #0]
 80052a2:	60c4      	str	r4, [r0, #12]
 80052a4:	b13d      	cbz	r5, 80052b6 <_Bfree+0x2c>
 80052a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80052a8:	686a      	ldr	r2, [r5, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052b0:	6029      	str	r1, [r5, #0]
 80052b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80052b6:	bd70      	pop	{r4, r5, r6, pc}

080052b8 <__multadd>:
 80052b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052bc:	690d      	ldr	r5, [r1, #16]
 80052be:	461f      	mov	r7, r3
 80052c0:	4606      	mov	r6, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	f101 0c14 	add.w	ip, r1, #20
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8dc 0000 	ldr.w	r0, [ip]
 80052ce:	b281      	uxth	r1, r0
 80052d0:	fb02 7101 	mla	r1, r2, r1, r7
 80052d4:	0c0f      	lsrs	r7, r1, #16
 80052d6:	0c00      	lsrs	r0, r0, #16
 80052d8:	fb02 7000 	mla	r0, r2, r0, r7
 80052dc:	b289      	uxth	r1, r1
 80052de:	3301      	adds	r3, #1
 80052e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80052e4:	429d      	cmp	r5, r3
 80052e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80052ea:	f84c 1b04 	str.w	r1, [ip], #4
 80052ee:	dcec      	bgt.n	80052ca <__multadd+0x12>
 80052f0:	b1d7      	cbz	r7, 8005328 <__multadd+0x70>
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	42ab      	cmp	r3, r5
 80052f6:	dc12      	bgt.n	800531e <__multadd+0x66>
 80052f8:	6861      	ldr	r1, [r4, #4]
 80052fa:	4630      	mov	r0, r6
 80052fc:	3101      	adds	r1, #1
 80052fe:	f7ff ff90 	bl	8005222 <_Balloc>
 8005302:	6922      	ldr	r2, [r4, #16]
 8005304:	3202      	adds	r2, #2
 8005306:	f104 010c 	add.w	r1, r4, #12
 800530a:	4680      	mov	r8, r0
 800530c:	0092      	lsls	r2, r2, #2
 800530e:	300c      	adds	r0, #12
 8005310:	f7ff ff7c 	bl	800520c <memcpy>
 8005314:	4621      	mov	r1, r4
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff ffb7 	bl	800528a <_Bfree>
 800531c:	4644      	mov	r4, r8
 800531e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005322:	3501      	adds	r5, #1
 8005324:	615f      	str	r7, [r3, #20]
 8005326:	6125      	str	r5, [r4, #16]
 8005328:	4620      	mov	r0, r4
 800532a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800532e <__hi0bits>:
 800532e:	0c02      	lsrs	r2, r0, #16
 8005330:	0412      	lsls	r2, r2, #16
 8005332:	4603      	mov	r3, r0
 8005334:	b9b2      	cbnz	r2, 8005364 <__hi0bits+0x36>
 8005336:	0403      	lsls	r3, r0, #16
 8005338:	2010      	movs	r0, #16
 800533a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800533e:	bf04      	itt	eq
 8005340:	021b      	lsleq	r3, r3, #8
 8005342:	3008      	addeq	r0, #8
 8005344:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005348:	bf04      	itt	eq
 800534a:	011b      	lsleq	r3, r3, #4
 800534c:	3004      	addeq	r0, #4
 800534e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005352:	bf04      	itt	eq
 8005354:	009b      	lsleq	r3, r3, #2
 8005356:	3002      	addeq	r0, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	db06      	blt.n	800536a <__hi0bits+0x3c>
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	d503      	bpl.n	8005368 <__hi0bits+0x3a>
 8005360:	3001      	adds	r0, #1
 8005362:	4770      	bx	lr
 8005364:	2000      	movs	r0, #0
 8005366:	e7e8      	b.n	800533a <__hi0bits+0xc>
 8005368:	2020      	movs	r0, #32
 800536a:	4770      	bx	lr

0800536c <__lo0bits>:
 800536c:	6803      	ldr	r3, [r0, #0]
 800536e:	f013 0207 	ands.w	r2, r3, #7
 8005372:	4601      	mov	r1, r0
 8005374:	d00b      	beq.n	800538e <__lo0bits+0x22>
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d423      	bmi.n	80053c2 <__lo0bits+0x56>
 800537a:	0798      	lsls	r0, r3, #30
 800537c:	bf49      	itett	mi
 800537e:	085b      	lsrmi	r3, r3, #1
 8005380:	089b      	lsrpl	r3, r3, #2
 8005382:	2001      	movmi	r0, #1
 8005384:	600b      	strmi	r3, [r1, #0]
 8005386:	bf5c      	itt	pl
 8005388:	600b      	strpl	r3, [r1, #0]
 800538a:	2002      	movpl	r0, #2
 800538c:	4770      	bx	lr
 800538e:	b298      	uxth	r0, r3
 8005390:	b9a8      	cbnz	r0, 80053be <__lo0bits+0x52>
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	2010      	movs	r0, #16
 8005396:	f013 0fff 	tst.w	r3, #255	; 0xff
 800539a:	bf04      	itt	eq
 800539c:	0a1b      	lsreq	r3, r3, #8
 800539e:	3008      	addeq	r0, #8
 80053a0:	071a      	lsls	r2, r3, #28
 80053a2:	bf04      	itt	eq
 80053a4:	091b      	lsreq	r3, r3, #4
 80053a6:	3004      	addeq	r0, #4
 80053a8:	079a      	lsls	r2, r3, #30
 80053aa:	bf04      	itt	eq
 80053ac:	089b      	lsreq	r3, r3, #2
 80053ae:	3002      	addeq	r0, #2
 80053b0:	07da      	lsls	r2, r3, #31
 80053b2:	d402      	bmi.n	80053ba <__lo0bits+0x4e>
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	d006      	beq.n	80053c6 <__lo0bits+0x5a>
 80053b8:	3001      	adds	r0, #1
 80053ba:	600b      	str	r3, [r1, #0]
 80053bc:	4770      	bx	lr
 80053be:	4610      	mov	r0, r2
 80053c0:	e7e9      	b.n	8005396 <__lo0bits+0x2a>
 80053c2:	2000      	movs	r0, #0
 80053c4:	4770      	bx	lr
 80053c6:	2020      	movs	r0, #32
 80053c8:	4770      	bx	lr

080053ca <__i2b>:
 80053ca:	b510      	push	{r4, lr}
 80053cc:	460c      	mov	r4, r1
 80053ce:	2101      	movs	r1, #1
 80053d0:	f7ff ff27 	bl	8005222 <_Balloc>
 80053d4:	2201      	movs	r2, #1
 80053d6:	6144      	str	r4, [r0, #20]
 80053d8:	6102      	str	r2, [r0, #16]
 80053da:	bd10      	pop	{r4, pc}

080053dc <__multiply>:
 80053dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	4614      	mov	r4, r2
 80053e2:	690a      	ldr	r2, [r1, #16]
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	bfb8      	it	lt
 80053ea:	460b      	movlt	r3, r1
 80053ec:	4688      	mov	r8, r1
 80053ee:	bfbc      	itt	lt
 80053f0:	46a0      	movlt	r8, r4
 80053f2:	461c      	movlt	r4, r3
 80053f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80053f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80053fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005400:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005404:	eb07 0609 	add.w	r6, r7, r9
 8005408:	42b3      	cmp	r3, r6
 800540a:	bfb8      	it	lt
 800540c:	3101      	addlt	r1, #1
 800540e:	f7ff ff08 	bl	8005222 <_Balloc>
 8005412:	f100 0514 	add.w	r5, r0, #20
 8005416:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800541a:	462b      	mov	r3, r5
 800541c:	2200      	movs	r2, #0
 800541e:	4573      	cmp	r3, lr
 8005420:	d316      	bcc.n	8005450 <__multiply+0x74>
 8005422:	f104 0214 	add.w	r2, r4, #20
 8005426:	f108 0114 	add.w	r1, r8, #20
 800542a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800542e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	9b00      	ldr	r3, [sp, #0]
 8005436:	9201      	str	r2, [sp, #4]
 8005438:	4293      	cmp	r3, r2
 800543a:	d80c      	bhi.n	8005456 <__multiply+0x7a>
 800543c:	2e00      	cmp	r6, #0
 800543e:	dd03      	ble.n	8005448 <__multiply+0x6c>
 8005440:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005444:	2b00      	cmp	r3, #0
 8005446:	d05d      	beq.n	8005504 <__multiply+0x128>
 8005448:	6106      	str	r6, [r0, #16]
 800544a:	b003      	add	sp, #12
 800544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005450:	f843 2b04 	str.w	r2, [r3], #4
 8005454:	e7e3      	b.n	800541e <__multiply+0x42>
 8005456:	f8b2 b000 	ldrh.w	fp, [r2]
 800545a:	f1bb 0f00 	cmp.w	fp, #0
 800545e:	d023      	beq.n	80054a8 <__multiply+0xcc>
 8005460:	4689      	mov	r9, r1
 8005462:	46ac      	mov	ip, r5
 8005464:	f04f 0800 	mov.w	r8, #0
 8005468:	f859 4b04 	ldr.w	r4, [r9], #4
 800546c:	f8dc a000 	ldr.w	sl, [ip]
 8005470:	b2a3      	uxth	r3, r4
 8005472:	fa1f fa8a 	uxth.w	sl, sl
 8005476:	fb0b a303 	mla	r3, fp, r3, sl
 800547a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800547e:	f8dc 4000 	ldr.w	r4, [ip]
 8005482:	4443      	add	r3, r8
 8005484:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005488:	fb0b 840a 	mla	r4, fp, sl, r8
 800548c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005490:	46e2      	mov	sl, ip
 8005492:	b29b      	uxth	r3, r3
 8005494:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005498:	454f      	cmp	r7, r9
 800549a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800549e:	f84a 3b04 	str.w	r3, [sl], #4
 80054a2:	d82b      	bhi.n	80054fc <__multiply+0x120>
 80054a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80054a8:	9b01      	ldr	r3, [sp, #4]
 80054aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80054ae:	3204      	adds	r2, #4
 80054b0:	f1ba 0f00 	cmp.w	sl, #0
 80054b4:	d020      	beq.n	80054f8 <__multiply+0x11c>
 80054b6:	682b      	ldr	r3, [r5, #0]
 80054b8:	4689      	mov	r9, r1
 80054ba:	46a8      	mov	r8, r5
 80054bc:	f04f 0b00 	mov.w	fp, #0
 80054c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80054c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80054c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80054cc:	445c      	add	r4, fp
 80054ce:	46c4      	mov	ip, r8
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80054d6:	f84c 3b04 	str.w	r3, [ip], #4
 80054da:	f859 3b04 	ldr.w	r3, [r9], #4
 80054de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	fb0a b303 	mla	r3, sl, r3, fp
 80054e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80054ec:	454f      	cmp	r7, r9
 80054ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80054f2:	d805      	bhi.n	8005500 <__multiply+0x124>
 80054f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80054f8:	3504      	adds	r5, #4
 80054fa:	e79b      	b.n	8005434 <__multiply+0x58>
 80054fc:	46d4      	mov	ip, sl
 80054fe:	e7b3      	b.n	8005468 <__multiply+0x8c>
 8005500:	46e0      	mov	r8, ip
 8005502:	e7dd      	b.n	80054c0 <__multiply+0xe4>
 8005504:	3e01      	subs	r6, #1
 8005506:	e799      	b.n	800543c <__multiply+0x60>

08005508 <__pow5mult>:
 8005508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800550c:	4615      	mov	r5, r2
 800550e:	f012 0203 	ands.w	r2, r2, #3
 8005512:	4606      	mov	r6, r0
 8005514:	460f      	mov	r7, r1
 8005516:	d007      	beq.n	8005528 <__pow5mult+0x20>
 8005518:	3a01      	subs	r2, #1
 800551a:	4c21      	ldr	r4, [pc, #132]	; (80055a0 <__pow5mult+0x98>)
 800551c:	2300      	movs	r3, #0
 800551e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005522:	f7ff fec9 	bl	80052b8 <__multadd>
 8005526:	4607      	mov	r7, r0
 8005528:	10ad      	asrs	r5, r5, #2
 800552a:	d035      	beq.n	8005598 <__pow5mult+0x90>
 800552c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800552e:	b93c      	cbnz	r4, 8005540 <__pow5mult+0x38>
 8005530:	2010      	movs	r0, #16
 8005532:	f7ff fe63 	bl	80051fc <malloc>
 8005536:	6270      	str	r0, [r6, #36]	; 0x24
 8005538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800553c:	6004      	str	r4, [r0, #0]
 800553e:	60c4      	str	r4, [r0, #12]
 8005540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005548:	b94c      	cbnz	r4, 800555e <__pow5mult+0x56>
 800554a:	f240 2171 	movw	r1, #625	; 0x271
 800554e:	4630      	mov	r0, r6
 8005550:	f7ff ff3b 	bl	80053ca <__i2b>
 8005554:	2300      	movs	r3, #0
 8005556:	f8c8 0008 	str.w	r0, [r8, #8]
 800555a:	4604      	mov	r4, r0
 800555c:	6003      	str	r3, [r0, #0]
 800555e:	f04f 0800 	mov.w	r8, #0
 8005562:	07eb      	lsls	r3, r5, #31
 8005564:	d50a      	bpl.n	800557c <__pow5mult+0x74>
 8005566:	4639      	mov	r1, r7
 8005568:	4622      	mov	r2, r4
 800556a:	4630      	mov	r0, r6
 800556c:	f7ff ff36 	bl	80053dc <__multiply>
 8005570:	4639      	mov	r1, r7
 8005572:	4681      	mov	r9, r0
 8005574:	4630      	mov	r0, r6
 8005576:	f7ff fe88 	bl	800528a <_Bfree>
 800557a:	464f      	mov	r7, r9
 800557c:	106d      	asrs	r5, r5, #1
 800557e:	d00b      	beq.n	8005598 <__pow5mult+0x90>
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	b938      	cbnz	r0, 8005594 <__pow5mult+0x8c>
 8005584:	4622      	mov	r2, r4
 8005586:	4621      	mov	r1, r4
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff ff27 	bl	80053dc <__multiply>
 800558e:	6020      	str	r0, [r4, #0]
 8005590:	f8c0 8000 	str.w	r8, [r0]
 8005594:	4604      	mov	r4, r0
 8005596:	e7e4      	b.n	8005562 <__pow5mult+0x5a>
 8005598:	4638      	mov	r0, r7
 800559a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559e:	bf00      	nop
 80055a0:	08005ea8 	.word	0x08005ea8

080055a4 <__lshift>:
 80055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	460c      	mov	r4, r1
 80055aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	6849      	ldr	r1, [r1, #4]
 80055b2:	eb0a 0903 	add.w	r9, sl, r3
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	4607      	mov	r7, r0
 80055ba:	4616      	mov	r6, r2
 80055bc:	f109 0501 	add.w	r5, r9, #1
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	db32      	blt.n	800562a <__lshift+0x86>
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff fe2c 	bl	8005222 <_Balloc>
 80055ca:	2300      	movs	r3, #0
 80055cc:	4680      	mov	r8, r0
 80055ce:	f100 0114 	add.w	r1, r0, #20
 80055d2:	461a      	mov	r2, r3
 80055d4:	4553      	cmp	r3, sl
 80055d6:	db2b      	blt.n	8005630 <__lshift+0x8c>
 80055d8:	6920      	ldr	r0, [r4, #16]
 80055da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055de:	f104 0314 	add.w	r3, r4, #20
 80055e2:	f016 021f 	ands.w	r2, r6, #31
 80055e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055ee:	d025      	beq.n	800563c <__lshift+0x98>
 80055f0:	f1c2 0e20 	rsb	lr, r2, #32
 80055f4:	2000      	movs	r0, #0
 80055f6:	681e      	ldr	r6, [r3, #0]
 80055f8:	468a      	mov	sl, r1
 80055fa:	4096      	lsls	r6, r2
 80055fc:	4330      	orrs	r0, r6
 80055fe:	f84a 0b04 	str.w	r0, [sl], #4
 8005602:	f853 0b04 	ldr.w	r0, [r3], #4
 8005606:	459c      	cmp	ip, r3
 8005608:	fa20 f00e 	lsr.w	r0, r0, lr
 800560c:	d814      	bhi.n	8005638 <__lshift+0x94>
 800560e:	6048      	str	r0, [r1, #4]
 8005610:	b108      	cbz	r0, 8005616 <__lshift+0x72>
 8005612:	f109 0502 	add.w	r5, r9, #2
 8005616:	3d01      	subs	r5, #1
 8005618:	4638      	mov	r0, r7
 800561a:	f8c8 5010 	str.w	r5, [r8, #16]
 800561e:	4621      	mov	r1, r4
 8005620:	f7ff fe33 	bl	800528a <_Bfree>
 8005624:	4640      	mov	r0, r8
 8005626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562a:	3101      	adds	r1, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	e7c7      	b.n	80055c0 <__lshift+0x1c>
 8005630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005634:	3301      	adds	r3, #1
 8005636:	e7cd      	b.n	80055d4 <__lshift+0x30>
 8005638:	4651      	mov	r1, sl
 800563a:	e7dc      	b.n	80055f6 <__lshift+0x52>
 800563c:	3904      	subs	r1, #4
 800563e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005642:	f841 2f04 	str.w	r2, [r1, #4]!
 8005646:	459c      	cmp	ip, r3
 8005648:	d8f9      	bhi.n	800563e <__lshift+0x9a>
 800564a:	e7e4      	b.n	8005616 <__lshift+0x72>

0800564c <__mcmp>:
 800564c:	6903      	ldr	r3, [r0, #16]
 800564e:	690a      	ldr	r2, [r1, #16]
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	b530      	push	{r4, r5, lr}
 8005654:	d10c      	bne.n	8005670 <__mcmp+0x24>
 8005656:	0092      	lsls	r2, r2, #2
 8005658:	3014      	adds	r0, #20
 800565a:	3114      	adds	r1, #20
 800565c:	1884      	adds	r4, r0, r2
 800565e:	4411      	add	r1, r2
 8005660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005668:	4295      	cmp	r5, r2
 800566a:	d003      	beq.n	8005674 <__mcmp+0x28>
 800566c:	d305      	bcc.n	800567a <__mcmp+0x2e>
 800566e:	2301      	movs	r3, #1
 8005670:	4618      	mov	r0, r3
 8005672:	bd30      	pop	{r4, r5, pc}
 8005674:	42a0      	cmp	r0, r4
 8005676:	d3f3      	bcc.n	8005660 <__mcmp+0x14>
 8005678:	e7fa      	b.n	8005670 <__mcmp+0x24>
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	e7f7      	b.n	8005670 <__mcmp+0x24>

08005680 <__mdiff>:
 8005680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	460d      	mov	r5, r1
 8005686:	4607      	mov	r7, r0
 8005688:	4611      	mov	r1, r2
 800568a:	4628      	mov	r0, r5
 800568c:	4614      	mov	r4, r2
 800568e:	f7ff ffdd 	bl	800564c <__mcmp>
 8005692:	1e06      	subs	r6, r0, #0
 8005694:	d108      	bne.n	80056a8 <__mdiff+0x28>
 8005696:	4631      	mov	r1, r6
 8005698:	4638      	mov	r0, r7
 800569a:	f7ff fdc2 	bl	8005222 <_Balloc>
 800569e:	2301      	movs	r3, #1
 80056a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80056a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a8:	bfa4      	itt	ge
 80056aa:	4623      	movge	r3, r4
 80056ac:	462c      	movge	r4, r5
 80056ae:	4638      	mov	r0, r7
 80056b0:	6861      	ldr	r1, [r4, #4]
 80056b2:	bfa6      	itte	ge
 80056b4:	461d      	movge	r5, r3
 80056b6:	2600      	movge	r6, #0
 80056b8:	2601      	movlt	r6, #1
 80056ba:	f7ff fdb2 	bl	8005222 <_Balloc>
 80056be:	692b      	ldr	r3, [r5, #16]
 80056c0:	60c6      	str	r6, [r0, #12]
 80056c2:	6926      	ldr	r6, [r4, #16]
 80056c4:	f105 0914 	add.w	r9, r5, #20
 80056c8:	f104 0214 	add.w	r2, r4, #20
 80056cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80056d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80056d4:	f100 0514 	add.w	r5, r0, #20
 80056d8:	f04f 0e00 	mov.w	lr, #0
 80056dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80056e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80056e4:	fa1e f18a 	uxtah	r1, lr, sl
 80056e8:	b2a3      	uxth	r3, r4
 80056ea:	1ac9      	subs	r1, r1, r3
 80056ec:	0c23      	lsrs	r3, r4, #16
 80056ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80056f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056f6:	b289      	uxth	r1, r1
 80056f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80056fc:	45c8      	cmp	r8, r9
 80056fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005702:	4694      	mov	ip, r2
 8005704:	f845 3b04 	str.w	r3, [r5], #4
 8005708:	d8e8      	bhi.n	80056dc <__mdiff+0x5c>
 800570a:	45bc      	cmp	ip, r7
 800570c:	d304      	bcc.n	8005718 <__mdiff+0x98>
 800570e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005712:	b183      	cbz	r3, 8005736 <__mdiff+0xb6>
 8005714:	6106      	str	r6, [r0, #16]
 8005716:	e7c5      	b.n	80056a4 <__mdiff+0x24>
 8005718:	f85c 1b04 	ldr.w	r1, [ip], #4
 800571c:	fa1e f381 	uxtah	r3, lr, r1
 8005720:	141a      	asrs	r2, r3, #16
 8005722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800572c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005730:	f845 3b04 	str.w	r3, [r5], #4
 8005734:	e7e9      	b.n	800570a <__mdiff+0x8a>
 8005736:	3e01      	subs	r6, #1
 8005738:	e7e9      	b.n	800570e <__mdiff+0x8e>

0800573a <__d2b>:
 800573a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	2101      	movs	r1, #1
 8005742:	ec59 8b10 	vmov	r8, r9, d0
 8005746:	4615      	mov	r5, r2
 8005748:	f7ff fd6b 	bl	8005222 <_Balloc>
 800574c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005750:	4607      	mov	r7, r0
 8005752:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005756:	bb34      	cbnz	r4, 80057a6 <__d2b+0x6c>
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	f1b8 0300 	subs.w	r3, r8, #0
 800575e:	d027      	beq.n	80057b0 <__d2b+0x76>
 8005760:	a802      	add	r0, sp, #8
 8005762:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005766:	f7ff fe01 	bl	800536c <__lo0bits>
 800576a:	9900      	ldr	r1, [sp, #0]
 800576c:	b1f0      	cbz	r0, 80057ac <__d2b+0x72>
 800576e:	9a01      	ldr	r2, [sp, #4]
 8005770:	f1c0 0320 	rsb	r3, r0, #32
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	430b      	orrs	r3, r1
 800577a:	40c2      	lsrs	r2, r0
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	9201      	str	r2, [sp, #4]
 8005780:	9b01      	ldr	r3, [sp, #4]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf14      	ite	ne
 8005788:	2102      	movne	r1, #2
 800578a:	2101      	moveq	r1, #1
 800578c:	6139      	str	r1, [r7, #16]
 800578e:	b1c4      	cbz	r4, 80057c2 <__d2b+0x88>
 8005790:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005794:	4404      	add	r4, r0
 8005796:	6034      	str	r4, [r6, #0]
 8005798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800579c:	6028      	str	r0, [r5, #0]
 800579e:	4638      	mov	r0, r7
 80057a0:	b003      	add	sp, #12
 80057a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057aa:	e7d5      	b.n	8005758 <__d2b+0x1e>
 80057ac:	6179      	str	r1, [r7, #20]
 80057ae:	e7e7      	b.n	8005780 <__d2b+0x46>
 80057b0:	a801      	add	r0, sp, #4
 80057b2:	f7ff fddb 	bl	800536c <__lo0bits>
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	2101      	movs	r1, #1
 80057bc:	6139      	str	r1, [r7, #16]
 80057be:	3020      	adds	r0, #32
 80057c0:	e7e5      	b.n	800578e <__d2b+0x54>
 80057c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80057c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057ca:	6030      	str	r0, [r6, #0]
 80057cc:	6918      	ldr	r0, [r3, #16]
 80057ce:	f7ff fdae 	bl	800532e <__hi0bits>
 80057d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80057d6:	e7e1      	b.n	800579c <__d2b+0x62>

080057d8 <_calloc_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	fb02 f401 	mul.w	r4, r2, r1
 80057de:	4621      	mov	r1, r4
 80057e0:	f000 f856 	bl	8005890 <_malloc_r>
 80057e4:	4605      	mov	r5, r0
 80057e6:	b118      	cbz	r0, 80057f0 <_calloc_r+0x18>
 80057e8:	4622      	mov	r2, r4
 80057ea:	2100      	movs	r1, #0
 80057ec:	f7fe fa30 	bl	8003c50 <memset>
 80057f0:	4628      	mov	r0, r5
 80057f2:	bd38      	pop	{r3, r4, r5, pc}

080057f4 <_free_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	2900      	cmp	r1, #0
 80057fa:	d045      	beq.n	8005888 <_free_r+0x94>
 80057fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005800:	1f0c      	subs	r4, r1, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfb8      	it	lt
 8005806:	18e4      	addlt	r4, r4, r3
 8005808:	f000 fa29 	bl	8005c5e <__malloc_lock>
 800580c:	4a1f      	ldr	r2, [pc, #124]	; (800588c <_free_r+0x98>)
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	4610      	mov	r0, r2
 8005812:	b933      	cbnz	r3, 8005822 <_free_r+0x2e>
 8005814:	6063      	str	r3, [r4, #4]
 8005816:	6014      	str	r4, [r2, #0]
 8005818:	4628      	mov	r0, r5
 800581a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800581e:	f000 ba1f 	b.w	8005c60 <__malloc_unlock>
 8005822:	42a3      	cmp	r3, r4
 8005824:	d90c      	bls.n	8005840 <_free_r+0x4c>
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	1862      	adds	r2, r4, r1
 800582a:	4293      	cmp	r3, r2
 800582c:	bf04      	itt	eq
 800582e:	681a      	ldreq	r2, [r3, #0]
 8005830:	685b      	ldreq	r3, [r3, #4]
 8005832:	6063      	str	r3, [r4, #4]
 8005834:	bf04      	itt	eq
 8005836:	1852      	addeq	r2, r2, r1
 8005838:	6022      	streq	r2, [r4, #0]
 800583a:	6004      	str	r4, [r0, #0]
 800583c:	e7ec      	b.n	8005818 <_free_r+0x24>
 800583e:	4613      	mov	r3, r2
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	b10a      	cbz	r2, 8005848 <_free_r+0x54>
 8005844:	42a2      	cmp	r2, r4
 8005846:	d9fa      	bls.n	800583e <_free_r+0x4a>
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	1858      	adds	r0, r3, r1
 800584c:	42a0      	cmp	r0, r4
 800584e:	d10b      	bne.n	8005868 <_free_r+0x74>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	4401      	add	r1, r0
 8005854:	1858      	adds	r0, r3, r1
 8005856:	4282      	cmp	r2, r0
 8005858:	6019      	str	r1, [r3, #0]
 800585a:	d1dd      	bne.n	8005818 <_free_r+0x24>
 800585c:	6810      	ldr	r0, [r2, #0]
 800585e:	6852      	ldr	r2, [r2, #4]
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	4401      	add	r1, r0
 8005864:	6019      	str	r1, [r3, #0]
 8005866:	e7d7      	b.n	8005818 <_free_r+0x24>
 8005868:	d902      	bls.n	8005870 <_free_r+0x7c>
 800586a:	230c      	movs	r3, #12
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	e7d3      	b.n	8005818 <_free_r+0x24>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	1821      	adds	r1, r4, r0
 8005874:	428a      	cmp	r2, r1
 8005876:	bf04      	itt	eq
 8005878:	6811      	ldreq	r1, [r2, #0]
 800587a:	6852      	ldreq	r2, [r2, #4]
 800587c:	6062      	str	r2, [r4, #4]
 800587e:	bf04      	itt	eq
 8005880:	1809      	addeq	r1, r1, r0
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	605c      	str	r4, [r3, #4]
 8005886:	e7c7      	b.n	8005818 <_free_r+0x24>
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	20000204 	.word	0x20000204

08005890 <_malloc_r>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	1ccd      	adds	r5, r1, #3
 8005894:	f025 0503 	bic.w	r5, r5, #3
 8005898:	3508      	adds	r5, #8
 800589a:	2d0c      	cmp	r5, #12
 800589c:	bf38      	it	cc
 800589e:	250c      	movcc	r5, #12
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	4606      	mov	r6, r0
 80058a4:	db01      	blt.n	80058aa <_malloc_r+0x1a>
 80058a6:	42a9      	cmp	r1, r5
 80058a8:	d903      	bls.n	80058b2 <_malloc_r+0x22>
 80058aa:	230c      	movs	r3, #12
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	2000      	movs	r0, #0
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	f000 f9d4 	bl	8005c5e <__malloc_lock>
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <_malloc_r+0xac>)
 80058b8:	6814      	ldr	r4, [r2, #0]
 80058ba:	4621      	mov	r1, r4
 80058bc:	b991      	cbnz	r1, 80058e4 <_malloc_r+0x54>
 80058be:	4c20      	ldr	r4, [pc, #128]	; (8005940 <_malloc_r+0xb0>)
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	b91b      	cbnz	r3, 80058cc <_malloc_r+0x3c>
 80058c4:	4630      	mov	r0, r6
 80058c6:	f000 f98f 	bl	8005be8 <_sbrk_r>
 80058ca:	6020      	str	r0, [r4, #0]
 80058cc:	4629      	mov	r1, r5
 80058ce:	4630      	mov	r0, r6
 80058d0:	f000 f98a 	bl	8005be8 <_sbrk_r>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d124      	bne.n	8005922 <_malloc_r+0x92>
 80058d8:	230c      	movs	r3, #12
 80058da:	6033      	str	r3, [r6, #0]
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 f9bf 	bl	8005c60 <__malloc_unlock>
 80058e2:	e7e4      	b.n	80058ae <_malloc_r+0x1e>
 80058e4:	680b      	ldr	r3, [r1, #0]
 80058e6:	1b5b      	subs	r3, r3, r5
 80058e8:	d418      	bmi.n	800591c <_malloc_r+0x8c>
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d90f      	bls.n	800590e <_malloc_r+0x7e>
 80058ee:	600b      	str	r3, [r1, #0]
 80058f0:	50cd      	str	r5, [r1, r3]
 80058f2:	18cc      	adds	r4, r1, r3
 80058f4:	4630      	mov	r0, r6
 80058f6:	f000 f9b3 	bl	8005c60 <__malloc_unlock>
 80058fa:	f104 000b 	add.w	r0, r4, #11
 80058fe:	1d23      	adds	r3, r4, #4
 8005900:	f020 0007 	bic.w	r0, r0, #7
 8005904:	1ac3      	subs	r3, r0, r3
 8005906:	d0d3      	beq.n	80058b0 <_malloc_r+0x20>
 8005908:	425a      	negs	r2, r3
 800590a:	50e2      	str	r2, [r4, r3]
 800590c:	e7d0      	b.n	80058b0 <_malloc_r+0x20>
 800590e:	428c      	cmp	r4, r1
 8005910:	684b      	ldr	r3, [r1, #4]
 8005912:	bf16      	itet	ne
 8005914:	6063      	strne	r3, [r4, #4]
 8005916:	6013      	streq	r3, [r2, #0]
 8005918:	460c      	movne	r4, r1
 800591a:	e7eb      	b.n	80058f4 <_malloc_r+0x64>
 800591c:	460c      	mov	r4, r1
 800591e:	6849      	ldr	r1, [r1, #4]
 8005920:	e7cc      	b.n	80058bc <_malloc_r+0x2c>
 8005922:	1cc4      	adds	r4, r0, #3
 8005924:	f024 0403 	bic.w	r4, r4, #3
 8005928:	42a0      	cmp	r0, r4
 800592a:	d005      	beq.n	8005938 <_malloc_r+0xa8>
 800592c:	1a21      	subs	r1, r4, r0
 800592e:	4630      	mov	r0, r6
 8005930:	f000 f95a 	bl	8005be8 <_sbrk_r>
 8005934:	3001      	adds	r0, #1
 8005936:	d0cf      	beq.n	80058d8 <_malloc_r+0x48>
 8005938:	6025      	str	r5, [r4, #0]
 800593a:	e7db      	b.n	80058f4 <_malloc_r+0x64>
 800593c:	20000204 	.word	0x20000204
 8005940:	20000208 	.word	0x20000208

08005944 <__ssputs_r>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	688e      	ldr	r6, [r1, #8]
 800594a:	429e      	cmp	r6, r3
 800594c:	4682      	mov	sl, r0
 800594e:	460c      	mov	r4, r1
 8005950:	4690      	mov	r8, r2
 8005952:	4699      	mov	r9, r3
 8005954:	d837      	bhi.n	80059c6 <__ssputs_r+0x82>
 8005956:	898a      	ldrh	r2, [r1, #12]
 8005958:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800595c:	d031      	beq.n	80059c2 <__ssputs_r+0x7e>
 800595e:	6825      	ldr	r5, [r4, #0]
 8005960:	6909      	ldr	r1, [r1, #16]
 8005962:	1a6f      	subs	r7, r5, r1
 8005964:	6965      	ldr	r5, [r4, #20]
 8005966:	2302      	movs	r3, #2
 8005968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800596c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005970:	f109 0301 	add.w	r3, r9, #1
 8005974:	443b      	add	r3, r7
 8005976:	429d      	cmp	r5, r3
 8005978:	bf38      	it	cc
 800597a:	461d      	movcc	r5, r3
 800597c:	0553      	lsls	r3, r2, #21
 800597e:	d530      	bpl.n	80059e2 <__ssputs_r+0x9e>
 8005980:	4629      	mov	r1, r5
 8005982:	f7ff ff85 	bl	8005890 <_malloc_r>
 8005986:	4606      	mov	r6, r0
 8005988:	b950      	cbnz	r0, 80059a0 <__ssputs_r+0x5c>
 800598a:	230c      	movs	r3, #12
 800598c:	f8ca 3000 	str.w	r3, [sl]
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	463a      	mov	r2, r7
 80059a2:	6921      	ldr	r1, [r4, #16]
 80059a4:	f7ff fc32 	bl	800520c <memcpy>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	6126      	str	r6, [r4, #16]
 80059b6:	6165      	str	r5, [r4, #20]
 80059b8:	443e      	add	r6, r7
 80059ba:	1bed      	subs	r5, r5, r7
 80059bc:	6026      	str	r6, [r4, #0]
 80059be:	60a5      	str	r5, [r4, #8]
 80059c0:	464e      	mov	r6, r9
 80059c2:	454e      	cmp	r6, r9
 80059c4:	d900      	bls.n	80059c8 <__ssputs_r+0x84>
 80059c6:	464e      	mov	r6, r9
 80059c8:	4632      	mov	r2, r6
 80059ca:	4641      	mov	r1, r8
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	f000 f92d 	bl	8005c2c <memmove>
 80059d2:	68a3      	ldr	r3, [r4, #8]
 80059d4:	1b9b      	subs	r3, r3, r6
 80059d6:	60a3      	str	r3, [r4, #8]
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	441e      	add	r6, r3
 80059dc:	6026      	str	r6, [r4, #0]
 80059de:	2000      	movs	r0, #0
 80059e0:	e7dc      	b.n	800599c <__ssputs_r+0x58>
 80059e2:	462a      	mov	r2, r5
 80059e4:	f000 f93d 	bl	8005c62 <_realloc_r>
 80059e8:	4606      	mov	r6, r0
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d1e2      	bne.n	80059b4 <__ssputs_r+0x70>
 80059ee:	6921      	ldr	r1, [r4, #16]
 80059f0:	4650      	mov	r0, sl
 80059f2:	f7ff feff 	bl	80057f4 <_free_r>
 80059f6:	e7c8      	b.n	800598a <__ssputs_r+0x46>

080059f8 <_svfiprintf_r>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	461d      	mov	r5, r3
 80059fe:	898b      	ldrh	r3, [r1, #12]
 8005a00:	061f      	lsls	r7, r3, #24
 8005a02:	b09d      	sub	sp, #116	; 0x74
 8005a04:	4680      	mov	r8, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	4616      	mov	r6, r2
 8005a0a:	d50f      	bpl.n	8005a2c <_svfiprintf_r+0x34>
 8005a0c:	690b      	ldr	r3, [r1, #16]
 8005a0e:	b96b      	cbnz	r3, 8005a2c <_svfiprintf_r+0x34>
 8005a10:	2140      	movs	r1, #64	; 0x40
 8005a12:	f7ff ff3d 	bl	8005890 <_malloc_r>
 8005a16:	6020      	str	r0, [r4, #0]
 8005a18:	6120      	str	r0, [r4, #16]
 8005a1a:	b928      	cbnz	r0, 8005a28 <_svfiprintf_r+0x30>
 8005a1c:	230c      	movs	r3, #12
 8005a1e:	f8c8 3000 	str.w	r3, [r8]
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	e0c8      	b.n	8005bba <_svfiprintf_r+0x1c2>
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	6163      	str	r3, [r4, #20]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	2320      	movs	r3, #32
 8005a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a36:	2330      	movs	r3, #48	; 0x30
 8005a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a3c:	9503      	str	r5, [sp, #12]
 8005a3e:	f04f 0b01 	mov.w	fp, #1
 8005a42:	4637      	mov	r7, r6
 8005a44:	463d      	mov	r5, r7
 8005a46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a4a:	b10b      	cbz	r3, 8005a50 <_svfiprintf_r+0x58>
 8005a4c:	2b25      	cmp	r3, #37	; 0x25
 8005a4e:	d13e      	bne.n	8005ace <_svfiprintf_r+0xd6>
 8005a50:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a54:	d00b      	beq.n	8005a6e <_svfiprintf_r+0x76>
 8005a56:	4653      	mov	r3, sl
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	f7ff ff71 	bl	8005944 <__ssputs_r>
 8005a62:	3001      	adds	r0, #1
 8005a64:	f000 80a4 	beq.w	8005bb0 <_svfiprintf_r+0x1b8>
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	4453      	add	r3, sl
 8005a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6e:	783b      	ldrb	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 809d 	beq.w	8005bb0 <_svfiprintf_r+0x1b8>
 8005a76:	2300      	movs	r3, #0
 8005a78:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	9307      	str	r3, [sp, #28]
 8005a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a88:	931a      	str	r3, [sp, #104]	; 0x68
 8005a8a:	462f      	mov	r7, r5
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a92:	4850      	ldr	r0, [pc, #320]	; (8005bd4 <_svfiprintf_r+0x1dc>)
 8005a94:	f7fa fbac 	bl	80001f0 <memchr>
 8005a98:	9b04      	ldr	r3, [sp, #16]
 8005a9a:	b9d0      	cbnz	r0, 8005ad2 <_svfiprintf_r+0xda>
 8005a9c:	06d9      	lsls	r1, r3, #27
 8005a9e:	bf44      	itt	mi
 8005aa0:	2220      	movmi	r2, #32
 8005aa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005aa6:	071a      	lsls	r2, r3, #28
 8005aa8:	bf44      	itt	mi
 8005aaa:	222b      	movmi	r2, #43	; 0x2b
 8005aac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ab0:	782a      	ldrb	r2, [r5, #0]
 8005ab2:	2a2a      	cmp	r2, #42	; 0x2a
 8005ab4:	d015      	beq.n	8005ae2 <_svfiprintf_r+0xea>
 8005ab6:	9a07      	ldr	r2, [sp, #28]
 8005ab8:	462f      	mov	r7, r5
 8005aba:	2000      	movs	r0, #0
 8005abc:	250a      	movs	r5, #10
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac4:	3b30      	subs	r3, #48	; 0x30
 8005ac6:	2b09      	cmp	r3, #9
 8005ac8:	d94d      	bls.n	8005b66 <_svfiprintf_r+0x16e>
 8005aca:	b1b8      	cbz	r0, 8005afc <_svfiprintf_r+0x104>
 8005acc:	e00f      	b.n	8005aee <_svfiprintf_r+0xf6>
 8005ace:	462f      	mov	r7, r5
 8005ad0:	e7b8      	b.n	8005a44 <_svfiprintf_r+0x4c>
 8005ad2:	4a40      	ldr	r2, [pc, #256]	; (8005bd4 <_svfiprintf_r+0x1dc>)
 8005ad4:	1a80      	subs	r0, r0, r2
 8005ad6:	fa0b f000 	lsl.w	r0, fp, r0
 8005ada:	4318      	orrs	r0, r3
 8005adc:	9004      	str	r0, [sp, #16]
 8005ade:	463d      	mov	r5, r7
 8005ae0:	e7d3      	b.n	8005a8a <_svfiprintf_r+0x92>
 8005ae2:	9a03      	ldr	r2, [sp, #12]
 8005ae4:	1d11      	adds	r1, r2, #4
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	9103      	str	r1, [sp, #12]
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	db01      	blt.n	8005af2 <_svfiprintf_r+0xfa>
 8005aee:	9207      	str	r2, [sp, #28]
 8005af0:	e004      	b.n	8005afc <_svfiprintf_r+0x104>
 8005af2:	4252      	negs	r2, r2
 8005af4:	f043 0302 	orr.w	r3, r3, #2
 8005af8:	9207      	str	r2, [sp, #28]
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	783b      	ldrb	r3, [r7, #0]
 8005afe:	2b2e      	cmp	r3, #46	; 0x2e
 8005b00:	d10c      	bne.n	8005b1c <_svfiprintf_r+0x124>
 8005b02:	787b      	ldrb	r3, [r7, #1]
 8005b04:	2b2a      	cmp	r3, #42	; 0x2a
 8005b06:	d133      	bne.n	8005b70 <_svfiprintf_r+0x178>
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	9203      	str	r2, [sp, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bfb8      	it	lt
 8005b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b18:	3702      	adds	r7, #2
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	4d2e      	ldr	r5, [pc, #184]	; (8005bd8 <_svfiprintf_r+0x1e0>)
 8005b1e:	7839      	ldrb	r1, [r7, #0]
 8005b20:	2203      	movs	r2, #3
 8005b22:	4628      	mov	r0, r5
 8005b24:	f7fa fb64 	bl	80001f0 <memchr>
 8005b28:	b138      	cbz	r0, 8005b3a <_svfiprintf_r+0x142>
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	1b40      	subs	r0, r0, r5
 8005b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	4303      	orrs	r3, r0
 8005b36:	3701      	adds	r7, #1
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	7839      	ldrb	r1, [r7, #0]
 8005b3c:	4827      	ldr	r0, [pc, #156]	; (8005bdc <_svfiprintf_r+0x1e4>)
 8005b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b42:	2206      	movs	r2, #6
 8005b44:	1c7e      	adds	r6, r7, #1
 8005b46:	f7fa fb53 	bl	80001f0 <memchr>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d038      	beq.n	8005bc0 <_svfiprintf_r+0x1c8>
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <_svfiprintf_r+0x1e8>)
 8005b50:	bb13      	cbnz	r3, 8005b98 <_svfiprintf_r+0x1a0>
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	3307      	adds	r3, #7
 8005b56:	f023 0307 	bic.w	r3, r3, #7
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	9303      	str	r3, [sp, #12]
 8005b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b60:	444b      	add	r3, r9
 8005b62:	9309      	str	r3, [sp, #36]	; 0x24
 8005b64:	e76d      	b.n	8005a42 <_svfiprintf_r+0x4a>
 8005b66:	fb05 3202 	mla	r2, r5, r2, r3
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	460f      	mov	r7, r1
 8005b6e:	e7a6      	b.n	8005abe <_svfiprintf_r+0xc6>
 8005b70:	2300      	movs	r3, #0
 8005b72:	3701      	adds	r7, #1
 8005b74:	9305      	str	r3, [sp, #20]
 8005b76:	4619      	mov	r1, r3
 8005b78:	250a      	movs	r5, #10
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b80:	3a30      	subs	r2, #48	; 0x30
 8005b82:	2a09      	cmp	r2, #9
 8005b84:	d903      	bls.n	8005b8e <_svfiprintf_r+0x196>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0c8      	beq.n	8005b1c <_svfiprintf_r+0x124>
 8005b8a:	9105      	str	r1, [sp, #20]
 8005b8c:	e7c6      	b.n	8005b1c <_svfiprintf_r+0x124>
 8005b8e:	fb05 2101 	mla	r1, r5, r1, r2
 8005b92:	2301      	movs	r3, #1
 8005b94:	4607      	mov	r7, r0
 8005b96:	e7f0      	b.n	8005b7a <_svfiprintf_r+0x182>
 8005b98:	ab03      	add	r3, sp, #12
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <_svfiprintf_r+0x1ec>)
 8005ba0:	a904      	add	r1, sp, #16
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7fe f8f0 	bl	8003d88 <_printf_float>
 8005ba8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bac:	4681      	mov	r9, r0
 8005bae:	d1d6      	bne.n	8005b5e <_svfiprintf_r+0x166>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	065b      	lsls	r3, r3, #25
 8005bb4:	f53f af35 	bmi.w	8005a22 <_svfiprintf_r+0x2a>
 8005bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bba:	b01d      	add	sp, #116	; 0x74
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	ab03      	add	r3, sp, #12
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <_svfiprintf_r+0x1ec>)
 8005bc8:	a904      	add	r1, sp, #16
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7fe fb92 	bl	80042f4 <_printf_i>
 8005bd0:	e7ea      	b.n	8005ba8 <_svfiprintf_r+0x1b0>
 8005bd2:	bf00      	nop
 8005bd4:	08005eb4 	.word	0x08005eb4
 8005bd8:	08005eba 	.word	0x08005eba
 8005bdc:	08005ebe 	.word	0x08005ebe
 8005be0:	08003d89 	.word	0x08003d89
 8005be4:	08005945 	.word	0x08005945

08005be8 <_sbrk_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4c06      	ldr	r4, [pc, #24]	; (8005c04 <_sbrk_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4605      	mov	r5, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	f000 f870 	bl	8005cd8 <_sbrk>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_sbrk_r+0x1a>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_sbrk_r+0x1a>
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	200002d4 	.word	0x200002d4

08005c08 <__ascii_mbtowc>:
 8005c08:	b082      	sub	sp, #8
 8005c0a:	b901      	cbnz	r1, 8005c0e <__ascii_mbtowc+0x6>
 8005c0c:	a901      	add	r1, sp, #4
 8005c0e:	b142      	cbz	r2, 8005c22 <__ascii_mbtowc+0x1a>
 8005c10:	b14b      	cbz	r3, 8005c26 <__ascii_mbtowc+0x1e>
 8005c12:	7813      	ldrb	r3, [r2, #0]
 8005c14:	600b      	str	r3, [r1, #0]
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	1c10      	adds	r0, r2, #0
 8005c1a:	bf18      	it	ne
 8005c1c:	2001      	movne	r0, #1
 8005c1e:	b002      	add	sp, #8
 8005c20:	4770      	bx	lr
 8005c22:	4610      	mov	r0, r2
 8005c24:	e7fb      	b.n	8005c1e <__ascii_mbtowc+0x16>
 8005c26:	f06f 0001 	mvn.w	r0, #1
 8005c2a:	e7f8      	b.n	8005c1e <__ascii_mbtowc+0x16>

08005c2c <memmove>:
 8005c2c:	4288      	cmp	r0, r1
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	eb01 0302 	add.w	r3, r1, r2
 8005c34:	d807      	bhi.n	8005c46 <memmove+0x1a>
 8005c36:	1e42      	subs	r2, r0, #1
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d00a      	beq.n	8005c52 <memmove+0x26>
 8005c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c44:	e7f8      	b.n	8005c38 <memmove+0xc>
 8005c46:	4283      	cmp	r3, r0
 8005c48:	d9f5      	bls.n	8005c36 <memmove+0xa>
 8005c4a:	1881      	adds	r1, r0, r2
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	42d3      	cmn	r3, r2
 8005c50:	d100      	bne.n	8005c54 <memmove+0x28>
 8005c52:	bd10      	pop	{r4, pc}
 8005c54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c5c:	e7f7      	b.n	8005c4e <memmove+0x22>

08005c5e <__malloc_lock>:
 8005c5e:	4770      	bx	lr

08005c60 <__malloc_unlock>:
 8005c60:	4770      	bx	lr

08005c62 <_realloc_r>:
 8005c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c64:	4607      	mov	r7, r0
 8005c66:	4614      	mov	r4, r2
 8005c68:	460e      	mov	r6, r1
 8005c6a:	b921      	cbnz	r1, 8005c76 <_realloc_r+0x14>
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c72:	f7ff be0d 	b.w	8005890 <_malloc_r>
 8005c76:	b922      	cbnz	r2, 8005c82 <_realloc_r+0x20>
 8005c78:	f7ff fdbc 	bl	80057f4 <_free_r>
 8005c7c:	4625      	mov	r5, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c82:	f000 f821 	bl	8005cc8 <_malloc_usable_size_r>
 8005c86:	42a0      	cmp	r0, r4
 8005c88:	d20f      	bcs.n	8005caa <_realloc_r+0x48>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f7ff fdff 	bl	8005890 <_malloc_r>
 8005c92:	4605      	mov	r5, r0
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d0f2      	beq.n	8005c7e <_realloc_r+0x1c>
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	f7ff fab6 	bl	800520c <memcpy>
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f7ff fda6 	bl	80057f4 <_free_r>
 8005ca8:	e7e9      	b.n	8005c7e <_realloc_r+0x1c>
 8005caa:	4635      	mov	r5, r6
 8005cac:	e7e7      	b.n	8005c7e <_realloc_r+0x1c>

08005cae <__ascii_wctomb>:
 8005cae:	b149      	cbz	r1, 8005cc4 <__ascii_wctomb+0x16>
 8005cb0:	2aff      	cmp	r2, #255	; 0xff
 8005cb2:	bf85      	ittet	hi
 8005cb4:	238a      	movhi	r3, #138	; 0x8a
 8005cb6:	6003      	strhi	r3, [r0, #0]
 8005cb8:	700a      	strbls	r2, [r1, #0]
 8005cba:	f04f 30ff 	movhi.w	r0, #4294967295
 8005cbe:	bf98      	it	ls
 8005cc0:	2001      	movls	r0, #1
 8005cc2:	4770      	bx	lr
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4770      	bx	lr

08005cc8 <_malloc_usable_size_r>:
 8005cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ccc:	1f18      	subs	r0, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bfbc      	itt	lt
 8005cd2:	580b      	ldrlt	r3, [r1, r0]
 8005cd4:	18c0      	addlt	r0, r0, r3
 8005cd6:	4770      	bx	lr

08005cd8 <_sbrk>:
 8005cd8:	4b04      	ldr	r3, [pc, #16]	; (8005cec <_sbrk+0x14>)
 8005cda:	6819      	ldr	r1, [r3, #0]
 8005cdc:	4602      	mov	r2, r0
 8005cde:	b909      	cbnz	r1, 8005ce4 <_sbrk+0xc>
 8005ce0:	4903      	ldr	r1, [pc, #12]	; (8005cf0 <_sbrk+0x18>)
 8005ce2:	6019      	str	r1, [r3, #0]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	4402      	add	r2, r0
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	4770      	bx	lr
 8005cec:	2000020c 	.word	0x2000020c
 8005cf0:	200002d8 	.word	0x200002d8

08005cf4 <_init>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr

08005d00 <_fini>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr
