
timer_OC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c7c  08002c7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c7c  08002c7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c7c  08002c7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08002c90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002c90  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c3a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013c8  00000000  00000000  00029c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cd46  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fa4  00000000  00000000  00048ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aecb5  00000000  00000000  0004fe62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000feb17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024fc  00000000  00000000  000feb94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c34 	.word	0x08002c34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002c34 	.word	0x08002c34

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x28>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f92b 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f002 fc38 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f943 	bl	80004aa <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f90b 	bl	8000456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_IncTick+0x20>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_IncTick+0x24>)
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	20000028 	.word	0x20000028

08000288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return uwTick;  
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_GetTick+0x14>)
 800028e:	681b      	ldr	r3, [r3, #0]
}
 8000290:	4618      	mov	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028

080002a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f003 0307 	and.w	r3, r3, #7
 80002ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <__NVIC_SetPriorityGrouping+0x44>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002bc:	4013      	ands	r3, r2
 80002be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <__NVIC_SetPriorityGrouping+0x44>)
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	60d3      	str	r3, [r2, #12]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <__NVIC_GetPriorityGrouping+0x18>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	0a1b      	lsrs	r3, r3, #8
 80002f2:	f003 0307 	and.w	r3, r3, #7
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	db0b      	blt.n	800032e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f003 021f 	and.w	r2, r3, #31
 800031c:	4907      	ldr	r1, [pc, #28]	; (800033c <__NVIC_EnableIRQ+0x38>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	095b      	lsrs	r3, r3, #5
 8000324:	2001      	movs	r0, #1
 8000326:	fa00 f202 	lsl.w	r2, r0, r2
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100

08000340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	6039      	str	r1, [r7, #0]
 800034a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db0a      	blt.n	800036a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	490c      	ldr	r1, [pc, #48]	; (800038c <__NVIC_SetPriority+0x4c>)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000368:	e00a      	b.n	8000380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4908      	ldr	r1, [pc, #32]	; (8000390 <__NVIC_SetPriority+0x50>)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	f003 030f 	and.w	r3, r3, #15
 8000376:	3b04      	subs	r3, #4
 8000378:	0112      	lsls	r2, r2, #4
 800037a:	b2d2      	uxtb	r2, r2
 800037c:	440b      	add	r3, r1
 800037e:	761a      	strb	r2, [r3, #24]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000e100 	.word	0xe000e100
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000394:	b480      	push	{r7}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f1c3 0307 	rsb	r3, r3, #7
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	bf28      	it	cs
 80003b2:	2304      	movcs	r3, #4
 80003b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	3304      	adds	r3, #4
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d902      	bls.n	80003c4 <NVIC_EncodePriority+0x30>
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3b03      	subs	r3, #3
 80003c2:	e000      	b.n	80003c6 <NVIC_EncodePriority+0x32>
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	69bb      	ldr	r3, [r7, #24]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	43da      	mvns	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	401a      	ands	r2, r3
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003dc:	f04f 31ff 	mov.w	r1, #4294967295
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43d9      	mvns	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	4313      	orrs	r3, r2
         );
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295
 8000420:	f7ff ff8e 	bl	8000340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	.word	0xe000e010

08000440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff29 	bl	80002a0 <__NVIC_SetPriorityGrouping>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	4603      	mov	r3, r0
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000468:	f7ff ff3e 	bl	80002e8 <__NVIC_GetPriorityGrouping>
 800046c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68b9      	ldr	r1, [r7, #8]
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f7ff ff8e 	bl	8000394 <NVIC_EncodePriority>
 8000478:	4602      	mov	r2, r0
 800047a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff5d 	bl	8000340 <__NVIC_SetPriority>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff31 	bl	8000304 <__NVIC_EnableIRQ>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff ffa2 	bl	80003fc <SysTick_Config>
 80004b8:	4603      	mov	r3, r0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	d106      	bne.n	80004e0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80004de:	e005      	b.n	80004ec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004e6:	f023 0304 	bic.w	r3, r3, #4
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e010 	.word	0xe000e010

080004fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000500:	f000 f802 	bl	8000508 <HAL_SYSTICK_Callback>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000526:	e160      	b.n	80007ea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2b00      	cmp	r3, #0
 800053c:	f000 8152 	beq.w	80007e4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d003      	beq.n	8000550 <HAL_GPIO_Init+0x38>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b12      	cmp	r3, #18
 800054e:	d123      	bne.n	8000598 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	08da      	lsrs	r2, r3, #3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3208      	adds	r2, #8
 8000558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	f003 0307 	and.w	r3, r3, #7
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	220f      	movs	r2, #15
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	4013      	ands	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	691a      	ldr	r2, [r3, #16]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	4313      	orrs	r3, r2
 8000588:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	08da      	lsrs	r2, r3, #3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3208      	adds	r2, #8
 8000592:	6939      	ldr	r1, [r7, #16]
 8000594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2203      	movs	r2, #3
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f003 0203 	and.w	r2, r3, #3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <HAL_GPIO_Init+0xd4>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d007      	beq.n	80005ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e0:	2b11      	cmp	r3, #17
 80005e2:	d003      	beq.n	80005ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b12      	cmp	r3, #18
 80005ea:	d130      	bne.n	800064e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	2203      	movs	r2, #3
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000622:	2201      	movs	r2, #1
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	4013      	ands	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	091b      	lsrs	r3, r3, #4
 8000638:	f003 0201 	and.w	r2, r3, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4313      	orrs	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2203      	movs	r2, #3
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	4013      	ands	r3, r2
 8000664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4313      	orrs	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 80ac 	beq.w	80007e4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <HAL_GPIO_Init+0x2f0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a5d      	ldr	r2, [pc, #372]	; (8000808 <HAL_GPIO_Init+0x2f0>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <HAL_GPIO_Init+0x2f0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80006a4:	4a59      	ldr	r2, [pc, #356]	; (800080c <HAL_GPIO_Init+0x2f4>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	3302      	adds	r3, #2
 80006ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	f003 0303 	and.w	r3, r3, #3
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	220f      	movs	r2, #15
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006ce:	d025      	beq.n	800071c <HAL_GPIO_Init+0x204>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a4f      	ldr	r2, [pc, #316]	; (8000810 <HAL_GPIO_Init+0x2f8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d01f      	beq.n	8000718 <HAL_GPIO_Init+0x200>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a4e      	ldr	r2, [pc, #312]	; (8000814 <HAL_GPIO_Init+0x2fc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d019      	beq.n	8000714 <HAL_GPIO_Init+0x1fc>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a4d      	ldr	r2, [pc, #308]	; (8000818 <HAL_GPIO_Init+0x300>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d013      	beq.n	8000710 <HAL_GPIO_Init+0x1f8>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a4c      	ldr	r2, [pc, #304]	; (800081c <HAL_GPIO_Init+0x304>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d00d      	beq.n	800070c <HAL_GPIO_Init+0x1f4>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <HAL_GPIO_Init+0x308>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d007      	beq.n	8000708 <HAL_GPIO_Init+0x1f0>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a4a      	ldr	r2, [pc, #296]	; (8000824 <HAL_GPIO_Init+0x30c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d101      	bne.n	8000704 <HAL_GPIO_Init+0x1ec>
 8000700:	2306      	movs	r3, #6
 8000702:	e00c      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000704:	2307      	movs	r3, #7
 8000706:	e00a      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000708:	2305      	movs	r3, #5
 800070a:	e008      	b.n	800071e <HAL_GPIO_Init+0x206>
 800070c:	2304      	movs	r3, #4
 800070e:	e006      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000710:	2303      	movs	r3, #3
 8000712:	e004      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000714:	2302      	movs	r3, #2
 8000716:	e002      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <HAL_GPIO_Init+0x206>
 800071c:	2300      	movs	r3, #0
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	f002 0203 	and.w	r2, r2, #3
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	4093      	lsls	r3, r2
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800072e:	4937      	ldr	r1, [pc, #220]	; (800080c <HAL_GPIO_Init+0x2f4>)
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	3302      	adds	r3, #2
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <HAL_GPIO_Init+0x310>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	43db      	mvns	r3, r3
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4313      	orrs	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000760:	4a31      	ldr	r2, [pc, #196]	; (8000828 <HAL_GPIO_Init+0x310>)
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <HAL_GPIO_Init+0x310>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	43db      	mvns	r3, r3
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4313      	orrs	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <HAL_GPIO_Init+0x310>)
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_GPIO_Init+0x310>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	43db      	mvns	r3, r3
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007b4:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <HAL_GPIO_Init+0x310>)
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_GPIO_Init+0x310>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	43db      	mvns	r3, r3
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	4013      	ands	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4313      	orrs	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_GPIO_Init+0x310>)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f47f ae97 	bne.w	8000528 <HAL_GPIO_Init+0x10>
  }
}
 80007fa:	bf00      	nop
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000
 8000810:	48000400 	.word	0x48000400
 8000814:	48000800 	.word	0x48000800
 8000818:	48000c00 	.word	0x48000c00
 800081c:	48001000 	.word	0x48001000
 8000820:	48001400 	.word	0x48001400
 8000824:	48001800 	.word	0x48001800
 8000828:	40010400 	.word	0x40010400

0800082c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000832:	af00      	add	r7, sp, #0
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	f000 bf01 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	f000 8160 	beq.w	8000b16 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000856:	4bae      	ldr	r3, [pc, #696]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 030c 	and.w	r3, r3, #12
 800085e:	2b04      	cmp	r3, #4
 8000860:	d00c      	beq.n	800087c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000862:	4bab      	ldr	r3, [pc, #684]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 030c 	and.w	r3, r3, #12
 800086a:	2b08      	cmp	r3, #8
 800086c:	d159      	bne.n	8000922 <HAL_RCC_OscConfig+0xf6>
 800086e:	4ba8      	ldr	r3, [pc, #672]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800087a:	d152      	bne.n	8000922 <HAL_RCC_OscConfig+0xf6>
 800087c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000880:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000884:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000888:	fa93 f3a3 	rbit	r3, r3
 800088c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000890:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000894:	fab3 f383 	clz	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d102      	bne.n	80008ae <HAL_RCC_OscConfig+0x82>
 80008a8:	4b99      	ldr	r3, [pc, #612]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	e015      	b.n	80008da <HAL_RCC_OscConfig+0xae>
 80008ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80008ba:	fa93 f3a3 	rbit	r3, r3
 80008be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80008c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80008ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80008ce:	fa93 f3a3 	rbit	r3, r3
 80008d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80008d6:	4b8e      	ldr	r3, [pc, #568]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008de:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80008e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80008e6:	fa92 f2a2 	rbit	r2, r2
 80008ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80008ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	f042 0220 	orr.w	r2, r2, #32
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	f002 021f 	and.w	r2, r2, #31
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	4013      	ands	r3, r2
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 8102 	beq.w	8000b14 <HAL_RCC_OscConfig+0x2e8>
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 80fc 	bne.w	8000b14 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	f000 be93 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800092c:	d106      	bne.n	800093c <HAL_RCC_OscConfig+0x110>
 800092e:	4b78      	ldr	r3, [pc, #480]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a77      	ldr	r2, [pc, #476]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	e030      	b.n	800099e <HAL_RCC_OscConfig+0x172>
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10c      	bne.n	8000960 <HAL_RCC_OscConfig+0x134>
 8000946:	4b72      	ldr	r3, [pc, #456]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a71      	ldr	r2, [pc, #452]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 800094c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	4b6f      	ldr	r3, [pc, #444]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a6e      	ldr	r2, [pc, #440]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e01e      	b.n	800099e <HAL_RCC_OscConfig+0x172>
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096a:	d10c      	bne.n	8000986 <HAL_RCC_OscConfig+0x15a>
 800096c:	4b68      	ldr	r3, [pc, #416]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a67      	ldr	r2, [pc, #412]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b65      	ldr	r3, [pc, #404]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a64      	ldr	r2, [pc, #400]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 800097e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	e00b      	b.n	800099e <HAL_RCC_OscConfig+0x172>
 8000986:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a61      	ldr	r2, [pc, #388]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 800098c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a5e      	ldr	r2, [pc, #376]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d059      	beq.n	8000a5c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a8:	f7ff fc6e 	bl	8000288 <HAL_GetTick>
 80009ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b0:	e00a      	b.n	80009c8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b2:	f7ff fc69 	bl	8000288 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	2b64      	cmp	r3, #100	; 0x64
 80009c0:	d902      	bls.n	80009c8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f000 be40 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>
 80009c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009cc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80009d4:	fa93 f3a3 	rbit	r3, r3
 80009d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80009dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e0:	fab3 f383 	clz	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d102      	bne.n	80009fa <HAL_RCC_OscConfig+0x1ce>
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	e015      	b.n	8000a26 <HAL_RCC_OscConfig+0x1fa>
 80009fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a06:	fa93 f3a3 	rbit	r3, r3
 8000a0a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a1a:	fa93 f3a3 	rbit	r3, r3
 8000a1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a2a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a32:	fa92 f2a2 	rbit	r2, r2
 8000a36:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000a3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a3e:	fab2 f282 	clz	r2, r2
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	f042 0220 	orr.w	r2, r2, #32
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	f002 021f 	and.w	r2, r2, #31
 8000a4e:	2101      	movs	r1, #1
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0ab      	beq.n	80009b2 <HAL_RCC_OscConfig+0x186>
 8000a5a:	e05c      	b.n	8000b16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a5c:	f7ff fc14 	bl	8000288 <HAL_GetTick>
 8000a60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a64:	e00a      	b.n	8000a7c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a66:	f7ff fc0f 	bl	8000288 <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b64      	cmp	r3, #100	; 0x64
 8000a74:	d902      	bls.n	8000a7c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f000 bde6 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a88:	fa93 f3a3 	rbit	r3, r3
 8000a8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000a90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a94:	fab3 f383 	clz	r3, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d102      	bne.n	8000aae <HAL_RCC_OscConfig+0x282>
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	e015      	b.n	8000ada <HAL_RCC_OscConfig+0x2ae>
 8000aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000aca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_RCC_OscConfig+0x2e4>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ade:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000ae2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ae6:	fa92 f2a2 	rbit	r2, r2
 8000aea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000aee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	f042 0220 	orr.w	r2, r2, #32
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	f002 021f 	and.w	r2, r2, #31
 8000b02:	2101      	movs	r1, #1
 8000b04:	fa01 f202 	lsl.w	r2, r1, r2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1ab      	bne.n	8000a66 <HAL_RCC_OscConfig+0x23a>
 8000b0e:	e002      	b.n	8000b16 <HAL_RCC_OscConfig+0x2ea>
 8000b10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f000 8170 	beq.w	8000e06 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b26:	4bd0      	ldr	r3, [pc, #832]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00c      	beq.n	8000b4c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b32:	4bcd      	ldr	r3, [pc, #820]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d16d      	bne.n	8000c1a <HAL_RCC_OscConfig+0x3ee>
 8000b3e:	4bca      	ldr	r3, [pc, #808]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b4a:	d166      	bne.n	8000c1a <HAL_RCC_OscConfig+0x3ee>
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000b5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	095b      	lsrs	r3, r3, #5
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d102      	bne.n	8000b7c <HAL_RCC_OscConfig+0x350>
 8000b76:	4bbc      	ldr	r3, [pc, #752]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	e013      	b.n	8000ba4 <HAL_RCC_OscConfig+0x378>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b86:	fa93 f3a3 	rbit	r3, r3
 8000b8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ba0:	4bb1      	ldr	r3, [pc, #708]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000baa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000bae:	fa92 f2a2 	rbit	r2, r2
 8000bb2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000bb6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	f042 0220 	orr.w	r2, r2, #32
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	f002 021f 	and.w	r2, r2, #31
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_RCC_OscConfig+0x3ba>
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d002      	beq.n	8000be6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f000 bd31 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be6:	4ba0      	ldr	r3, [pc, #640]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	21f8      	movs	r1, #248	; 0xf8
 8000bf6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfa:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000bfe:	fa91 f1a1 	rbit	r1, r1
 8000c02:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000c06:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000c0a:	fab1 f181 	clz	r1, r1
 8000c0e:	b2c9      	uxtb	r1, r1
 8000c10:	408b      	lsls	r3, r1
 8000c12:	4995      	ldr	r1, [pc, #596]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000c14:	4313      	orrs	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c18:	e0f5      	b.n	8000e06 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 8085 	beq.w	8000d30 <HAL_RCC_OscConfig+0x504>
 8000c26:	2301      	movs	r3, #1
 8000c28:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c30:	fa93 f3a3 	rbit	r3, r3
 8000c34:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000c38:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c3c:	fab3 f383 	clz	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2301      	movs	r3, #1
 8000c50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c52:	f7ff fb19 	bl	8000288 <HAL_GetTick>
 8000c56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	e00a      	b.n	8000c72 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fb14 	bl	8000288 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d902      	bls.n	8000c72 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f000 bceb 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c78:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000c84:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c88:	fab3 f383 	clz	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d102      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x476>
 8000c9c:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	e013      	b.n	8000cca <HAL_RCC_OscConfig+0x49e>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000cac:	fa93 f3a3 	rbit	r3, r3
 8000cb0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000cba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000cc6:	4b68      	ldr	r3, [pc, #416]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	2202      	movs	r2, #2
 8000ccc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000cd0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000cd4:	fa92 f2a2 	rbit	r2, r2
 8000cd8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000cdc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	f042 0220 	orr.w	r2, r2, #32
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	f002 021f 	and.w	r2, r2, #31
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0af      	beq.n	8000c5c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	21f8      	movs	r1, #248	; 0xf8
 8000d0c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000d14:	fa91 f1a1 	rbit	r1, r1
 8000d18:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000d1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000d20:	fab1 f181 	clz	r1, r1
 8000d24:	b2c9      	uxtb	r1, r1
 8000d26:	408b      	lsls	r3, r1
 8000d28:	494f      	ldr	r1, [pc, #316]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	600b      	str	r3, [r1, #0]
 8000d2e:	e06a      	b.n	8000e06 <HAL_RCC_OscConfig+0x5da>
 8000d30:	2301      	movs	r3, #1
 8000d32:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000d42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	461a      	mov	r2, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fa94 	bl	8000288 <HAL_GetTick>
 8000d60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d64:	e00a      	b.n	8000d7c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d66:	f7ff fa8f 	bl	8000288 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d902      	bls.n	8000d7c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	f000 bc66 	b.w	8001648 <HAL_RCC_OscConfig+0xe1c>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d102      	bne.n	8000dac <HAL_RCC_OscConfig+0x580>
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	e013      	b.n	8000dd4 <HAL_RCC_OscConfig+0x5a8>
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000dc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_RCC_OscConfig+0x63c>)
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000dda:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000dde:	fa92 f2a2 	rbit	r2, r2
 8000de2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000de6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	f042 0220 	orr.w	r2, r2, #32
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	f002 021f 	and.w	r2, r2, #31
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1af      	bne.n	8000d66 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80da 	beq.w	8000fca <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d069      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x6c8>
 8000e20:	2301      	movs	r3, #1
 8000e22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000e32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_RCC_OscConfig+0x640>)
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	461a      	mov	r2, r3
 8000e46:	2301      	movs	r3, #1
 8000e48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fa1d 	bl	8000288 <HAL_GetTick>
 8000e4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e52:	e00d      	b.n	8000e70 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e54:	f7ff fa18 	bl	8000288 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d905      	bls.n	8000e70 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e3ef      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	10908120 	.word	0x10908120
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e7a:	fa93 f2a3 	rbit	r2, r3
 8000e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e88:	2202      	movs	r2, #2
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	fa93 f2a3 	rbit	r2, r3
 8000e96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	fa93 f2a3 	rbit	r2, r3
 8000eae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000eb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb4:	4ba4      	ldr	r3, [pc, #656]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8000eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	6019      	str	r1, [r3, #0]
 8000ec0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	fa93 f1a3 	rbit	r1, r3
 8000eca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ece:	6019      	str	r1, [r3, #0]
  return result;
 8000ed0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	fab3 f383 	clz	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0b0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x628>
 8000ef2:	e06a      	b.n	8000fca <HAL_RCC_OscConfig+0x79e>
 8000ef4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	fa93 f2a3 	rbit	r2, r3
 8000f06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f0a:	601a      	str	r2, [r3, #0]
  return result;
 8000f0c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b8c      	ldr	r3, [pc, #560]	; (800114c <HAL_RCC_OscConfig+0x920>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	461a      	mov	r2, r3
 8000f22:	2300      	movs	r3, #0
 8000f24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff f9af 	bl	8000288 <HAL_GetTick>
 8000f2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2e:	e009      	b.n	8000f44 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f30:	f7ff f9aa 	bl	8000288 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e381      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 8000f44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f48:	2202      	movs	r2, #2
 8000f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	fa93 f2a3 	rbit	r2, r3
 8000f56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f60:	2202      	movs	r2, #2
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	fa93 f2a3 	rbit	r2, r3
 8000f6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f78:	2202      	movs	r2, #2
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	fa93 f2a3 	rbit	r2, r3
 8000f86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8000f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f94:	2102      	movs	r1, #2
 8000f96:	6019      	str	r1, [r3, #0]
 8000f98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	fa93 f1a3 	rbit	r1, r3
 8000fa2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fa6:	6019      	str	r1, [r3, #0]
  return result;
 8000fa8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1b2      	bne.n	8000f30 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 8157 	beq.w	8001288 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe0:	4b59      	ldr	r3, [pc, #356]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d112      	bne.n	8001012 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	4b56      	ldr	r3, [pc, #344]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	4a55      	ldr	r2, [pc, #340]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	61d3      	str	r3, [r2, #28]
 8000ff8:	4b53      	ldr	r3, [pc, #332]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800100c:	2301      	movs	r3, #1
 800100e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <HAL_RCC_OscConfig+0x924>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d11a      	bne.n	8001054 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <HAL_RCC_OscConfig+0x924>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_RCC_OscConfig+0x924>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff f92d 	bl	8000288 <HAL_GetTick>
 800102e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	e009      	b.n	8001048 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001034:	f7ff f928 	bl	8000288 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e2ff      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <HAL_RCC_OscConfig+0x924>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ef      	beq.n	8001034 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x840>
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a39      	ldr	r2, [pc, #228]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	e02f      	b.n	80010cc <HAL_RCC_OscConfig+0x8a0>
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x864>
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	e01d      	b.n	80010cc <HAL_RCC_OscConfig+0x8a0>
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x888>
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	e00b      	b.n	80010cc <HAL_RCC_OscConfig+0x8a0>
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4a23      	ldr	r2, [pc, #140]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6213      	str	r3, [r2, #32]
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a20      	ldr	r2, [pc, #128]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 80010c6:	f023 0304 	bic.w	r3, r3, #4
 80010ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d06a      	beq.n	80011ac <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff f8d7 	bl	8000288 <HAL_GetTick>
 80010da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f7ff f8d2 	bl	8000288 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e2a7      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 80010f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010fc:	2202      	movs	r2, #2
 80010fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	fa93 f2a3 	rbit	r2, r3
 800110a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001114:	2202      	movs	r2, #2
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	fa93 f2a3 	rbit	r2, r3
 8001122:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001126:	601a      	str	r2, [r3, #0]
  return result;
 8001128:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800112c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d108      	bne.n	8001154 <HAL_RCC_OscConfig+0x928>
 8001142:	4b01      	ldr	r3, [pc, #4]	; (8001148 <HAL_RCC_OscConfig+0x91c>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	e013      	b.n	8001170 <HAL_RCC_OscConfig+0x944>
 8001148:	40021000 	.word	0x40021000
 800114c:	10908120 	.word	0x10908120
 8001150:	40007000 	.word	0x40007000
 8001154:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	fa93 f2a3 	rbit	r2, r3
 8001166:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	4bc0      	ldr	r3, [pc, #768]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001174:	2102      	movs	r1, #2
 8001176:	6011      	str	r1, [r2, #0]
 8001178:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	fa92 f1a2 	rbit	r1, r2
 8001182:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001186:	6011      	str	r1, [r2, #0]
  return result;
 8001188:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d09a      	beq.n	80010e0 <HAL_RCC_OscConfig+0x8b4>
 80011aa:	e063      	b.n	8001274 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff f86c 	bl	8000288 <HAL_GetTick>
 80011b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	e00b      	b.n	80011ce <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff f867 	bl	8000288 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e23c      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 80011ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d2:	2202      	movs	r2, #2
 80011d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	fa93 f2a3 	rbit	r2, r3
 80011e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ea:	2202      	movs	r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fa93 f2a3 	rbit	r2, r3
 80011f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011fc:	601a      	str	r2, [r3, #0]
  return result;
 80011fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001202:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x9f2>
 8001218:	4b95      	ldr	r3, [pc, #596]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	e00d      	b.n	800123a <HAL_RCC_OscConfig+0xa0e>
 800121e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001222:	2202      	movs	r2, #2
 8001224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	fa93 f2a3 	rbit	r2, r3
 8001230:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	4b8e      	ldr	r3, [pc, #568]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800123e:	2102      	movs	r1, #2
 8001240:	6011      	str	r1, [r2, #0]
 8001242:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	fa92 f1a2 	rbit	r1, r2
 800124c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001250:	6011      	str	r1, [r2, #0]
  return result;
 8001252:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f002 021f 	and.w	r2, r2, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1a0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001274:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127c:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a7b      	ldr	r2, [pc, #492]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 8001282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001286:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 81d9 	beq.w	8001646 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001294:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	f000 81a6 	beq.w	80015ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	f040 811e 	bne.w	80014ea <HAL_RCC_OscConfig+0xcbe>
 80012ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fa93 f2a3 	rbit	r2, r3
 80012c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012c6:	601a      	str	r2, [r3, #0]
  return result;
 80012c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	461a      	mov	r2, r3
 80012e0:	2300      	movs	r3, #0
 80012e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7fe ffd0 	bl	8000288 <HAL_GetTick>
 80012e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ec:	e009      	b.n	8001302 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ee:	f7fe ffcb 	bl	8000288 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1a2      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 8001302:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800131a:	601a      	str	r2, [r3, #0]
  return result;
 800131c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0xb10>
 8001336:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	e01b      	b.n	8001374 <HAL_RCC_OscConfig+0xb48>
 800133c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	fa93 f2a3 	rbit	r2, r3
 8001350:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800135a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	fa93 f2a3 	rbit	r2, r3
 800136a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800137c:	6011      	str	r1, [r2, #0]
 800137e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	fa92 f1a2 	rbit	r1, r2
 8001388:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800138c:	6011      	str	r1, [r2, #0]
  return result;
 800138e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	fab2 f282 	clz	r2, r2
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f002 021f 	and.w	r2, r2, #31
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d19e      	bne.n	80012ee <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	f023 020f 	bic.w	r2, r3, #15
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	492c      	ldr	r1, [pc, #176]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a19      	ldr	r1, [r3, #32]
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	430b      	orrs	r3, r1
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f8:	601a      	str	r2, [r3, #0]
  return result;
 80013fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800140a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	461a      	mov	r2, r3
 8001412:	2301      	movs	r3, #1
 8001414:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7fe ff37 	bl	8000288 <HAL_GetTick>
 800141a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800141e:	e009      	b.n	8001434 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7fe ff32 	bl	8000288 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e109      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 8001434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800144c:	601a      	str	r2, [r3, #0]
  return result;
 800144e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001452:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_RCC_OscConfig+0xc48>
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <HAL_RCC_OscConfig+0xc44>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	e01e      	b.n	80014ac <HAL_RCC_OscConfig+0xc80>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800147c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0xe28>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014b4:	6011      	str	r1, [r2, #0]
 80014b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	fa92 f1a2 	rbit	r1, r2
 80014c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014c4:	6011      	str	r1, [r2, #0]
  return result;
 80014c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	fab2 f282 	clz	r2, r2
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f042 0220 	orr.w	r2, r2, #32
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	f002 021f 	and.w	r2, r2, #31
 80014dc:	2101      	movs	r1, #1
 80014de:	fa01 f202 	lsl.w	r2, r1, r2
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d09b      	beq.n	8001420 <HAL_RCC_OscConfig+0xbf4>
 80014e8:	e0ad      	b.n	8001646 <HAL_RCC_OscConfig+0xe1a>
 80014ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fa93 f2a3 	rbit	r2, r3
 80014fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001502:	601a      	str	r2, [r3, #0]
  return result;
 8001504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001508:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001514:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	461a      	mov	r2, r3
 800151c:	2300      	movs	r3, #0
 800151e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7fe feb2 	bl	8000288 <HAL_GetTick>
 8001524:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001528:	e009      	b.n	800153e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7fe fead 	bl	8000288 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e084      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	601a      	str	r2, [r3, #0]
  return result;
 8001558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <HAL_RCC_OscConfig+0xd4c>
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_RCC_OscConfig+0xe28>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0xd84>
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <HAL_RCC_OscConfig+0xe28>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	f107 0214 	add.w	r2, r7, #20
 80015b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015b8:	6011      	str	r1, [r2, #0]
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	fa92 f1a2 	rbit	r1, r2
 80015c4:	f107 0210 	add.w	r2, r7, #16
 80015c8:	6011      	str	r1, [r2, #0]
  return result;
 80015ca:	f107 0210 	add.w	r2, r7, #16
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	fab2 f282 	clz	r2, r2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f042 0220 	orr.w	r2, r2, #32
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f002 021f 	and.w	r2, r2, #31
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d19e      	bne.n	800152a <HAL_RCC_OscConfig+0xcfe>
 80015ec:	e02b      	b.n	8001646 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0xe28>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_RCC_OscConfig+0xe28>)
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800160c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001610:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	429a      	cmp	r2, r3
 800161c:	d111      	bne.n	8001642 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800161e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800162c:	429a      	cmp	r2, r3
 800162e:	d108      	bne.n	8001642 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001634:	f003 020f 	and.w	r2, r3, #15
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000

08001658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09e      	sub	sp, #120	; 0x78
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e162      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b90      	ldr	r3, [pc, #576]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d910      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b8d      	ldr	r3, [pc, #564]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	498b      	ldr	r1, [pc, #556]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b89      	ldr	r3, [pc, #548]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e14a      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b82      	ldr	r3, [pc, #520]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	497f      	ldr	r1, [pc, #508]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80dc 	beq.w	8001884 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d13c      	bne.n	800174e <HAL_RCC_ClockConfig+0xf6>
 80016d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80016e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_ClockConfig+0xa6>
 80016f8:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e00f      	b.n	800171e <HAL_RCC_ClockConfig+0xc6>
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
 800170c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001710:	663b      	str	r3, [r7, #96]	; 0x60
 8001712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001722:	65ba      	str	r2, [r7, #88]	; 0x58
 8001724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001726:	fa92 f2a2 	rbit	r2, r2
 800172a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800172c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f042 0220 	orr.w	r2, r2, #32
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f002 021f 	and.w	r2, r2, #31
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d17b      	bne.n	8001842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0f3      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d13c      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x178>
 8001756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175e:	fa93 f3a3 	rbit	r3, r3
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_RCC_ClockConfig+0x128>
 800177a:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_ClockConfig+0x148>
 8001780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001784:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
 800178e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
 8001794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800179c:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80017a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a8:	fa92 f2a2 	rbit	r2, r2
 80017ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80017ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017b0:	fab2 f282 	clz	r2, r2
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	f042 0220 	orr.w	r2, r2, #32
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13a      	bne.n	8001842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b2      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x1a0>
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_ClockConfig+0x1bc>
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2202      	movs	r2, #2
 8001816:	61ba      	str	r2, [r7, #24]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	617a      	str	r2, [r7, #20]
  return result;
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e079      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	491a      	ldr	r1, [pc, #104]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7fe fd18 	bl	8000288 <HAL_GetTick>
 8001858:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7fe fd14 	bl	8000288 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e061      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_ClockConfig+0x260>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d214      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 0207 	bic.w	r2, r3, #7
 800189a:	4906      	ldr	r1, [pc, #24]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_RCC_ClockConfig+0x25c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e040      	b.n	8001936 <HAL_RCC_ClockConfig+0x2de>
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_RCC_ClockConfig+0x2e8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	491a      	ldr	r1, [pc, #104]	; (8001940 <HAL_RCC_ClockConfig+0x2e8>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_RCC_ClockConfig+0x2e8>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4912      	ldr	r1, [pc, #72]	; (8001940 <HAL_RCC_ClockConfig+0x2e8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018fa:	f000 f829 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 80018fe:	4601      	mov	r1, r0
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_RCC_ClockConfig+0x2e8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001908:	22f0      	movs	r2, #240	; 0xf0
 800190a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	fa92 f2a2 	rbit	r2, r2
 8001912:	60fa      	str	r2, [r7, #12]
  return result;
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	40d3      	lsrs	r3, r2
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x2ec>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	fa21 f303 	lsr.w	r3, r1, r3
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_RCC_ClockConfig+0x2f0>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_RCC_ClockConfig+0x2f4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fc66 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3778      	adds	r7, #120	; 0x78
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	08002c6c 	.word	0x08002c6c
 8001948:	20000008 	.word	0x20000008
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b08b      	sub	sp, #44	; 0x2c
 8001954:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x30>
 800197a:	2b08      	cmp	r3, #8
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x36>
 800197e:	e03f      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001982:	623b      	str	r3, [r7, #32]
      break;
 8001984:	e03f      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800198c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001990:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	fa92 f2a2 	rbit	r2, r2
 8001998:	607a      	str	r2, [r7, #4]
  return result;
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	40d3      	lsrs	r3, r2
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xcc>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	220f      	movs	r2, #15
 80019b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	fa92 f2a2 	rbit	r2, r2
 80019bc:	60fa      	str	r2, [r7, #12]
  return result;
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	fab2 f282 	clz	r2, r2
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	40d3      	lsrs	r3, r2
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	e007      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	623b      	str	r3, [r7, #32]
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a02:	623b      	str	r3, [r7, #32]
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	6a3b      	ldr	r3, [r7, #32]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	372c      	adds	r7, #44	; 0x2c
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	007a1200 	.word	0x007a1200
 8001a1c:	08002c4c 	.word	0x08002c4c
 8001a20:	08002c5c 	.word	0x08002c5c

08001a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008

08001a3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e01d      	b.n	8001a8a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 f820 	bl	8002aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f000 faca 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fe58 	bl	800275c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <HAL_TIM_PWM_Start+0xa4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d018      	beq.n	8001ae8 <HAL_TIM_PWM_Start+0x54>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <HAL_TIM_PWM_Start+0xa8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_TIM_PWM_Start+0x54>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_TIM_PWM_Start+0xac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00e      	beq.n	8001ae8 <HAL_TIM_PWM_Start+0x54>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_TIM_PWM_Start+0xb0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_TIM_PWM_Start+0x54>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_TIM_PWM_Start+0xb4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d004      	beq.n	8001ae8 <HAL_TIM_PWM_Start+0x54>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_TIM_PWM_Start+0xb8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_TIM_PWM_Start+0x58>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_TIM_PWM_Start+0x5a>
 8001aec:	2300      	movs	r3, #0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_TIM_PWM_Start+0xbc>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d00b      	beq.n	8001b2c <HAL_TIM_PWM_Start+0x98>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40013400 	.word	0x40013400
 8001b40:	40014000 	.word	0x40014000
 8001b44:	40014400 	.word	0x40014400
 8001b48:	40014800 	.word	0x40014800
 8001b4c:	40015000 	.word	0x40015000
 8001b50:	00010007 	.word	0x00010007

08001b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d122      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d11b      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0202 	mvn.w	r2, #2
 8001b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fa1e 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 ff52 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fa21 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0204 	mvn.w	r2, #4
 8001bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f9f4 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 ff28 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f9f7 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0208 	mvn.w	r2, #8
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f9ca 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fefe 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f9cd 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0210 	mvn.w	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2208      	movs	r2, #8
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f9a0 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fed4 	bl	8002a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f9a3 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0201 	mvn.w	r2, #1
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f976 	bl	8001fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b80      	cmp	r3, #128	; 0x80
 8001ce4:	d10e      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf0:	2b80      	cmp	r3, #128	; 0x80
 8001cf2:	d107      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fd5b 	bl	80027ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	d10e      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b80      	cmp	r3, #128	; 0x80
 8001d20:	d107      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fd4e 	bl	80027ce <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	d10e      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d107      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f951 	bl	8002000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d10e      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d107      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0220 	mvn.w	r2, #32
 8001d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fd0e 	bl	80027a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e105      	b.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x226>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b14      	cmp	r3, #20
 8001dc2:	f200 80f0 	bhi.w	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8001dc6:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001fa7 	.word	0x08001fa7
 8001dd4:	08001fa7 	.word	0x08001fa7
 8001dd8:	08001fa7 	.word	0x08001fa7
 8001ddc:	08001e61 	.word	0x08001e61
 8001de0:	08001fa7 	.word	0x08001fa7
 8001de4:	08001fa7 	.word	0x08001fa7
 8001de8:	08001fa7 	.word	0x08001fa7
 8001dec:	08001ea3 	.word	0x08001ea3
 8001df0:	08001fa7 	.word	0x08001fa7
 8001df4:	08001fa7 	.word	0x08001fa7
 8001df8:	08001fa7 	.word	0x08001fa7
 8001dfc:	08001ee3 	.word	0x08001ee3
 8001e00:	08001fa7 	.word	0x08001fa7
 8001e04:	08001fa7 	.word	0x08001fa7
 8001e08:	08001fa7 	.word	0x08001fa7
 8001e0c:	08001f25 	.word	0x08001f25
 8001e10:	08001fa7 	.word	0x08001fa7
 8001e14:	08001fa7 	.word	0x08001fa7
 8001e18:	08001fa7 	.word	0x08001fa7
 8001e1c:	08001f65 	.word	0x08001f65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f992 	bl	8002150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0208 	orr.w	r2, r2, #8
 8001e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6999      	ldr	r1, [r3, #24]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	619a      	str	r2, [r3, #24]
      break;
 8001e5e:	e0a3      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fa0c 	bl	8002284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6999      	ldr	r1, [r3, #24]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	619a      	str	r2, [r3, #24]
      break;
 8001ea0:	e082      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa7f 	bl	80023ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0208 	orr.w	r2, r2, #8
 8001ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0204 	bic.w	r2, r2, #4
 8001ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69d9      	ldr	r1, [r3, #28]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
      break;
 8001ee0:	e062      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 faf1 	bl	80024d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69d9      	ldr	r1, [r3, #28]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	021a      	lsls	r2, r3, #8
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	61da      	str	r2, [r3, #28]
      break;
 8001f22:	e041      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fb40 	bl	80025b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f62:	e021      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fb8a 	bl	8002684 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	021a      	lsls	r2, r3, #8
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001fa4:	e000      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8001fa6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop

08001fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a42      	ldr	r2, [pc, #264]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d00f      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3f      	ldr	r2, [pc, #252]	; (8002134 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00b      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3e      	ldr	r2, [pc, #248]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3d      	ldr	r2, [pc, #244]	; (800213c <TIM_Base_SetConfig+0x128>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <TIM_Base_SetConfig+0x12c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a31      	ldr	r2, [pc, #196]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d01b      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	; (800214c <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0x9a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <TIM_Base_SetConfig+0x12c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <TIM_Base_SetConfig+0x100>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <TIM_Base_SetConfig+0x128>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00f      	beq.n	8002114 <TIM_Base_SetConfig+0x100>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <TIM_Base_SetConfig+0x130>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00b      	beq.n	8002114 <TIM_Base_SetConfig+0x100>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <TIM_Base_SetConfig+0x134>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <TIM_Base_SetConfig+0x100>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a11      	ldr	r2, [pc, #68]	; (800214c <TIM_Base_SetConfig+0x138>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_Base_SetConfig+0x100>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <TIM_Base_SetConfig+0x12c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40013400 	.word	0x40013400
 8002140:	40015000 	.word	0x40015000
 8002144:	40014000 	.word	0x40014000
 8002148:	40014400 	.word	0x40014400
 800214c:	40014800 	.word	0x40014800

08002150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f023 0201 	bic.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f023 0302 	bic.w	r3, r3, #2
 800219c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a30      	ldr	r2, [pc, #192]	; (800226c <TIM_OC1_SetConfig+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <TIM_OC1_SetConfig+0x88>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <TIM_OC1_SetConfig+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00f      	beq.n	80021d8 <TIM_OC1_SetConfig+0x88>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a2e      	ldr	r2, [pc, #184]	; (8002274 <TIM_OC1_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00b      	beq.n	80021d8 <TIM_OC1_SetConfig+0x88>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <TIM_OC1_SetConfig+0x128>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_OC1_SetConfig+0x88>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a2c      	ldr	r2, [pc, #176]	; (800227c <TIM_OC1_SetConfig+0x12c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_OC1_SetConfig+0x88>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <TIM_OC1_SetConfig+0x130>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d10c      	bne.n	80021f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0308 	bic.w	r3, r3, #8
 80021de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <TIM_OC1_SetConfig+0x11c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <TIM_OC1_SetConfig+0xd2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <TIM_OC1_SetConfig+0x120>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00f      	beq.n	8002222 <TIM_OC1_SetConfig+0xd2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <TIM_OC1_SetConfig+0x124>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00b      	beq.n	8002222 <TIM_OC1_SetConfig+0xd2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <TIM_OC1_SetConfig+0x128>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <TIM_OC1_SetConfig+0xd2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <TIM_OC1_SetConfig+0x12c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_OC1_SetConfig+0xd2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <TIM_OC1_SetConfig+0x130>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	621a      	str	r2, [r3, #32]
}
 8002260:	bf00      	nop
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40013400 	.word	0x40013400
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800
 8002280:	40015000 	.word	0x40015000

08002284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0210 	bic.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0320 	bic.w	r3, r3, #32
 80022d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <TIM_OC2_SetConfig+0x110>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <TIM_OC2_SetConfig+0x74>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2b      	ldr	r2, [pc, #172]	; (8002398 <TIM_OC2_SetConfig+0x114>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_OC2_SetConfig+0x74>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a2a      	ldr	r2, [pc, #168]	; (800239c <TIM_OC2_SetConfig+0x118>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10d      	bne.n	8002314 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <TIM_OC2_SetConfig+0x110>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <TIM_OC2_SetConfig+0xc0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <TIM_OC2_SetConfig+0x114>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00f      	beq.n	8002344 <TIM_OC2_SetConfig+0xc0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <TIM_OC2_SetConfig+0x11c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00b      	beq.n	8002344 <TIM_OC2_SetConfig+0xc0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <TIM_OC2_SetConfig+0x120>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d007      	beq.n	8002344 <TIM_OC2_SetConfig+0xc0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <TIM_OC2_SetConfig+0x124>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <TIM_OC2_SetConfig+0xc0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <TIM_OC2_SetConfig+0x118>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d113      	bne.n	800236c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800234a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002352:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40013400 	.word	0x40013400
 800239c:	40015000 	.word	0x40015000
 80023a0:	40014000 	.word	0x40014000
 80023a4:	40014400 	.word	0x40014400
 80023a8:	40014800 	.word	0x40014800

080023ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <TIM_OC3_SetConfig+0x10c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <TIM_OC3_SetConfig+0x72>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <TIM_OC3_SetConfig+0x110>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <TIM_OC3_SetConfig+0x72>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <TIM_OC3_SetConfig+0x114>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10d      	bne.n	800243a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002438:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <TIM_OC3_SetConfig+0x10c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <TIM_OC3_SetConfig+0xbe>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <TIM_OC3_SetConfig+0x110>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00f      	beq.n	800246a <TIM_OC3_SetConfig+0xbe>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <TIM_OC3_SetConfig+0x118>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00b      	beq.n	800246a <TIM_OC3_SetConfig+0xbe>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <TIM_OC3_SetConfig+0x11c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <TIM_OC3_SetConfig+0xbe>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <TIM_OC3_SetConfig+0x120>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d003      	beq.n	800246a <TIM_OC3_SetConfig+0xbe>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <TIM_OC3_SetConfig+0x114>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d113      	bne.n	8002492 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	621a      	str	r2, [r3, #32]
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40013400 	.word	0x40013400
 80024c0:	40015000 	.word	0x40015000
 80024c4:	40014000 	.word	0x40014000
 80024c8:	40014400 	.word	0x40014400
 80024cc:	40014800 	.word	0x40014800

080024d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800251e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	031b      	lsls	r3, r3, #12
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <TIM_OC4_SetConfig+0xc8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <TIM_OC4_SetConfig+0x8c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a19      	ldr	r2, [pc, #100]	; (800259c <TIM_OC4_SetConfig+0xcc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00f      	beq.n	800255c <TIM_OC4_SetConfig+0x8c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <TIM_OC4_SetConfig+0xd0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00b      	beq.n	800255c <TIM_OC4_SetConfig+0x8c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <TIM_OC4_SetConfig+0xd4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <TIM_OC4_SetConfig+0x8c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <TIM_OC4_SetConfig+0xd8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d003      	beq.n	800255c <TIM_OC4_SetConfig+0x8c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <TIM_OC4_SetConfig+0xdc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d109      	bne.n	8002570 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40013400 	.word	0x40013400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800
 80025ac:	40015000 	.word	0x40015000

080025b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <TIM_OC5_SetConfig+0xbc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <TIM_OC5_SetConfig+0x82>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <TIM_OC5_SetConfig+0xc0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00f      	beq.n	8002632 <TIM_OC5_SetConfig+0x82>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a17      	ldr	r2, [pc, #92]	; (8002674 <TIM_OC5_SetConfig+0xc4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_OC5_SetConfig+0x82>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <TIM_OC5_SetConfig+0xc8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_OC5_SetConfig+0x82>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <TIM_OC5_SetConfig+0xcc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_OC5_SetConfig+0x82>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a14      	ldr	r2, [pc, #80]	; (8002680 <TIM_OC5_SetConfig+0xd0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d109      	bne.n	8002646 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002638:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	621a      	str	r2, [r3, #32]
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40013400 	.word	0x40013400
 8002674:	40014000 	.word	0x40014000
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	40015000 	.word	0x40015000

08002684 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <TIM_OC6_SetConfig+0xc0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <TIM_OC6_SetConfig+0x84>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a19      	ldr	r2, [pc, #100]	; (8002748 <TIM_OC6_SetConfig+0xc4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00f      	beq.n	8002708 <TIM_OC6_SetConfig+0x84>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <TIM_OC6_SetConfig+0xc8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00b      	beq.n	8002708 <TIM_OC6_SetConfig+0x84>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <TIM_OC6_SetConfig+0xcc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_OC6_SetConfig+0x84>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <TIM_OC6_SetConfig+0xd0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_OC6_SetConfig+0x84>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <TIM_OC6_SetConfig+0xd4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d109      	bne.n	800271c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	621a      	str	r2, [r3, #32]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40013400 	.word	0x40013400
 800274c:	40014000 	.word	0x40014000
 8002750:	40014400 	.word	0x40014400
 8002754:	40014800 	.word	0x40014800
 8002758:	40015000 	.word	0x40015000

0800275c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2201      	movs	r2, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <SysTick_Handler>:
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
extern TIM_HandleTypeDef htimer2;
void SysTick_Handler(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80027e6:	f7fd fd3b 	bl	8000260 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80027ea:	f7fd fe87 	bl	80004fc <HAL_SYSTICK_IRQHandler>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TIM2_IRQHandler+0x10>)
 80027fa:	f7ff f9ab 	bl	8001b54 <HAL_TIM_IRQHandler>
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000030 	.word	0x20000030

08002808 <main>:
uint32_t pulse2_value = 12000; 	/*to produce 1000Hz*/
uint32_t pulse3_value = 6000; 	/*to produce 2000Hz*/
uint32_t pulse4_value = 3000; 	/*to produce 4000Hz*/
uint32_t ccr_content;
int main(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	HAL_Init();
 800280c:	f7fd fce2 	bl	80001d4 <HAL_Init>

	Sysclk_Config(SYS_CLOCK_FREQ_48_MHZ);
 8002810:	2030      	movs	r0, #48	; 0x30
 8002812:	f000 f829 	bl	8002868 <Sysclk_Config>
	//UART2_Init();
	TIMER2_Init();
 8002816:	f000 f891 	bl	800293c <TIMER2_Init>

	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_1)!=HAL_OK)
 800281a:	2100      	movs	r1, #0
 800281c:	4811      	ldr	r0, [pc, #68]	; (8002864 <main+0x5c>)
 800281e:	f7ff f939 	bl	8001a94 <HAL_TIM_PWM_Start>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <main+0x24>
	{
		Error_handler();
 8002828:	f000 f918 	bl	8002a5c <Error_handler>
	}
	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_2)!=HAL_OK)
 800282c:	2104      	movs	r1, #4
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <main+0x5c>)
 8002830:	f7ff f930 	bl	8001a94 <HAL_TIM_PWM_Start>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <main+0x36>
	{
		Error_handler();
 800283a:	f000 f90f 	bl	8002a5c <Error_handler>
	}
	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_3)!=HAL_OK)
 800283e:	2108      	movs	r1, #8
 8002840:	4808      	ldr	r0, [pc, #32]	; (8002864 <main+0x5c>)
 8002842:	f7ff f927 	bl	8001a94 <HAL_TIM_PWM_Start>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <main+0x48>
	{
		Error_handler();
 800284c:	f000 f906 	bl	8002a5c <Error_handler>
	}
	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_4)!=HAL_OK)
 8002850:	210c      	movs	r1, #12
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <main+0x5c>)
 8002854:	f7ff f91e 	bl	8001a94 <HAL_TIM_PWM_Start>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <main+0x5a>
	{
		Error_handler();
 800285e:	f000 f8fd 	bl	8002a5c <Error_handler>
	}

	while(1);
 8002862:	e7fe      	b.n	8002862 <main+0x5a>
 8002864:	20000030 	.word	0x20000030

08002868 <Sysclk_Config>:
	return 0;
}
void Sysclk_Config(uint8_t freq)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b092      	sub	sp, #72	; 0x48
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]

	uint8_t latency = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002878:	2301      	movs	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 800287c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002880:	623b      	str	r3, [r7, #32]
	//osc_init.HSICalibrationValue = 16;
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8002882:	2302      	movs	r3, #2
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(freq)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b30      	cmp	r3, #48	; 0x30
 8002890:	d00d      	beq.n	80028ae <Sysclk_Config+0x46>
 8002892:	2b48      	cmp	r3, #72	; 0x48
 8002894:	d014      	beq.n	80028c0 <Sysclk_Config+0x58>
 8002896:	2b18      	cmp	r3, #24
 8002898:	d000      	beq.n	800289c <Sysclk_Config+0x34>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
			latency = FLASH_LATENCY_2;
			break;
		}
		default:
			return ;
 800289a:	e04a      	b.n	8002932 <Sysclk_Config+0xca>
			osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV3;
 800289c:	2302      	movs	r3, #2
 800289e:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 80028a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			latency = FLASH_LATENCY_0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80028ac:	e011      	b.n	80028d2 <Sysclk_Config+0x6a>
			osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV2;
 80028ae:	2301      	movs	r3, #1
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL12;
 80028b2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
			latency = FLASH_LATENCY_1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80028be:	e008      	b.n	80028d2 <Sysclk_Config+0x6a>
			osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 80028c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			latency = FLASH_LATENCY_2;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80028d0:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd ffa8 	bl	800082c <HAL_RCC_OscConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <Sysclk_Config+0x7e>
	{
		Error_handler();
 80028e2:	f000 f8bb 	bl	8002a5c <Error_handler>
	}
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80028e6:	230f      	movs	r3, #15
 80028e8:	60bb      	str	r3, [r7, #8]
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ea:	2302      	movs	r3, #2
 80028ec:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80028f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f6:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80028f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fc:	61bb      	str	r3, [r7, #24]

	if(HAL_RCC_ClockConfig(&clk_init, latency)!= HAL_OK)
 80028fe:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fea5 	bl	8001658 <HAL_RCC_ClockConfig>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <Sysclk_Config+0xb0>
	{
		Error_handler();
 8002914:	f000 f8a2 	bl	8002a5c <Error_handler>
	}
	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002918:	f7ff f884 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <Sysclk_Config+0xd0>)
 8002920:	fba3 2302 	umull	r2, r3, r3, r2
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fdbf 	bl	80004aa <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800292c:	2004      	movs	r0, #4
 800292e:	f7fd fdc9 	bl	80004c4 <HAL_SYSTICK_CLKSourceConfig>
}
 8002932:	3748      	adds	r7, #72	; 0x48
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <TIMER2_Init>:
void TIMER2_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef tim2PWM;
	htimer2.Instance = TIM2;
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <TIMER2_Init+0x104>)
 8002944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002948:	601a      	str	r2, [r3, #0]
	htimer2.Init.Period = 10000-1;
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <TIMER2_Init+0x104>)
 800294c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002950:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 4799;
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <TIMER2_Init+0x104>)
 8002954:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8002958:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_PWM_Init(&htimer2)!= HAL_OK)
 800295a:	4839      	ldr	r0, [pc, #228]	; (8002a40 <TIMER2_Init+0x104>)
 800295c:	f7ff f86e 	bl	8001a3c <HAL_TIM_PWM_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <TIMER2_Init+0x2e>
	{
		Error_handler();
 8002966:	f000 f879 	bl	8002a5c <Error_handler>
	}
	memset(&tim2PWM,0,sizeof(tim2PWM));
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	221c      	movs	r2, #28
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f957 	bl	8002c24 <memset>
	tim2PWM.OCMode = TIM_OCMODE_PWM1;
 8002976:	2360      	movs	r3, #96	; 0x60
 8002978:	607b      	str	r3, [r7, #4]
	tim2PWM.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
	tim2PWM.Pulse = htimer2.Init.Period*25/100;
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <TIMER2_Init+0x104>)
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009a      	lsls	r2, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <TIMER2_Init+0x108>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM, TIM_CHANNEL_1)!= HAL_OK)
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2200      	movs	r2, #0
 800299a:	4619      	mov	r1, r3
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <TIMER2_Init+0x104>)
 800299e:	f7ff f9f9 	bl	8001d94 <HAL_TIM_PWM_ConfigChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <TIMER2_Init+0x70>
	{
		Error_handler();
 80029a8:	f000 f858 	bl	8002a5c <Error_handler>
	}
	tim2PWM.Pulse = htimer2.Init.Period*45/100;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <TIMER2_Init+0x104>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	011a      	lsls	r2, r3, #4
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <TIMER2_Init+0x108>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM, TIM_CHANNEL_2)!= HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2204      	movs	r2, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	481d      	ldr	r0, [pc, #116]	; (8002a40 <TIMER2_Init+0x104>)
 80029cc:	f7ff f9e2 	bl	8001d94 <HAL_TIM_PWM_ConfigChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <TIMER2_Init+0x9e>
	{
		Error_handler();
 80029d6:	f000 f841 	bl	8002a5c <Error_handler>
	}
	tim2PWM.Pulse = htimer2.Init.Period*75/100;
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <TIMER2_Init+0x104>)
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	011a      	lsls	r2, r3, #4
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIMER2_Init+0x108>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM, TIM_CHANNEL_3)!= HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2208      	movs	r2, #8
 80029f6:	4619      	mov	r1, r3
 80029f8:	4811      	ldr	r0, [pc, #68]	; (8002a40 <TIMER2_Init+0x104>)
 80029fa:	f7ff f9cb 	bl	8001d94 <HAL_TIM_PWM_ConfigChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <TIMER2_Init+0xcc>
	{
		Error_handler();
 8002a04:	f000 f82a 	bl	8002a5c <Error_handler>
	}
	tim2PWM.Pulse = htimer2.Init.Period*95/100;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <TIMER2_Init+0x104>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <TIMER2_Init+0x108>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htimer2,&tim2PWM, TIM_CHANNEL_4)!= HAL_OK)
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	220c      	movs	r2, #12
 8002a24:	4619      	mov	r1, r3
 8002a26:	4806      	ldr	r0, [pc, #24]	; (8002a40 <TIMER2_Init+0x104>)
 8002a28:	f7ff f9b4 	bl	8001d94 <HAL_TIM_PWM_ConfigChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <TIMER2_Init+0xfa>
	{
		Error_handler();
 8002a32:	f000 f813 	bl	8002a5c <Error_handler>
	}
}
 8002a36:	bf00      	nop
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000030 	.word	0x20000030
 8002a44:	51eb851f 	.word	0x51eb851f

08002a48 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <Error_handler>:
		//There is a problem
		Error_handler();
	}
}
void Error_handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	while(1);
 8002a60:	e7fe      	b.n	8002a60 <Error_handler+0x4>
	...

08002a64 <HAL_MspInit>:
 *  Created on: Jun 19, 2020
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
void HAL_MspInit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f7fd fce9 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; // usage fault, memory fault and bus fault system exception
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_MspInit+0x40>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_MspInit+0x40>)
 8002a74:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002a78:	6253      	str	r3, [r2, #36]	; 0x24
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f06f 000b 	mvn.w	r0, #11
 8002a82:	f7fd fce8 	bl	8000456 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f06f 000a 	mvn.w	r0, #10
 8002a8e:	f7fd fce2 	bl	8000456 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	f06f 0009 	mvn.w	r0, #9
 8002a9a:	f7fd fcdc 	bl	8000456 <HAL_NVIC_SetPriority>

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	 * pb10 -> ch3
	 * pb2 -> ch4
	 */
	GPIO_InitTypeDef pgpio_tim2oc;
	/* 1. enable the peripheral clock for the timer2 peripheral*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aba:	6153      	str	r3, [r2, #20]
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad2:	6153      	str	r3, [r2, #20]
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	61d3      	str	r3, [r2, #28]
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_TIM_PWM_MspInit+0xac>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]


	/* 2. Do the pin muxing configurations */

	pgpio_tim2oc.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002af8:	2303      	movs	r3, #3
 8002afa:	617b      	str	r3, [r7, #20]
	pgpio_tim2oc.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
	pgpio_tim2oc.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
	pgpio_tim2oc.Alternate = GPIO_AF1_TIM2;
 8002b04:	2301      	movs	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
	pgpio_tim2oc.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &pgpio_tim2oc);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b16:	f7fd fcff 	bl	8000518 <HAL_GPIO_Init>

	pgpio_tim2oc.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002b1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b1e:	617b      	str	r3, [r7, #20]
	pgpio_tim2oc.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
	pgpio_tim2oc.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
	pgpio_tim2oc.Alternate = GPIO_AF1_TIM2;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
	pgpio_tim2oc.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &pgpio_tim2oc);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <HAL_TIM_PWM_MspInit+0xb0>)
 8002b38:	f7fd fcee 	bl	8000518 <HAL_GPIO_Init>

	/* 3. nvic setting*/
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b3c:	201c      	movs	r0, #28
 8002b3e:	f7fd fca6 	bl	800048e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15 ,0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	210f      	movs	r1, #15
 8002b46:	201c      	movs	r0, #28
 8002b48:	f7fd fc85 	bl	8000456 <HAL_NVIC_SetPriority>

}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	48000400 	.word	0x48000400

08002b5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <SystemInit+0x28>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <SystemInit+0x28>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SystemInit+0x28>)
 8002b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b76:	609a      	str	r2, [r3, #8]
#endif
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b8e:	e003      	b.n	8002b98 <LoopCopyDataInit>

08002b90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b96:	3104      	adds	r1, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b98:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ba0:	d3f6      	bcc.n	8002b90 <CopyDataInit>
	ldr	r2, =_sbss
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ba4:	e002      	b.n	8002bac <LoopFillZerobss>

08002ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ba6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ba8:	f842 3b04 	str.w	r3, [r2], #4

08002bac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <LoopForever+0x16>)
	cmp	r2, r3
 8002bae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bb0:	d3f9      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bb2:	f7ff ffd3 	bl	8002b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f000 f811 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bba:	f7ff fe25 	bl	8002808 <main>

08002bbe <LoopForever>:

LoopForever:
    b LoopForever
 8002bbe:	e7fe      	b.n	8002bbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bc0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002bc4:	08002c84 	.word	0x08002c84
	ldr	r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bcc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002bd0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002bd4:	200000f0 	.word	0x200000f0

08002bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC1_2_IRQHandler>
	...

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4e0d      	ldr	r6, [pc, #52]	; (8002c14 <__libc_init_array+0x38>)
 8002be0:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be2:	1ba4      	subs	r4, r4, r6
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	2500      	movs	r5, #0
 8002be8:	42a5      	cmp	r5, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	4e0b      	ldr	r6, [pc, #44]	; (8002c1c <__libc_init_array+0x40>)
 8002bee:	4c0c      	ldr	r4, [pc, #48]	; (8002c20 <__libc_init_array+0x44>)
 8002bf0:	f000 f820 	bl	8002c34 <_init>
 8002bf4:	1ba4      	subs	r4, r4, r6
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	2500      	movs	r5, #0
 8002bfa:	42a5      	cmp	r5, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c04:	4798      	blx	r3
 8002c06:	3501      	adds	r5, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0e:	4798      	blx	r3
 8002c10:	3501      	adds	r5, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08002c7c 	.word	0x08002c7c
 8002c18:	08002c7c 	.word	0x08002c7c
 8002c1c:	08002c7c 	.word	0x08002c7c
 8002c20:	08002c80 	.word	0x08002c80

08002c24 <memset>:
 8002c24:	4402      	add	r2, r0
 8002c26:	4603      	mov	r3, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
