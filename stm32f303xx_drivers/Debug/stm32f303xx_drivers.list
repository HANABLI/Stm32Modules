
stm32f303xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a7c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c10  08000c10  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c10  08000c10  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000c10  08000c10  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c10  08000c10  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c14  08000c14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000014  08000c2c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000c2c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bba  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000069b  00000000  00000000  00021bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  000222a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000150  00000000  00000000  00022438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002d0a  00000000  00000000  00022588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000196c  00000000  00000000  00025292  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b71e  00000000  00000000  00026bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003231c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000059c  00000000  00000000  00032398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000bf8 	.word	0x08000bf8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000bf8 	.word	0x08000bf8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <I2C1_GPIOInit>:
void delay()
{
	for(uint32_t i=0;i<50000/2;i++);
}
void I2C1_GPIOInit(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b088      	sub	sp, #32
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t  SPIGpioB;

	memset(&SPIGpioB,0,sizeof(SPIGpioB));
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	221c      	movs	r2, #28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fcf9 	bl	8000be8 <memset>


	SPIGpioB.pGPIOx = GPIOB;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <I2C1_GPIOInit+0x4c>)
 80001f8:	607b      	str	r3, [r7, #4]
	SPIGpioB.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001fa:	2302      	movs	r3, #2
 80001fc:	60fb      	str	r3, [r7, #12]
	SPIGpioB.GPIO_PinConfig.GPIO_pinOPType = GPIO_OP_TYPE_PP;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
	SPIGpioB.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 8000202:	2304      	movs	r3, #4
 8000204:	61fb      	str	r3, [r7, #28]
	SPIGpioB.GPIO_PinConfig.GPIO_pinPuPdControl = GPIO_PIN_PU;
 8000206:	2301      	movs	r3, #1
 8000208:	617b      	str	r3, [r7, #20]
	SPIGpioB.GPIO_PinConfig.GPIO_pinSpeed = GPIO_SPEED_HIGH;
 800020a:	2303      	movs	r3, #3
 800020c:	613b      	str	r3, [r7, #16]

	//SCL
	SPIGpioB.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800020e:	2308      	movs	r3, #8
 8000210:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&SPIGpioB);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f909 	bl	800042c <GPIO_Init>

	//SDA
	SPIGpioB.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800021a:	2307      	movs	r3, #7
 800021c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&SPIGpioB);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f903 	bl	800042c <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3720      	adds	r7, #32
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	48000400 	.word	0x48000400

08000234 <I2C_Inits>:

	GPIO_Init(&ButtonTest);
}

void I2C_Inits(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	I2C1_Handle.pI2Cx = I2C1;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <I2C_Inits+0x28>)
 800023a:	4a09      	ldr	r2, [pc, #36]	; (8000260 <I2C_Inits+0x2c>)
 800023c:	609a      	str	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = 0x61;
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <I2C_Inits+0x28>)
 8000240:	2261      	movs	r2, #97	; 0x61
 8000242:	711a      	strb	r2, [r3, #4]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM100;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <I2C_Inits+0x28>)
 8000246:	2201      	movs	r2, #1
 8000248:	601a      	str	r2, [r3, #0]
	I2C1_Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <I2C_Inits+0x28>)
 800024c:	2200      	movs	r2, #0
 800024e:	715a      	strb	r2, [r3, #5]

	I2C_Init(&I2C1_Handle);
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <I2C_Inits+0x28>)
 8000252:	f000 fafd 	bl	8000850 <I2C_Init>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000030 	.word	0x20000030
 8000260:	40005400 	.word	0x40005400

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	//I2C pin init
	I2C1_GPIOInit();
 8000268:	f7ff ffbc 	bl	80001e4 <I2C1_GPIOInit>
	//I2C init
	I2C_Inits();
 800026c:	f7ff ffe2 	bl	8000234 <I2C_Inits>

	I2C_MasterSendData(&I2C1_Handle, (uint8_t*)some_data, strlen(some_data), SlaveAddr);
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <main+0x24>)
 8000272:	f7ff ffaf 	bl	80001d4 <strlen>
 8000276:	4602      	mov	r2, r0
 8000278:	2368      	movs	r3, #104	; 0x68
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <main+0x24>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <main+0x28>)
 800027e:	f000 fba1 	bl	80009c4 <I2C_MasterSendData>
	return 0;
 8000282:	2300      	movs	r3, #0

}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000000 	.word	0x20000000
 800028c:	20000030 	.word	0x20000030

08000290 <GPIO_PeriClockControl>:
 *
 * @note		- none
 *
 ********************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d157      	bne.n	8000352 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002a8:	d106      	bne.n	80002b8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002aa:	4b58      	ldr	r3, [pc, #352]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a57      	ldr	r2, [pc, #348]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b4:	6153      	str	r3, [r2, #20]
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002b6:	e0a3      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a55      	ldr	r2, [pc, #340]	; (8000410 <GPIO_PeriClockControl+0x180>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c0:	4b52      	ldr	r3, [pc, #328]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a51      	ldr	r2, [pc, #324]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	e098      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a50      	ldr	r2, [pc, #320]	; (8000414 <GPIO_PeriClockControl+0x184>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002d6:	4b4d      	ldr	r3, [pc, #308]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a4c      	ldr	r2, [pc, #304]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e0:	6153      	str	r3, [r2, #20]
}
 80002e2:	e08d      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a4c      	ldr	r2, [pc, #304]	; (8000418 <GPIO_PeriClockControl+0x188>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002ec:	4b47      	ldr	r3, [pc, #284]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a46      	ldr	r2, [pc, #280]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80002f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f6:	6153      	str	r3, [r2, #20]
}
 80002f8:	e082      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a47      	ldr	r2, [pc, #284]	; (800041c <GPIO_PeriClockControl+0x18c>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000302:	4b42      	ldr	r3, [pc, #264]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a41      	ldr	r2, [pc, #260]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030c:	6153      	str	r3, [r2, #20]
}
 800030e:	e077      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a43      	ldr	r2, [pc, #268]	; (8000420 <GPIO_PeriClockControl+0x190>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000318:	4b3c      	ldr	r3, [pc, #240]	; (800040c <GPIO_PeriClockControl+0x17c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a3b      	ldr	r2, [pc, #236]	; (800040c <GPIO_PeriClockControl+0x17c>)
 800031e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000322:	6153      	str	r3, [r2, #20]
}
 8000324:	e06c      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a3e      	ldr	r2, [pc, #248]	; (8000424 <GPIO_PeriClockControl+0x194>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800032e:	4b37      	ldr	r3, [pc, #220]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a36      	ldr	r2, [pc, #216]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000338:	6153      	str	r3, [r2, #20]
}
 800033a:	e061      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a3a      	ldr	r2, [pc, #232]	; (8000428 <GPIO_PeriClockControl+0x198>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d15d      	bne.n	8000400 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000344:	4b31      	ldr	r3, [pc, #196]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a30      	ldr	r2, [pc, #192]	; (800040c <GPIO_PeriClockControl+0x17c>)
 800034a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034e:	6153      	str	r3, [r2, #20]
}
 8000350:	e056      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800035a:	4b2c      	ldr	r3, [pc, #176]	; (800040c <GPIO_PeriClockControl+0x17c>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a2b      	ldr	r2, [pc, #172]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000364:	6153      	str	r3, [r2, #20]
}
 8000366:	e04b      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a29      	ldr	r2, [pc, #164]	; (8000410 <GPIO_PeriClockControl+0x180>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000370:	4b26      	ldr	r3, [pc, #152]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a25      	ldr	r2, [pc, #148]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800037a:	6153      	str	r3, [r2, #20]
}
 800037c:	e040      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a24      	ldr	r2, [pc, #144]	; (8000414 <GPIO_PeriClockControl+0x184>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000386:	4b21      	ldr	r3, [pc, #132]	; (800040c <GPIO_PeriClockControl+0x17c>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a20      	ldr	r2, [pc, #128]	; (800040c <GPIO_PeriClockControl+0x17c>)
 800038c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000390:	6153      	str	r3, [r2, #20]
}
 8000392:	e035      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a20      	ldr	r2, [pc, #128]	; (8000418 <GPIO_PeriClockControl+0x188>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <GPIO_PeriClockControl+0x17c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80003a6:	6153      	str	r3, [r2, #20]
}
 80003a8:	e02a      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <GPIO_PeriClockControl+0x18c>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80003bc:	6153      	str	r3, [r2, #20]
}
 80003be:	e01f      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <GPIO_PeriClockControl+0x190>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a0f      	ldr	r2, [pc, #60]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80003d2:	6153      	str	r3, [r2, #20]
}
 80003d4:	e014      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <GPIO_PeriClockControl+0x194>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80003e8:	6153      	str	r3, [r2, #20]
}
 80003ea:	e009      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <GPIO_PeriClockControl+0x198>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d105      	bne.n	8000400 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <GPIO_PeriClockControl+0x17c>)
 80003fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003fe:	6153      	str	r3, [r2, #20]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	48000400 	.word	0x48000400
 8000414:	48000800 	.word	0x48000800
 8000418:	48000c00 	.word	0x48000c00
 800041c:	48001000 	.word	0x48001000
 8000420:	48001400 	.word	0x48001400
 8000424:	48001800 	.word	0x48001800
 8000428:	48001c00 	.word	0x48001c00

0800042c <GPIO_Init>:
 *@return		- none
 *
 *
 *************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2101      	movs	r1, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff28 	bl	8000290 <GPIO_PeriClockControl>
	uint32_t temp = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
	//1 . configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	2b03      	cmp	r3, #3
 800044a:	d81e      	bhi.n	800048a <GPIO_Init+0x5e>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	400a      	ands	r2, r1
 8000476:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //Setup
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6819      	ldr	r1, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	430a      	orrs	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	e0c1      	b.n	800060e <GPIO_Init+0x1e2>

	}
	else
	{
		//this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	2b04      	cmp	r3, #4
 8000490:	d117      	bne.n	80004c2 <GPIO_Init+0x96>
		{
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <GPIO_Init+0x188>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	6852      	ldr	r2, [r2, #4]
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a44      	ldr	r2, [pc, #272]	; (80005b4 <GPIO_Init+0x188>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <GPIO_Init+0x188>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	6852      	ldr	r2, [r2, #4]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a3e      	ldr	r2, [pc, #248]	; (80005b4 <GPIO_Init+0x188>)
 80004bc:	400b      	ands	r3, r1
 80004be:	6093      	str	r3, [r2, #8]
 80004c0:	e035      	b.n	800052e <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	2b05      	cmp	r3, #5
 80004c8:	d117      	bne.n	80004fa <GPIO_Init+0xce>
		{
			//1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <GPIO_Init+0x188>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	6852      	ldr	r2, [r2, #4]
 80004d2:	2101      	movs	r1, #1
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <GPIO_Init+0x188>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <GPIO_Init+0x188>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	6852      	ldr	r2, [r2, #4]
 80004e8:	2101      	movs	r1, #1
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	43d2      	mvns	r2, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a30      	ldr	r2, [pc, #192]	; (80005b4 <GPIO_Init+0x188>)
 80004f4:	400b      	ands	r3, r1
 80004f6:	60d3      	str	r3, [r2, #12]
 80004f8:	e019      	b.n	800052e <GPIO_Init+0x102>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	2b06      	cmp	r3, #6
 8000500:	d115      	bne.n	800052e <GPIO_Init+0x102>
		{
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <GPIO_Init+0x188>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	6852      	ldr	r2, [r2, #4]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a28      	ldr	r2, [pc, #160]	; (80005b4 <GPIO_Init+0x188>)
 8000514:	430b      	orrs	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <GPIO_Init+0x188>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	6852      	ldr	r2, [r2, #4]
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <GPIO_Init+0x188>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6093      	str	r3, [r2, #8]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 0303 	and.w	r3, r3, #3
 8000540:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800054a:	d043      	beq.n	80005d4 <GPIO_Init+0x1a8>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <GPIO_Init+0x18c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d02b      	beq.n	80005ae <GPIO_Init+0x182>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <GPIO_Init+0x190>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d024      	beq.n	80005aa <GPIO_Init+0x17e>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <GPIO_Init+0x194>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d01d      	beq.n	80005a6 <GPIO_Init+0x17a>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <GPIO_Init+0x198>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d016      	beq.n	80005a2 <GPIO_Init+0x176>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <GPIO_Init+0x19c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d00f      	beq.n	800059e <GPIO_Init+0x172>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <GPIO_Init+0x1a0>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d008      	beq.n	800059a <GPIO_Init+0x16e>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <GPIO_Init+0x1a4>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d101      	bne.n	8000596 <GPIO_Init+0x16a>
 8000592:	2307      	movs	r3, #7
 8000594:	e01f      	b.n	80005d6 <GPIO_Init+0x1aa>
 8000596:	2300      	movs	r3, #0
 8000598:	e01d      	b.n	80005d6 <GPIO_Init+0x1aa>
 800059a:	2306      	movs	r3, #6
 800059c:	e01b      	b.n	80005d6 <GPIO_Init+0x1aa>
 800059e:	2305      	movs	r3, #5
 80005a0:	e019      	b.n	80005d6 <GPIO_Init+0x1aa>
 80005a2:	2304      	movs	r3, #4
 80005a4:	e017      	b.n	80005d6 <GPIO_Init+0x1aa>
 80005a6:	2303      	movs	r3, #3
 80005a8:	e015      	b.n	80005d6 <GPIO_Init+0x1aa>
 80005aa:	2302      	movs	r3, #2
 80005ac:	e013      	b.n	80005d6 <GPIO_Init+0x1aa>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e011      	b.n	80005d6 <GPIO_Init+0x1aa>
 80005b2:	bf00      	nop
 80005b4:	40010400 	.word	0x40010400
 80005b8:	48000400 	.word	0x48000400
 80005bc:	48000800 	.word	0x48000800
 80005c0:	48000c00 	.word	0x48000c00
 80005c4:	48001000 	.word	0x48001000
 80005c8:	48001400 	.word	0x48001400
 80005cc:	48001800 	.word	0x48001800
 80005d0:	48001c00 	.word	0x48001c00
 80005d4:	2300      	movs	r3, #0
 80005d6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005d8:	4b5a      	ldr	r3, [pc, #360]	; (8000744 <GPIO_Init+0x318>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a59      	ldr	r2, [pc, #356]	; (8000744 <GPIO_Init+0x318>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80005e4:	7c7a      	ldrb	r2, [r7, #17]
 80005e6:	7cbb      	ldrb	r3, [r7, #18]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	fa02 f103 	lsl.w	r1, r2, r3
 80005ee:	4a56      	ldr	r2, [pc, #344]	; (8000748 <GPIO_Init+0x31c>)
 80005f0:	7cfb      	ldrb	r3, [r7, #19]
 80005f2:	3302      	adds	r3, #2
 80005f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b54      	ldr	r3, [pc, #336]	; (800074c <GPIO_Init+0x320>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	6852      	ldr	r2, [r2, #4]
 8000600:	2101      	movs	r1, #1
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a50      	ldr	r2, [pc, #320]	; (800074c <GPIO_Init+0x320>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6013      	str	r3, [r2, #0]

	}

	temp=0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
	//2 . configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68da      	ldr	r2, [r3, #12]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2103      	movs	r1, #3
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6899      	ldr	r1, [r3, #8]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
	//3 . configure the pupd setting

	temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	691a      	ldr	r2, [r3, #16]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68da      	ldr	r2, [r3, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2103      	movs	r1, #3
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	400a      	ands	r2, r1
 800067c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68d9      	ldr	r1, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	430a      	orrs	r2, r1
 800068c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	//4 . configure the optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_pinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2101      	movs	r1, #1
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	4619      	mov	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	400a      	ands	r2, r1
 80006ba:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6859      	ldr	r1, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	430a      	orrs	r2, r1
 80006ca:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
	//5 . configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d130      	bne.n	800073a <GPIO_Init+0x30e>
		//configure the alt function registers.


		uint8_t tmp2 , tmp1;

		tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	08db      	lsrs	r3, r3, #3
 80006de:	743b      	strb	r3, [r7, #16]
		tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[tmp1] &= ~(0xF << (4 * tmp2));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	7c3a      	ldrb	r2, [r7, #16]
 80006f2:	3208      	adds	r2, #8
 80006f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	220f      	movs	r2, #15
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7c3a      	ldrb	r2, [r7, #16]
 800070c:	4001      	ands	r1, r0
 800070e:	3208      	adds	r2, #8
 8000710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[tmp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * tmp2));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7c3a      	ldrb	r2, [r7, #16]
 800071a:	3208      	adds	r2, #8
 800071c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	fa02 f103 	lsl.w	r1, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	7c3a      	ldrb	r2, [r7, #16]
 8000732:	4301      	orrs	r1, r0
 8000734:	3208      	adds	r2, #8
 8000736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}


}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	40010000 	.word	0x40010000
 800074c:	40010400 	.word	0x40010400

08000750 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );
*/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	pI2Cx->CR2 |= ( 1 << I2C_CR2_START);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	605a      	str	r2, [r3, #4]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <I2C_PeriClockControl>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{

}*/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d120      	bne.n	80007c4 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a22      	ldr	r2, [pc, #136]	; (8000810 <I2C_PeriClockControl+0xa0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <I2C_PeriClockControl+0xa4>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <I2C_PeriClockControl+0xa4>)
 8000790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000794:	61d3      	str	r3, [r2, #28]
		{
			I2C3_PCLK_DI();
		}

	}
}
 8000796:	e035      	b.n	8000804 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <I2C_PeriClockControl+0xa0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007aa:	61d3      	str	r3, [r2, #28]
}
 80007ac:	e02a      	b.n	8000804 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <I2C_PeriClockControl+0xa0>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d126      	bne.n	8000804 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007c0:	61d3      	str	r3, [r2, #28]
}
 80007c2:	e01f      	b.n	8000804 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <I2C_PeriClockControl+0xa0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a10      	ldr	r2, [pc, #64]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80007d6:	61d3      	str	r3, [r2, #28]
}
 80007d8:	e014      	b.n	8000804 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <I2C_PeriClockControl+0xa0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80007ec:	61d3      	str	r3, [r2, #28]
}
 80007ee:	e009      	b.n	8000804 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <I2C_PeriClockControl+0xa0>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d105      	bne.n	8000804 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <I2C_PeriClockControl+0xa4>)
 80007fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000802:	61d3      	str	r3, [r2, #28]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40005400 	.word	0x40005400
 8000814:	40021000 	.word	0x40021000

08000818 <I2C_PeriControle>:
void I2C_PeriControle(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d106      	bne.n	8000838 <I2C_PeriControle+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f043 0201 	orr.w	r2, r3, #1
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
	}
	else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000836:	e005      	b.n	8000844 <I2C_PeriControle+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0201 	bic.w	r2, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <I2C_Init>:
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff86 	bl	8000770 <I2C_PeriClockControl>

	I2C_PeriControle(pI2CHandle->pI2Cx, DISABLE);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ffd4 	bl	8000818 <I2C_PeriControle>
	// Make sure I2C1 is disabled
	pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_PE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	f022 0201 	bic.w	r2, r2, #1
 800087e:	601a      	str	r2, [r3, #0]
	// Reset I2C1 Configuration to default values
	//pI2CHandle->pI2Cx->CR1 	  	= 0x00000000;
	//pI2CHandle->pI2Cx->CR2 	  	= 0x00000000;
	//pI2CHandle->pI2Cx->TIMINGR 	= 0x00000000;
	//Ack control bit
	pI2CHandle->pI2Cx->CR2 |= (pI2CHandle->I2C_Config.I2C_AckControl << 15);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	03db      	lsls	r3, r3, #15
 800088c:	4619      	mov	r1, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	430a      	orrs	r2, r1
 8000894:	605a      	str	r2, [r3, #4]
	//Configure Device address
	pI2CHandle->pI2Cx->OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (1 << 15);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008ba:	609a      	str	r2, [r3, #8]
	//Configure TIMINGR
	if(RCC_GetPCLKValue()==I2C_SCL_HSI)
 80008bc:	f000 f924 	bl	8000b08 <RCC_GetPCLKValue>
 80008c0:	4602      	mov	r2, r0
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <I2C_Init+0x158>)
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d133      	bne.n	8000930 <I2C_Init+0xe0>
	{
		if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM10)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d108      	bne.n	80008e2 <I2C_Init+0x92>
		{
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL8_SPEED_SM10;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	6919      	ldr	r1, [r3, #16]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <I2C_Init+0x15c>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6113      	str	r3, [r2, #16]
		}
	}
	//Enable I2C Peripheral


}
 80008e0:	e05d      	b.n	800099e <I2C_Init+0x14e>
		else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM100)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d108      	bne.n	80008fc <I2C_Init+0xac>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL8_SPEED_SM100;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	6919      	ldr	r1, [r3, #16]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <I2C_Init+0x160>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6113      	str	r3, [r2, #16]
}
 80008fa:	e050      	b.n	800099e <I2C_Init+0x14e>
		else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_FM2K)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d108      	bne.n	8000916 <I2C_Init+0xc6>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL8_SPEED_FM2K;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	6919      	ldr	r1, [r3, #16]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <I2C_Init+0x164>)
 8000910:	430b      	orrs	r3, r1
 8000912:	6113      	str	r3, [r2, #16]
}
 8000914:	e043      	b.n	800099e <I2C_Init+0x14e>
		else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_FM4K)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d13f      	bne.n	800099e <I2C_Init+0x14e>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL8_SPEED_FM4K;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	6919      	ldr	r1, [r3, #16]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <I2C_Init+0x168>)
 800092a:	430b      	orrs	r3, r1
 800092c:	6113      	str	r3, [r2, #16]
}
 800092e:	e036      	b.n	800099e <I2C_Init+0x14e>
		if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM10)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d108      	bne.n	800094a <I2C_Init+0xfa>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL16_SPEED_SM10;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	6919      	ldr	r1, [r3, #16]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <I2C_Init+0x16c>)
 8000944:	430b      	orrs	r3, r1
 8000946:	6113      	str	r3, [r2, #16]
}
 8000948:	e029      	b.n	800099e <I2C_Init+0x14e>
		else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM100)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d108      	bne.n	8000964 <I2C_Init+0x114>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL16_SPEED_SM100;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	6919      	ldr	r1, [r3, #16]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <I2C_Init+0x170>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6113      	str	r3, [r2, #16]
}
 8000962:	e01c      	b.n	800099e <I2C_Init+0x14e>
		else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_FM2K)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d10a      	bne.n	8000982 <I2C_Init+0x132>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL16_SPEED_FM2K;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	6892      	ldr	r2, [r2, #8]
 8000976:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800097a:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
 800097e:	6113      	str	r3, [r2, #16]
}
 8000980:	e00d      	b.n	800099e <I2C_Init+0x14e>
		else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_FM4K)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d109      	bne.n	800099e <I2C_Init+0x14e>
			pI2CHandle->pI2Cx->TIMINGR |= I2C_SCL16_SPEED_FM4K;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	6892      	ldr	r2, [r2, #8]
 8000994:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000998:	f443 63c3 	orr.w	r3, r3, #1560	; 0x618
 800099c:	6113      	str	r3, [r2, #16]
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	007a1200 	.word	0x007a1200
 80009ac:	10108cff 	.word	0x10108cff
 80009b0:	00301d2a 	.word	0x00301d2a
 80009b4:	0010021e 	.word	0x0010021e
 80009b8:	0010020a 	.word	0x0010020a
 80009bc:	30108dff 	.word	0x30108dff
 80009c0:	00503d59 	.word	0x00503d59

080009c4 <I2C_MasterSendData>:
uint8_t I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	70fb      	strb	r3, [r7, #3]
	uint32_t 	timeout;	// Flag waiting timeout
	uint8_t		n;		// Loop counter
	//1. Set device address
	//pI2CHandle->pI2Cx->CR2 |= (0b0000000000 << I2C_CR2_SADDS);
	SlaveAddr = SlaveAddr << 1;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	70fb      	strb	r3, [r7, #3]
	pI2CHandle->pI2Cx->CR2 |= (SlaveAddr << I2C_CR2_SADD);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	6859      	ldr	r1, [r3, #4]
 80009e6:	78fa      	ldrb	r2, [r7, #3]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	605a      	str	r2, [r3, #4]
	//2. Set I2C write mode
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_RD_WRN);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009fe:	605a      	str	r2, [r3, #4]
	//3. Transfer NBYTES, with AUTOEND

	//pI2CHandle->pI2Cx->CR2 |= (0b00000000 << I2C_CR2_NBYTES);
	pI2CHandle->pI2Cx->CR2 |= (Len << I2C_CR2_NBYTES);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	6859      	ldr	r1, [r3, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	041a      	lsls	r2, r3, #16
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_AUTOEND);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000a20:	605a      	str	r2, [r3, #4]
	//4.clear stop flag
	I2C1->ICR |= I2C_ICR_STOPCF;
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <I2C_MasterSendData+0x110>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <I2C_MasterSendData+0x110>)
 8000a28:	f043 0305 	orr.w	r3, r3, #5
 8000a2c:	61d3      	str	r3, [r2, #28]
	//5. Generate the START condition
	I2C_PeriControle(pI2CHandle->pI2Cx, ENABLE);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2101      	movs	r1, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff feef 	bl	8000818 <I2C_PeriControle>
	//Enable I2C Peripheral
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe86 	bl	8000750 <I2C_GenerateStartCondition>
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ISR_ADDR)   );
 8000a44:	bf00      	nop
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2103      	movs	r1, #3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f845 	bl	8000adc <I2C_GetFlagStatus>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f6      	beq.n	8000a46 <I2C_MasterSendData+0x82>

	n = Len;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	74fb      	strb	r3, [r7, #19]
	while(n>0)
 8000a5c:	e01e      	b.n	8000a9c <I2C_MasterSendData+0xd8>
	{
		// Wait for TXIS with timout
		timeout = 100000;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <I2C_MasterSendData+0x114>)
 8000a60:	617b      	str	r3, [r7, #20]
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ISR_TXIS))
 8000a62:	e007      	b.n	8000a74 <I2C_MasterSendData+0xb0>
		{
			timeout --;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
			if(timeout == 0) return 1;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <I2C_MasterSendData+0xb0>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e02b      	b.n	8000acc <I2C_MasterSendData+0x108>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ISR_TXIS))
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f82e 	bl	8000adc <I2C_GetFlagStatus>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0ee      	beq.n	8000a64 <I2C_MasterSendData+0xa0>
		}
		//Send data
		pI2CHandle->pI2Cx->TXDR = *pTxbuffer;
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
		pTxbuffer++;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
		n--;
 8000a96:	7cfb      	ldrb	r3, [r7, #19]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	74fb      	strb	r3, [r7, #19]
	while(n>0)
 8000a9c:	7cfb      	ldrb	r3, [r7, #19]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1dd      	bne.n	8000a5e <I2C_MasterSendData+0x9a>
	}
	// Wait for STOPF with timeout
	timeout = 100000;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <I2C_MasterSendData+0x114>)
 8000aa4:	617b      	str	r3, [r7, #20]
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ISR_STOPF) )
 8000aa6:	e007      	b.n	8000ab8 <I2C_MasterSendData+0xf4>
	{
		timeout--;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
		if (timeout == 0) return 3;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <I2C_MasterSendData+0xf4>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e009      	b.n	8000acc <I2C_MasterSendData+0x108>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ISR_STOPF) )
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2105      	movs	r1, #5
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f80c 	bl	8000adc <I2C_GetFlagStatus>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0ee      	beq.n	8000aa8 <I2C_MasterSendData+0xe4>
	}
	return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <I2C_GetFlagStatus>:
__weak void I2C_ApplicationEventCallback(I2C_Handle_t *pSPIHandle,uint8_t AppEv)
{
	//
}
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint8_t FlagName)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	if(pI2Cx->ISR & FlagName)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	4013      	ands	r3, r2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <I2C_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <I2C_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <RCC_GetPCLKValue>:
 */
#include "stm32f303xx_rcc_driver.h"
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};
uint32_t RCC_GetPCLKValue(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	uint32_t SystemClk;
	uint8_t clksrc;
	clksrc = ((RCC->CFGR >>2) & 0x3);
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <RCC_GetPCLKValue+0x38>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	70fb      	strb	r3, [r7, #3]

	if(clksrc == 0)
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <RCC_GetPCLKValue+0x20>
	{
		SystemClk = 8000000;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <RCC_GetPCLKValue+0x3c>)
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	e004      	b.n	8000b32 <RCC_GetPCLKValue+0x2a>

	}else if(clksrc == 1)
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d101      	bne.n	8000b32 <RCC_GetPCLKValue+0x2a>
	{
		SystemClk = 16000000;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <RCC_GetPCLKValue+0x40>)
 8000b30:	607b      	str	r3, [r7, #4]
	}
	//
	return SystemClk;
 8000b32:	687b      	ldr	r3, [r7, #4]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000
 8000b44:	007a1200 	.word	0x007a1200
 8000b48:	00f42400 	.word	0x00f42400

08000b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490e      	ldr	r1, [pc, #56]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b76:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f000 f811 	bl	8000ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fb71 	bl	8000264 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b90:	08000c18 	.word	0x08000c18
  ldr r2, =_sbss
 8000b94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b98:	20000058 	.word	0x20000058

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <__libc_init_array>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4e0d      	ldr	r6, [pc, #52]	; (8000bd8 <__libc_init_array+0x38>)
 8000ba4:	4c0d      	ldr	r4, [pc, #52]	; (8000bdc <__libc_init_array+0x3c>)
 8000ba6:	1ba4      	subs	r4, r4, r6
 8000ba8:	10a4      	asrs	r4, r4, #2
 8000baa:	2500      	movs	r5, #0
 8000bac:	42a5      	cmp	r5, r4
 8000bae:	d109      	bne.n	8000bc4 <__libc_init_array+0x24>
 8000bb0:	4e0b      	ldr	r6, [pc, #44]	; (8000be0 <__libc_init_array+0x40>)
 8000bb2:	4c0c      	ldr	r4, [pc, #48]	; (8000be4 <__libc_init_array+0x44>)
 8000bb4:	f000 f820 	bl	8000bf8 <_init>
 8000bb8:	1ba4      	subs	r4, r4, r6
 8000bba:	10a4      	asrs	r4, r4, #2
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	42a5      	cmp	r5, r4
 8000bc0:	d105      	bne.n	8000bce <__libc_init_array+0x2e>
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bc8:	4798      	blx	r3
 8000bca:	3501      	adds	r5, #1
 8000bcc:	e7ee      	b.n	8000bac <__libc_init_array+0xc>
 8000bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd2:	4798      	blx	r3
 8000bd4:	3501      	adds	r5, #1
 8000bd6:	e7f2      	b.n	8000bbe <__libc_init_array+0x1e>
 8000bd8:	08000c10 	.word	0x08000c10
 8000bdc:	08000c10 	.word	0x08000c10
 8000be0:	08000c10 	.word	0x08000c10
 8000be4:	08000c14 	.word	0x08000c14

08000be8 <memset>:
 8000be8:	4402      	add	r2, r0
 8000bea:	4603      	mov	r3, r0
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d100      	bne.n	8000bf2 <memset+0xa>
 8000bf0:	4770      	bx	lr
 8000bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8000bf6:	e7f9      	b.n	8000bec <memset+0x4>

08000bf8 <_init>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr

08000c04 <_fini>:
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c06:	bf00      	nop
 8000c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0a:	bc08      	pop	{r3}
 8000c0c:	469e      	mov	lr, r3
 8000c0e:	4770      	bx	lr
