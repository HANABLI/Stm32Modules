
PrintfSWV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df0  08002df0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002df0  08002df0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df0  08002df0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002e68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002e68  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006431  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000126f  00000000  00000000  000264d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00027740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000408  00000000  00000000  00027bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c89f  00000000  00000000  00027ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005066  00000000  00000000  00044897  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a27ee  00000000  00000000  000498fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec0eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001798  00000000  00000000  000ec168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002cfc 	.word	0x08002cfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002cfc 	.word	0x08002cfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 f9fe 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f81c 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f860 	bl	8000350 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //on board LED
 8000290:	2120      	movs	r1, #32
 8000292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000296:	f000 fd05 	bl	8000ca4 <HAL_GPIO_TogglePin>
	  count++;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0x3c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <main+0x3c>)
 80002a4:	701a      	strb	r2, [r3, #0]
	  printf("Hello world! = %d \n", count); //print something
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <main+0x3c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	4619      	mov	r1, r3
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <main+0x40>)
 80002ae:	f001 fe41 	bl	8001f34 <iprintf>
	  HAL_Delay(250); //250 as delay
 80002b2:	20fa      	movs	r0, #250	; 0xfa
 80002b4:	f000 fa4c 	bl	8000750 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //on board LED
 80002b8:	e7ea      	b.n	8000290 <main+0x10>
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	08002d14 	.word	0x08002d14

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fe26 	bl	8001f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	2302      	movs	r3, #2
 80002f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fce3 	bl	8000cd8 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000318:	f000 f858 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2302      	movs	r3, #2
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fbe4 	bl	8001b04 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000342:	f000 f843 	bl	80003cc <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	; 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 030c 	add.w	r3, r7, #12
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_GPIO_Init+0x78>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <MX_GPIO_Init+0x78>)
 800036c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_GPIO_Init+0x78>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_GPIO_Init+0x78>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <MX_GPIO_Init+0x78>)
 8000384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_GPIO_Init+0x78>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f000 fc69 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003a2:	2320      	movs	r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	4619      	mov	r1, r3
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f000 fad0 	bl	8000960 <HAL_GPIO_Init>

}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
	...

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <HAL_MspInit+0x44>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <HAL_MspInit+0x44>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <HAL_MspInit+0x44>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a08      	ldr	r2, [pc, #32]	; (8000420 <HAL_MspInit+0x44>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000436:	e7fe      	b.n	8000436 <HardFault_Handler+0x4>

08000438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <MemManage_Handler+0x4>

0800043e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <BusFault_Handler+0x4>

08000444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <UsageFault_Handler+0x4>

0800044a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000478:	f000 f94a 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <ITM_SendChar+0x48>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <ITM_SendChar+0x48>)
 8000490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000494:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <ITM_SendChar+0x4c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <ITM_SendChar+0x4c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004a2:	bf00      	nop
 80004a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f8      	beq.n	80004a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	6013      	str	r3, [r2, #0]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000edfc 	.word	0xe000edfc
 80004cc:	e0000e00 	.word	0xe0000e00

080004d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	e00a      	b.n	80004f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004e2:	f3af 8000 	nop.w
 80004e6:	4601      	mov	r1, r0
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	60ba      	str	r2, [r7, #8]
 80004ee:	b2ca      	uxtb	r2, r1
 80004f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	dbf0      	blt.n	80004e2 <_read+0x12>
	}

return len;
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e009      	b.n	8000530 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ffab 	bl	8000480 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf1      	blt.n	800051c <_write+0x12>
	}
	return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_close>:

int _close(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
	return -1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056a:	605a      	str	r2, [r3, #4]
	return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <_isatty>:

int _isatty(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	return 0;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <_sbrk+0x50>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x16>
		heap_end = &end;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <_sbrk+0x50>)
 80005be:	4a10      	ldr	r2, [pc, #64]	; (8000600 <_sbrk+0x54>)
 80005c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <_sbrk+0x50>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <_sbrk+0x50>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	466a      	mov	r2, sp
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d907      	bls.n	80005e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005d6:	f001 fc7b 	bl	8001ed0 <__errno>
 80005da:	4602      	mov	r2, r0
 80005dc:	230c      	movs	r3, #12
 80005de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	e006      	b.n	80005f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <_sbrk+0x50>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <_sbrk+0x50>)
 80005f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000090 	.word	0x20000090
 8000600:	200000a8 	.word	0x200000a8

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SystemInit+0x28>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <SystemInit+0x28>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <SystemInit+0x28>)
 800061a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800061e:	609a      	str	r2, [r3, #8]
#endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000668 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000634:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000636:	e003      	b.n	8000640 <LoopCopyDataInit>

08000638 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800063a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800063c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800063e:	3104      	adds	r1, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000644:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000646:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000648:	d3f6      	bcc.n	8000638 <CopyDataInit>
	ldr	r2, =_sbss
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <LoopForever+0x12>)
	b	LoopFillZerobss
 800064c:	e002      	b.n	8000654 <LoopFillZerobss>

0800064e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800064e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000650:	f842 3b04 	str.w	r3, [r2], #4

08000654 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <LoopForever+0x16>)
	cmp	r2, r3
 8000656:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000658:	d3f9      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065a:	f7ff ffd3 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f001 fc3d 	bl	8001edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000662:	f7ff fe0d 	bl	8000280 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000668:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800066c:	08002df8 	.word	0x08002df8
	ldr	r0, =_sdata
 8000670:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000674:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000678:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800067c:	200000a4 	.word	0x200000a4

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>
	...

08000684 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_Init+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_Init+0x28>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f92f 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	2000      	movs	r0, #0
 800069c:	f000 f808 	bl	80006b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a0:	f7ff fe9c 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x54>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x58>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f939 	bl	8000946 <HAL_SYSTICK_Config>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e00e      	b.n	80006fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d80a      	bhi.n	80006fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f000 f90f 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f0:	4a06      	ldr	r2, [pc, #24]	; (800070c <HAL_InitTick+0x5c>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000000 	.word	0x20000000
 8000708:	20000008 	.word	0x20000008
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_IncTick+0x20>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_IncTick+0x24>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_IncTick+0x24>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	2000009c 	.word	0x2000009c

08000738 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;  
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetTick+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	2000009c 	.word	0x2000009c

08000750 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff ffee 	bl	8000738 <HAL_GetTick>
 800075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000768:	d005      	beq.n	8000776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_Delay+0x40>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000776:	bf00      	nop
 8000778:	f7ff ffde 	bl	8000738 <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8f7      	bhi.n	8000778 <HAL_Delay+0x28>
  {
  }
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000008 	.word	0x20000008

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff8e 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff47 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5c 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff8e 	bl	800084c <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e160      	b.n	8000c32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	2101      	movs	r1, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 8152 	beq.w	8000c2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0x38>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b12      	cmp	r3, #18
 8000996:	d123      	bne.n	80009e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	08da      	lsrs	r2, r3, #3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3208      	adds	r2, #8
 80009a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	220f      	movs	r2, #15
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	691a      	ldr	r2, [r3, #16]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	6939      	ldr	r1, [r7, #16]
 80009dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0203 	and.w	r2, r3, #3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d00b      	beq.n	8000a34 <HAL_GPIO_Init+0xd4>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d007      	beq.n	8000a34 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a28:	2b11      	cmp	r3, #17
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b12      	cmp	r3, #18
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 0201 	and.w	r2, r3, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80ac 	beq.w	8000c2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	4b5e      	ldr	r3, [pc, #376]	; (8000c50 <HAL_GPIO_Init+0x2f0>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a5d      	ldr	r2, [pc, #372]	; (8000c50 <HAL_GPIO_Init+0x2f0>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b5b      	ldr	r3, [pc, #364]	; (8000c50 <HAL_GPIO_Init+0x2f0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aec:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <HAL_GPIO_Init+0x2f4>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b16:	d025      	beq.n	8000b64 <HAL_GPIO_Init+0x204>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4f      	ldr	r2, [pc, #316]	; (8000c58 <HAL_GPIO_Init+0x2f8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d01f      	beq.n	8000b60 <HAL_GPIO_Init+0x200>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4e      	ldr	r2, [pc, #312]	; (8000c5c <HAL_GPIO_Init+0x2fc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d019      	beq.n	8000b5c <HAL_GPIO_Init+0x1fc>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a4d      	ldr	r2, [pc, #308]	; (8000c60 <HAL_GPIO_Init+0x300>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1f8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a4c      	ldr	r2, [pc, #304]	; (8000c64 <HAL_GPIO_Init+0x304>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1f4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a4b      	ldr	r2, [pc, #300]	; (8000c68 <HAL_GPIO_Init+0x308>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <HAL_GPIO_Init+0x30c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1ec>
 8000b48:	2306      	movs	r3, #6
 8000b4a:	e00c      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	e00a      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b50:	2305      	movs	r3, #5
 8000b52:	e008      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b64:	2300      	movs	r3, #0
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b76:	4937      	ldr	r1, [pc, #220]	; (8000c54 <HAL_GPIO_Init+0x2f4>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b84:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba8:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bd2:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_GPIO_Init+0x310>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f47f ae97 	bne.w	8000970 <HAL_GPIO_Init+0x10>
  }
}
 8000c42:	bf00      	nop
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	48001000 	.word	0x48001000
 8000c68:	48001400 	.word	0x48001400
 8000c6c:	48001800 	.word	0x48001800
 8000c70:	40010400 	.word	0x40010400

08000c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c92:	887a      	ldrh	r2, [r7, #2]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	041a      	lsls	r2, r3, #16
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	f000 bf01 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 8160 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d02:	4bae      	ldr	r3, [pc, #696]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00c      	beq.n	8000d28 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0e:	4bab      	ldr	r3, [pc, #684]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d159      	bne.n	8000dce <HAL_RCC_OscConfig+0xf6>
 8000d1a:	4ba8      	ldr	r3, [pc, #672]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	d152      	bne.n	8000dce <HAL_RCC_OscConfig+0xf6>
 8000d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d102      	bne.n	8000d5a <HAL_RCC_OscConfig+0x82>
 8000d54:	4b99      	ldr	r3, [pc, #612]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	e015      	b.n	8000d86 <HAL_RCC_OscConfig+0xae>
 8000d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d66:	fa93 f3a3 	rbit	r3, r3
 8000d6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d72:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d76:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d82:	4b8e      	ldr	r3, [pc, #568]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d8a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d8e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d92:	fa92 f2a2 	rbit	r2, r2
 8000d96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d9e:	fab2 f282 	clz	r2, r2
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	f042 0220 	orr.w	r2, r2, #32
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	f002 021f 	and.w	r2, r2, #31
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8102 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x2e8>
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 80fc 	bne.w	8000fc0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f000 be93 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd8:	d106      	bne.n	8000de8 <HAL_RCC_OscConfig+0x110>
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e030      	b.n	8000e4a <HAL_RCC_OscConfig+0x172>
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x134>
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e01e      	b.n	8000e4a <HAL_RCC_OscConfig+0x172>
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e16:	d10c      	bne.n	8000e32 <HAL_RCC_OscConfig+0x15a>
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b65      	ldr	r3, [pc, #404]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a64      	ldr	r2, [pc, #400]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e00b      	b.n	8000e4a <HAL_RCC_OscConfig+0x172>
 8000e32:	4b62      	ldr	r3, [pc, #392]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a61      	ldr	r2, [pc, #388]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a5e      	ldr	r2, [pc, #376]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d059      	beq.n	8000f08 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc70 	bl	8000738 <HAL_GetTick>
 8000e58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5c:	e00a      	b.n	8000e74 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fc6b 	bl	8000738 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d902      	bls.n	8000e74 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f000 be40 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>
 8000e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d102      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x1ce>
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x1fa>
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ec2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ece:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000eda:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ede:	fa92 f2a2 	rbit	r2, r2
 8000ee2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000ee6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eea:	fab2 f282 	clz	r2, r2
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	f042 0220 	orr.w	r2, r2, #32
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f002 021f 	and.w	r2, r2, #31
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0ab      	beq.n	8000e5e <HAL_RCC_OscConfig+0x186>
 8000f06:	e05c      	b.n	8000fc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc16 	bl	8000738 <HAL_GetTick>
 8000f0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f12:	f7ff fc11 	bl	8000738 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d902      	bls.n	8000f28 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f000 bde6 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>
 8000f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_OscConfig+0x282>
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	e015      	b.n	8000f86 <HAL_RCC_OscConfig+0x2ae>
 8000f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_RCC_OscConfig+0x2e4>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f92:	fa92 f2a2 	rbit	r2, r2
 8000f96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f9e:	fab2 f282 	clz	r2, r2
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	f042 0220 	orr.w	r2, r2, #32
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	f002 021f 	and.w	r2, r2, #31
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ab      	bne.n	8000f12 <HAL_RCC_OscConfig+0x23a>
 8000fba:	e002      	b.n	8000fc2 <HAL_RCC_OscConfig+0x2ea>
 8000fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 8170 	beq.w	80012b2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd2:	4bd0      	ldr	r3, [pc, #832]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fde:	4bcd      	ldr	r3, [pc, #820]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d16d      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3ee>
 8000fea:	4bca      	ldr	r3, [pc, #808]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff6:	d166      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3ee>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800100a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	095b      	lsrs	r3, r3, #5
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d102      	bne.n	8001028 <HAL_RCC_OscConfig+0x350>
 8001022:	4bbc      	ldr	r3, [pc, #752]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	e013      	b.n	8001050 <HAL_RCC_OscConfig+0x378>
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001040:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800104c:	4bb1      	ldr	r3, [pc, #708]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	2202      	movs	r2, #2
 8001052:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001056:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800105a:	fa92 f2a2 	rbit	r2, r2
 800105e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001062:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001066:	fab2 f282 	clz	r2, r2
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	f042 0220 	orr.w	r2, r2, #32
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f002 021f 	and.w	r2, r2, #31
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0x3ba>
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	f000 bd31 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4ba0      	ldr	r3, [pc, #640]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	21f8      	movs	r1, #248	; 0xf8
 80010a2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010aa:	fa91 f1a1 	rbit	r1, r1
 80010ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010b6:	fab1 f181 	clz	r1, r1
 80010ba:	b2c9      	uxtb	r1, r1
 80010bc:	408b      	lsls	r3, r1
 80010be:	4995      	ldr	r1, [pc, #596]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c4:	e0f5      	b.n	80012b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8085 	beq.w	80011dc <HAL_RCC_OscConfig+0x504>
 80010d2:	2301      	movs	r3, #1
 80010d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80010e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	461a      	mov	r2, r3
 80010fa:	2301      	movs	r3, #1
 80010fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fb1b 	bl	8000738 <HAL_GetTick>
 8001102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001106:	e00a      	b.n	800111e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fb16 	bl	8000738 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d902      	bls.n	800111e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	f000 bceb 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001130:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <HAL_RCC_OscConfig+0x476>
 8001148:	4b72      	ldr	r3, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	e013      	b.n	8001176 <HAL_RCC_OscConfig+0x49e>
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001166:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001172:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	2202      	movs	r2, #2
 8001178:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800117c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001180:	fa92 f2a2 	rbit	r2, r2
 8001184:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001188:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800118c:	fab2 f282 	clz	r2, r2
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f002 021f 	and.w	r2, r2, #31
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0af      	beq.n	8001108 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	21f8      	movs	r1, #248	; 0xf8
 80011b8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011c0:	fa91 f1a1 	rbit	r1, r1
 80011c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011cc:	fab1 f181 	clz	r1, r1
 80011d0:	b2c9      	uxtb	r1, r1
 80011d2:	408b      	lsls	r3, r1
 80011d4:	494f      	ldr	r1, [pc, #316]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
 80011da:	e06a      	b.n	80012b2 <HAL_RCC_OscConfig+0x5da>
 80011dc:	2301      	movs	r3, #1
 80011de:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80011ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	461a      	mov	r2, r3
 8001204:	2300      	movs	r3, #0
 8001206:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fa96 	bl	8000738 <HAL_GetTick>
 800120c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fa91 	bl	8000738 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d902      	bls.n	8001228 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	f000 bc66 	b.w	8001af4 <HAL_RCC_OscConfig+0xe1c>
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800123a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	095b      	lsrs	r3, r3, #5
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <HAL_RCC_OscConfig+0x580>
 8001252:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	e013      	b.n	8001280 <HAL_RCC_OscConfig+0x5a8>
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001270:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_RCC_OscConfig+0x63c>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	2202      	movs	r2, #2
 8001282:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001286:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800128a:	fa92 f2a2 	rbit	r2, r2
 800128e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001292:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001296:	fab2 f282 	clz	r2, r2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	f002 021f 	and.w	r2, r2, #31
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1af      	bne.n	8001212 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80da 	beq.w	8001476 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d069      	beq.n	80013a0 <HAL_RCC_OscConfig+0x6c8>
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80012de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x640>)
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	461a      	mov	r2, r3
 80012f2:	2301      	movs	r3, #1
 80012f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fa1f 	bl	8000738 <HAL_GetTick>
 80012fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e00d      	b.n	800131c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fa1a 	bl	8000738 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d905      	bls.n	800131c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e3ef      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 8001314:	40021000 	.word	0x40021000
 8001318:	10908120 	.word	0x10908120
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001334:	2202      	movs	r2, #2
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	fa93 f2a3 	rbit	r2, r3
 8001342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800134c:	2202      	movs	r2, #2
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800135e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001360:	4ba4      	ldr	r3, [pc, #656]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001364:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001368:	2102      	movs	r1, #2
 800136a:	6019      	str	r1, [r3, #0]
 800136c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	fa93 f1a3 	rbit	r1, r3
 8001376:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800137a:	6019      	str	r1, [r3, #0]
  return result;
 800137c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0b0      	beq.n	8001300 <HAL_RCC_OscConfig+0x628>
 800139e:	e06a      	b.n	8001476 <HAL_RCC_OscConfig+0x79e>
 80013a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f2a3 	rbit	r2, r3
 80013b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013b6:	601a      	str	r2, [r3, #0]
  return result;
 80013b8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <HAL_RCC_OscConfig+0x920>)
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	461a      	mov	r2, r3
 80013ce:	2300      	movs	r3, #0
 80013d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff f9b1 	bl	8000738 <HAL_GetTick>
 80013d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013da:	e009      	b.n	80013f0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff f9ac 	bl	8000738 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e381      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 80013f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013f4:	2202      	movs	r2, #2
 80013f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140c:	2202      	movs	r2, #2
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001436:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001440:	2102      	movs	r1, #2
 8001442:	6019      	str	r1, [r3, #0]
 8001444:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f1a3 	rbit	r1, r3
 800144e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001452:	6019      	str	r1, [r3, #0]
  return result;
 8001454:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1b2      	bne.n	80013dc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8157 	beq.w	8001734 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	61d3      	str	r3, [r2, #28]
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_RCC_OscConfig+0x924>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d11a      	bne.n	8001500 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x924>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_RCC_OscConfig+0x924>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f92f 	bl	8000738 <HAL_GetTick>
 80014da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	e009      	b.n	80014f4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e0:	f7ff f92a 	bl	8000738 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e2ff      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x924>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ef      	beq.n	80014e0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x840>
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	e02f      	b.n	8001578 <HAL_RCC_OscConfig+0x8a0>
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x864>
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a33      	ldr	r2, [pc, #204]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0x8a0>
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x888>
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x8a0>
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06a      	beq.n	8001658 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff f8d9 	bl	8000738 <HAL_GetTick>
 8001586:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff f8d4 	bl	8000738 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e2a7      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 80015a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015d2:	601a      	str	r2, [r3, #0]
  return result;
 80015d4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d108      	bne.n	8001600 <HAL_RCC_OscConfig+0x928>
 80015ee:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <HAL_RCC_OscConfig+0x91c>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	e013      	b.n	800161c <HAL_RCC_OscConfig+0x944>
 80015f4:	40021000 	.word	0x40021000
 80015f8:	10908120 	.word	0x10908120
 80015fc:	40007000 	.word	0x40007000
 8001600:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001604:	2202      	movs	r2, #2
 8001606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fa93 f2a3 	rbit	r2, r3
 8001612:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	4bc0      	ldr	r3, [pc, #768]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001620:	2102      	movs	r1, #2
 8001622:	6011      	str	r1, [r2, #0]
 8001624:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	fa92 f1a2 	rbit	r1, r2
 800162e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001632:	6011      	str	r1, [r2, #0]
  return result;
 8001634:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	fab2 f282 	clz	r2, r2
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f002 021f 	and.w	r2, r2, #31
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d09a      	beq.n	800158c <HAL_RCC_OscConfig+0x8b4>
 8001656:	e063      	b.n	8001720 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff f86e 	bl	8000738 <HAL_GetTick>
 800165c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff f869 	bl	8000738 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e23c      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 800167a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800167e:	2202      	movs	r2, #2
 8001680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	fa93 f2a3 	rbit	r2, r3
 80016a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016a8:	601a      	str	r2, [r3, #0]
  return result;
 80016aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x9f2>
 80016c4:	4b95      	ldr	r3, [pc, #596]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	e00d      	b.n	80016e6 <HAL_RCC_OscConfig+0xa0e>
 80016ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016ce:	2202      	movs	r2, #2
 80016d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016ea:	2102      	movs	r1, #2
 80016ec:	6011      	str	r1, [r2, #0]
 80016ee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	fa92 f1a2 	rbit	r1, r2
 80016f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016fc:	6011      	str	r1, [r2, #0]
  return result;
 80016fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f002 021f 	and.w	r2, r2, #31
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1a0      	bne.n	8001662 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001720:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4a7b      	ldr	r2, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001732:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 81d9 	beq.w	8001af2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	f000 81a6 	beq.w	8001a9a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b02      	cmp	r3, #2
 8001756:	f040 811e 	bne.w	8001996 <HAL_RCC_OscConfig+0xcbe>
 800175a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800175e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001772:	601a      	str	r2, [r3, #0]
  return result;
 8001774:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001778:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001784:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7fe ffd2 	bl	8000738 <HAL_GetTick>
 8001794:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	e009      	b.n	80017ae <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7fe ffcd 	bl	8000738 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1a2      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 80017ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017c6:	601a      	str	r2, [r3, #0]
  return result;
 80017c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0xb10>
 80017e2:	4b4e      	ldr	r3, [pc, #312]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e01b      	b.n	8001820 <HAL_RCC_OscConfig+0xb48>
 80017e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	fa92 f1a2 	rbit	r1, r2
 8001834:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001838:	6011      	str	r1, [r2, #0]
  return result;
 800183a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d19e      	bne.n	800179a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	f023 020f 	bic.w	r2, r3, #15
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	492c      	ldr	r1, [pc, #176]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 800186c:	4313      	orrs	r3, r2
 800186e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6a19      	ldr	r1, [r3, #32]
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	430b      	orrs	r3, r1
 8001886:	4925      	ldr	r1, [pc, #148]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
 800188c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a4:	601a      	str	r2, [r3, #0]
  return result;
 80018a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018aa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	461a      	mov	r2, r3
 80018be:	2301      	movs	r3, #1
 80018c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7fe ff39 	bl	8000738 <HAL_GetTick>
 80018c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ca:	e009      	b.n	80018e0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe ff34 	bl	8000738 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e109      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 80018e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018f8:	601a      	str	r2, [r3, #0]
  return result;
 80018fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0xc48>
 8001914:	4b01      	ldr	r3, [pc, #4]	; (800191c <HAL_RCC_OscConfig+0xc44>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e01e      	b.n	8001958 <HAL_RCC_OscConfig+0xc80>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800193e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_OscConfig+0xe28>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800195c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001960:	6011      	str	r1, [r2, #0]
 8001962:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fa92 f1a2 	rbit	r1, r2
 800196c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001970:	6011      	str	r1, [r2, #0]
  return result;
 8001972:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d09b      	beq.n	80018cc <HAL_RCC_OscConfig+0xbf4>
 8001994:	e0ad      	b.n	8001af2 <HAL_RCC_OscConfig+0xe1a>
 8001996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800199a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ae:	601a      	str	r2, [r3, #0]
  return result;
 80019b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	461a      	mov	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe feb4 	bl	8000738 <HAL_GetTick>
 80019d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7fe feaf 	bl	8000738 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e084      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	601a      	str	r2, [r3, #0]
  return result;
 8001a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0xd4c>
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_OscConfig+0xe28>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e01b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd84>
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_RCC_OscConfig+0xe28>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f107 0214 	add.w	r2, r7, #20
 8001a60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	f107 0214 	add.w	r2, r7, #20
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fa92 f1a2 	rbit	r1, r2
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	6011      	str	r1, [r2, #0]
  return result;
 8001a76:	f107 0210 	add.w	r2, r7, #16
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f042 0220 	orr.w	r2, r2, #32
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d19e      	bne.n	80019d6 <HAL_RCC_OscConfig+0xcfe>
 8001a98:	e02b      	b.n	8001af2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e025      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0xe28>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0xe28>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ab8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001abc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d111      	bne.n	8001aee <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001aca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d108      	bne.n	8001aee <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae0:	f003 020f 	and.w	r2, r3, #15
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09e      	sub	sp, #120	; 0x78
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e162      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b90      	ldr	r3, [pc, #576]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d910      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b8d      	ldr	r3, [pc, #564]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0207 	bic.w	r2, r3, #7
 8001b32:	498b      	ldr	r1, [pc, #556]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e14a      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b82      	ldr	r3, [pc, #520]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	497f      	ldr	r1, [pc, #508]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80dc 	beq.w	8001d30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d13c      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xf6>
 8001b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_ClockConfig+0xa6>
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	e00f      	b.n	8001bca <HAL_RCC_ClockConfig+0xc6>
 8001baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8001bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bce:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bd2:	fa92 f2a2 	rbit	r2, r2
 8001bd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0220 	orr.w	r2, r2, #32
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d17b      	bne.n	8001cee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0f3      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d13c      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x178>
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x128>
 8001c26:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_ClockConfig+0x148>
 8001c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c48:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c54:	fa92 f2a2 	rbit	r2, r2
 8001c58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d13a      	bne.n	8001cee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0b2      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1a0>
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e00d      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x1bc>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	61ba      	str	r2, [r7, #24]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	fa92 f2a2 	rbit	r2, r2
 8001cca:	617a      	str	r2, [r7, #20]
  return result;
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	fab2 f282 	clz	r2, r2
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f042 0220 	orr.w	r2, r2, #32
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f002 021f 	and.w	r2, r2, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e079      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	491a      	ldr	r1, [pc, #104]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7fe fd1a 	bl	8000738 <HAL_GetTick>
 8001d04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7fe fd16 	bl	8000738 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e061      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d214      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4906      	ldr	r1, [pc, #24]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <HAL_RCC_ClockConfig+0x25c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e040      	b.n	8001de2 <HAL_RCC_ClockConfig+0x2de>
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCC_ClockConfig+0x2e8>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	491a      	ldr	r1, [pc, #104]	; (8001dec <HAL_RCC_ClockConfig+0x2e8>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_RCC_ClockConfig+0x2e8>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4912      	ldr	r1, [pc, #72]	; (8001dec <HAL_RCC_ClockConfig+0x2e8>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001da6:	f000 f829 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001daa:	4601      	mov	r1, r0
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_RCC_ClockConfig+0x2e8>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	22f0      	movs	r2, #240	; 0xf0
 8001db6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	60fa      	str	r2, [r7, #12]
  return result;
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	40d3      	lsrs	r3, r2
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x2ec>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_RCC_ClockConfig+0x2f0>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_RCC_ClockConfig+0x2f4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fc68 	bl	80006b0 <HAL_InitTick>
  
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3778      	adds	r7, #120	; 0x78
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08002d28 	.word	0x08002d28
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
 8001e00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x30>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x36>
 8001e2a:	e03f      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e2e:	623b      	str	r3, [r7, #32]
      break;
 8001e30:	e03f      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	fa92 f2a2 	rbit	r2, r2
 8001e44:	607a      	str	r2, [r7, #4]
  return result;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	40d3      	lsrs	r3, r2
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	220f      	movs	r2, #15
 8001e60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	fa92 f2a2 	rbit	r2, r2
 8001e68:	60fa      	str	r2, [r7, #12]
  return result;
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	40d3      	lsrs	r3, r2
 8001e74:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e84:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
 8001e94:	e007      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	623b      	str	r3, [r7, #32]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eae:	623b      	str	r3, [r7, #32]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	372c      	adds	r7, #44	; 0x2c
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	08002d38 	.word	0x08002d38
 8001ecc:	08002d48 	.word	0x08002d48

08001ed0 <__errno>:
 8001ed0:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <__errno+0x8>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	2000000c 	.word	0x2000000c

08001edc <__libc_init_array>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	4e0d      	ldr	r6, [pc, #52]	; (8001f14 <__libc_init_array+0x38>)
 8001ee0:	4c0d      	ldr	r4, [pc, #52]	; (8001f18 <__libc_init_array+0x3c>)
 8001ee2:	1ba4      	subs	r4, r4, r6
 8001ee4:	10a4      	asrs	r4, r4, #2
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	42a5      	cmp	r5, r4
 8001eea:	d109      	bne.n	8001f00 <__libc_init_array+0x24>
 8001eec:	4e0b      	ldr	r6, [pc, #44]	; (8001f1c <__libc_init_array+0x40>)
 8001eee:	4c0c      	ldr	r4, [pc, #48]	; (8001f20 <__libc_init_array+0x44>)
 8001ef0:	f000 ff04 	bl	8002cfc <_init>
 8001ef4:	1ba4      	subs	r4, r4, r6
 8001ef6:	10a4      	asrs	r4, r4, #2
 8001ef8:	2500      	movs	r5, #0
 8001efa:	42a5      	cmp	r5, r4
 8001efc:	d105      	bne.n	8001f0a <__libc_init_array+0x2e>
 8001efe:	bd70      	pop	{r4, r5, r6, pc}
 8001f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f04:	4798      	blx	r3
 8001f06:	3501      	adds	r5, #1
 8001f08:	e7ee      	b.n	8001ee8 <__libc_init_array+0xc>
 8001f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f0e:	4798      	blx	r3
 8001f10:	3501      	adds	r5, #1
 8001f12:	e7f2      	b.n	8001efa <__libc_init_array+0x1e>
 8001f14:	08002df0 	.word	0x08002df0
 8001f18:	08002df0 	.word	0x08002df0
 8001f1c:	08002df0 	.word	0x08002df0
 8001f20:	08002df4 	.word	0x08002df4

08001f24 <memset>:
 8001f24:	4402      	add	r2, r0
 8001f26:	4603      	mov	r3, r0
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <memset+0xa>
 8001f2c:	4770      	bx	lr
 8001f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f32:	e7f9      	b.n	8001f28 <memset+0x4>

08001f34 <iprintf>:
 8001f34:	b40f      	push	{r0, r1, r2, r3}
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <iprintf+0x2c>)
 8001f38:	b513      	push	{r0, r1, r4, lr}
 8001f3a:	681c      	ldr	r4, [r3, #0]
 8001f3c:	b124      	cbz	r4, 8001f48 <iprintf+0x14>
 8001f3e:	69a3      	ldr	r3, [r4, #24]
 8001f40:	b913      	cbnz	r3, 8001f48 <iprintf+0x14>
 8001f42:	4620      	mov	r0, r4
 8001f44:	f000 f84e 	bl	8001fe4 <__sinit>
 8001f48:	ab05      	add	r3, sp, #20
 8001f4a:	9a04      	ldr	r2, [sp, #16]
 8001f4c:	68a1      	ldr	r1, [r4, #8]
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	4620      	mov	r0, r4
 8001f52:	f000 f955 	bl	8002200 <_vfiprintf_r>
 8001f56:	b002      	add	sp, #8
 8001f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5c:	b004      	add	sp, #16
 8001f5e:	4770      	bx	lr
 8001f60:	2000000c 	.word	0x2000000c

08001f64 <std>:
 8001f64:	2300      	movs	r3, #0
 8001f66:	b510      	push	{r4, lr}
 8001f68:	4604      	mov	r4, r0
 8001f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8001f6e:	6083      	str	r3, [r0, #8]
 8001f70:	8181      	strh	r1, [r0, #12]
 8001f72:	6643      	str	r3, [r0, #100]	; 0x64
 8001f74:	81c2      	strh	r2, [r0, #14]
 8001f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f7a:	6183      	str	r3, [r0, #24]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2208      	movs	r2, #8
 8001f80:	305c      	adds	r0, #92	; 0x5c
 8001f82:	f7ff ffcf 	bl	8001f24 <memset>
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <std+0x38>)
 8001f88:	6263      	str	r3, [r4, #36]	; 0x24
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <std+0x3c>)
 8001f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <std+0x40>)
 8001f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <std+0x44>)
 8001f94:	6224      	str	r4, [r4, #32]
 8001f96:	6323      	str	r3, [r4, #48]	; 0x30
 8001f98:	bd10      	pop	{r4, pc}
 8001f9a:	bf00      	nop
 8001f9c:	0800275d 	.word	0x0800275d
 8001fa0:	0800277f 	.word	0x0800277f
 8001fa4:	080027b7 	.word	0x080027b7
 8001fa8:	080027db 	.word	0x080027db

08001fac <_cleanup_r>:
 8001fac:	4901      	ldr	r1, [pc, #4]	; (8001fb4 <_cleanup_r+0x8>)
 8001fae:	f000 b885 	b.w	80020bc <_fwalk_reent>
 8001fb2:	bf00      	nop
 8001fb4:	08002ab5 	.word	0x08002ab5

08001fb8 <__sfmoreglue>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	1e4a      	subs	r2, r1, #1
 8001fbc:	2568      	movs	r5, #104	; 0x68
 8001fbe:	4355      	muls	r5, r2
 8001fc0:	460e      	mov	r6, r1
 8001fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fc6:	f000 f897 	bl	80020f8 <_malloc_r>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	b140      	cbz	r0, 8001fe0 <__sfmoreglue+0x28>
 8001fce:	2100      	movs	r1, #0
 8001fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8001fd4:	300c      	adds	r0, #12
 8001fd6:	60a0      	str	r0, [r4, #8]
 8001fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fdc:	f7ff ffa2 	bl	8001f24 <memset>
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}

08001fe4 <__sinit>:
 8001fe4:	6983      	ldr	r3, [r0, #24]
 8001fe6:	b510      	push	{r4, lr}
 8001fe8:	4604      	mov	r4, r0
 8001fea:	bb33      	cbnz	r3, 800203a <__sinit+0x56>
 8001fec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001ff0:	6503      	str	r3, [r0, #80]	; 0x50
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <__sinit+0x58>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <__sinit+0x5c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6282      	str	r2, [r0, #40]	; 0x28
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	bf04      	itt	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	6183      	streq	r3, [r0, #24]
 8002002:	f000 f81f 	bl	8002044 <__sfp>
 8002006:	6060      	str	r0, [r4, #4]
 8002008:	4620      	mov	r0, r4
 800200a:	f000 f81b 	bl	8002044 <__sfp>
 800200e:	60a0      	str	r0, [r4, #8]
 8002010:	4620      	mov	r0, r4
 8002012:	f000 f817 	bl	8002044 <__sfp>
 8002016:	2200      	movs	r2, #0
 8002018:	60e0      	str	r0, [r4, #12]
 800201a:	2104      	movs	r1, #4
 800201c:	6860      	ldr	r0, [r4, #4]
 800201e:	f7ff ffa1 	bl	8001f64 <std>
 8002022:	2201      	movs	r2, #1
 8002024:	2109      	movs	r1, #9
 8002026:	68a0      	ldr	r0, [r4, #8]
 8002028:	f7ff ff9c 	bl	8001f64 <std>
 800202c:	2202      	movs	r2, #2
 800202e:	2112      	movs	r1, #18
 8002030:	68e0      	ldr	r0, [r4, #12]
 8002032:	f7ff ff97 	bl	8001f64 <std>
 8002036:	2301      	movs	r3, #1
 8002038:	61a3      	str	r3, [r4, #24]
 800203a:	bd10      	pop	{r4, pc}
 800203c:	08002d58 	.word	0x08002d58
 8002040:	08001fad 	.word	0x08001fad

08002044 <__sfp>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <__sfp+0x70>)
 8002048:	681e      	ldr	r6, [r3, #0]
 800204a:	69b3      	ldr	r3, [r6, #24]
 800204c:	4607      	mov	r7, r0
 800204e:	b913      	cbnz	r3, 8002056 <__sfp+0x12>
 8002050:	4630      	mov	r0, r6
 8002052:	f7ff ffc7 	bl	8001fe4 <__sinit>
 8002056:	3648      	adds	r6, #72	; 0x48
 8002058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800205c:	3b01      	subs	r3, #1
 800205e:	d503      	bpl.n	8002068 <__sfp+0x24>
 8002060:	6833      	ldr	r3, [r6, #0]
 8002062:	b133      	cbz	r3, 8002072 <__sfp+0x2e>
 8002064:	6836      	ldr	r6, [r6, #0]
 8002066:	e7f7      	b.n	8002058 <__sfp+0x14>
 8002068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800206c:	b16d      	cbz	r5, 800208a <__sfp+0x46>
 800206e:	3468      	adds	r4, #104	; 0x68
 8002070:	e7f4      	b.n	800205c <__sfp+0x18>
 8002072:	2104      	movs	r1, #4
 8002074:	4638      	mov	r0, r7
 8002076:	f7ff ff9f 	bl	8001fb8 <__sfmoreglue>
 800207a:	6030      	str	r0, [r6, #0]
 800207c:	2800      	cmp	r0, #0
 800207e:	d1f1      	bne.n	8002064 <__sfp+0x20>
 8002080:	230c      	movs	r3, #12
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4604      	mov	r4, r0
 8002086:	4620      	mov	r0, r4
 8002088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <__sfp+0x74>)
 800208c:	6665      	str	r5, [r4, #100]	; 0x64
 800208e:	e9c4 5500 	strd	r5, r5, [r4]
 8002092:	60a5      	str	r5, [r4, #8]
 8002094:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002098:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800209c:	2208      	movs	r2, #8
 800209e:	4629      	mov	r1, r5
 80020a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020a4:	f7ff ff3e 	bl	8001f24 <memset>
 80020a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020b0:	e7e9      	b.n	8002086 <__sfp+0x42>
 80020b2:	bf00      	nop
 80020b4:	08002d58 	.word	0x08002d58
 80020b8:	ffff0001 	.word	0xffff0001

080020bc <_fwalk_reent>:
 80020bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020c0:	4680      	mov	r8, r0
 80020c2:	4689      	mov	r9, r1
 80020c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80020c8:	2600      	movs	r6, #0
 80020ca:	b914      	cbnz	r4, 80020d2 <_fwalk_reent+0x16>
 80020cc:	4630      	mov	r0, r6
 80020ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80020d6:	3f01      	subs	r7, #1
 80020d8:	d501      	bpl.n	80020de <_fwalk_reent+0x22>
 80020da:	6824      	ldr	r4, [r4, #0]
 80020dc:	e7f5      	b.n	80020ca <_fwalk_reent+0xe>
 80020de:	89ab      	ldrh	r3, [r5, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d907      	bls.n	80020f4 <_fwalk_reent+0x38>
 80020e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020e8:	3301      	adds	r3, #1
 80020ea:	d003      	beq.n	80020f4 <_fwalk_reent+0x38>
 80020ec:	4629      	mov	r1, r5
 80020ee:	4640      	mov	r0, r8
 80020f0:	47c8      	blx	r9
 80020f2:	4306      	orrs	r6, r0
 80020f4:	3568      	adds	r5, #104	; 0x68
 80020f6:	e7ee      	b.n	80020d6 <_fwalk_reent+0x1a>

080020f8 <_malloc_r>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	1ccd      	adds	r5, r1, #3
 80020fc:	f025 0503 	bic.w	r5, r5, #3
 8002100:	3508      	adds	r5, #8
 8002102:	2d0c      	cmp	r5, #12
 8002104:	bf38      	it	cc
 8002106:	250c      	movcc	r5, #12
 8002108:	2d00      	cmp	r5, #0
 800210a:	4606      	mov	r6, r0
 800210c:	db01      	blt.n	8002112 <_malloc_r+0x1a>
 800210e:	42a9      	cmp	r1, r5
 8002110:	d903      	bls.n	800211a <_malloc_r+0x22>
 8002112:	230c      	movs	r3, #12
 8002114:	6033      	str	r3, [r6, #0]
 8002116:	2000      	movs	r0, #0
 8002118:	bd70      	pop	{r4, r5, r6, pc}
 800211a:	f000 fd6b 	bl	8002bf4 <__malloc_lock>
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <_malloc_r+0xac>)
 8002120:	6814      	ldr	r4, [r2, #0]
 8002122:	4621      	mov	r1, r4
 8002124:	b991      	cbnz	r1, 800214c <_malloc_r+0x54>
 8002126:	4c20      	ldr	r4, [pc, #128]	; (80021a8 <_malloc_r+0xb0>)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	b91b      	cbnz	r3, 8002134 <_malloc_r+0x3c>
 800212c:	4630      	mov	r0, r6
 800212e:	f000 fb05 	bl	800273c <_sbrk_r>
 8002132:	6020      	str	r0, [r4, #0]
 8002134:	4629      	mov	r1, r5
 8002136:	4630      	mov	r0, r6
 8002138:	f000 fb00 	bl	800273c <_sbrk_r>
 800213c:	1c43      	adds	r3, r0, #1
 800213e:	d124      	bne.n	800218a <_malloc_r+0x92>
 8002140:	230c      	movs	r3, #12
 8002142:	6033      	str	r3, [r6, #0]
 8002144:	4630      	mov	r0, r6
 8002146:	f000 fd56 	bl	8002bf6 <__malloc_unlock>
 800214a:	e7e4      	b.n	8002116 <_malloc_r+0x1e>
 800214c:	680b      	ldr	r3, [r1, #0]
 800214e:	1b5b      	subs	r3, r3, r5
 8002150:	d418      	bmi.n	8002184 <_malloc_r+0x8c>
 8002152:	2b0b      	cmp	r3, #11
 8002154:	d90f      	bls.n	8002176 <_malloc_r+0x7e>
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	50cd      	str	r5, [r1, r3]
 800215a:	18cc      	adds	r4, r1, r3
 800215c:	4630      	mov	r0, r6
 800215e:	f000 fd4a 	bl	8002bf6 <__malloc_unlock>
 8002162:	f104 000b 	add.w	r0, r4, #11
 8002166:	1d23      	adds	r3, r4, #4
 8002168:	f020 0007 	bic.w	r0, r0, #7
 800216c:	1ac3      	subs	r3, r0, r3
 800216e:	d0d3      	beq.n	8002118 <_malloc_r+0x20>
 8002170:	425a      	negs	r2, r3
 8002172:	50e2      	str	r2, [r4, r3]
 8002174:	e7d0      	b.n	8002118 <_malloc_r+0x20>
 8002176:	428c      	cmp	r4, r1
 8002178:	684b      	ldr	r3, [r1, #4]
 800217a:	bf16      	itet	ne
 800217c:	6063      	strne	r3, [r4, #4]
 800217e:	6013      	streq	r3, [r2, #0]
 8002180:	460c      	movne	r4, r1
 8002182:	e7eb      	b.n	800215c <_malloc_r+0x64>
 8002184:	460c      	mov	r4, r1
 8002186:	6849      	ldr	r1, [r1, #4]
 8002188:	e7cc      	b.n	8002124 <_malloc_r+0x2c>
 800218a:	1cc4      	adds	r4, r0, #3
 800218c:	f024 0403 	bic.w	r4, r4, #3
 8002190:	42a0      	cmp	r0, r4
 8002192:	d005      	beq.n	80021a0 <_malloc_r+0xa8>
 8002194:	1a21      	subs	r1, r4, r0
 8002196:	4630      	mov	r0, r6
 8002198:	f000 fad0 	bl	800273c <_sbrk_r>
 800219c:	3001      	adds	r0, #1
 800219e:	d0cf      	beq.n	8002140 <_malloc_r+0x48>
 80021a0:	6025      	str	r5, [r4, #0]
 80021a2:	e7db      	b.n	800215c <_malloc_r+0x64>
 80021a4:	20000094 	.word	0x20000094
 80021a8:	20000098 	.word	0x20000098

080021ac <__sfputc_r>:
 80021ac:	6893      	ldr	r3, [r2, #8]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	b410      	push	{r4}
 80021b4:	6093      	str	r3, [r2, #8]
 80021b6:	da08      	bge.n	80021ca <__sfputc_r+0x1e>
 80021b8:	6994      	ldr	r4, [r2, #24]
 80021ba:	42a3      	cmp	r3, r4
 80021bc:	db01      	blt.n	80021c2 <__sfputc_r+0x16>
 80021be:	290a      	cmp	r1, #10
 80021c0:	d103      	bne.n	80021ca <__sfputc_r+0x1e>
 80021c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c6:	f000 bb0d 	b.w	80027e4 <__swbuf_r>
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	1c58      	adds	r0, r3, #1
 80021ce:	6010      	str	r0, [r2, #0]
 80021d0:	7019      	strb	r1, [r3, #0]
 80021d2:	4608      	mov	r0, r1
 80021d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021d8:	4770      	bx	lr

080021da <__sfputs_r>:
 80021da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021dc:	4606      	mov	r6, r0
 80021de:	460f      	mov	r7, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	18d5      	adds	r5, r2, r3
 80021e4:	42ac      	cmp	r4, r5
 80021e6:	d101      	bne.n	80021ec <__sfputs_r+0x12>
 80021e8:	2000      	movs	r0, #0
 80021ea:	e007      	b.n	80021fc <__sfputs_r+0x22>
 80021ec:	463a      	mov	r2, r7
 80021ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021f2:	4630      	mov	r0, r6
 80021f4:	f7ff ffda 	bl	80021ac <__sfputc_r>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d1f3      	bne.n	80021e4 <__sfputs_r+0xa>
 80021fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002200 <_vfiprintf_r>:
 8002200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002204:	460c      	mov	r4, r1
 8002206:	b09d      	sub	sp, #116	; 0x74
 8002208:	4617      	mov	r7, r2
 800220a:	461d      	mov	r5, r3
 800220c:	4606      	mov	r6, r0
 800220e:	b118      	cbz	r0, 8002218 <_vfiprintf_r+0x18>
 8002210:	6983      	ldr	r3, [r0, #24]
 8002212:	b90b      	cbnz	r3, 8002218 <_vfiprintf_r+0x18>
 8002214:	f7ff fee6 	bl	8001fe4 <__sinit>
 8002218:	4b7c      	ldr	r3, [pc, #496]	; (800240c <_vfiprintf_r+0x20c>)
 800221a:	429c      	cmp	r4, r3
 800221c:	d158      	bne.n	80022d0 <_vfiprintf_r+0xd0>
 800221e:	6874      	ldr	r4, [r6, #4]
 8002220:	89a3      	ldrh	r3, [r4, #12]
 8002222:	0718      	lsls	r0, r3, #28
 8002224:	d55e      	bpl.n	80022e4 <_vfiprintf_r+0xe4>
 8002226:	6923      	ldr	r3, [r4, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05b      	beq.n	80022e4 <_vfiprintf_r+0xe4>
 800222c:	2300      	movs	r3, #0
 800222e:	9309      	str	r3, [sp, #36]	; 0x24
 8002230:	2320      	movs	r3, #32
 8002232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002236:	2330      	movs	r3, #48	; 0x30
 8002238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800223c:	9503      	str	r5, [sp, #12]
 800223e:	f04f 0b01 	mov.w	fp, #1
 8002242:	46b8      	mov	r8, r7
 8002244:	4645      	mov	r5, r8
 8002246:	f815 3b01 	ldrb.w	r3, [r5], #1
 800224a:	b10b      	cbz	r3, 8002250 <_vfiprintf_r+0x50>
 800224c:	2b25      	cmp	r3, #37	; 0x25
 800224e:	d154      	bne.n	80022fa <_vfiprintf_r+0xfa>
 8002250:	ebb8 0a07 	subs.w	sl, r8, r7
 8002254:	d00b      	beq.n	800226e <_vfiprintf_r+0x6e>
 8002256:	4653      	mov	r3, sl
 8002258:	463a      	mov	r2, r7
 800225a:	4621      	mov	r1, r4
 800225c:	4630      	mov	r0, r6
 800225e:	f7ff ffbc 	bl	80021da <__sfputs_r>
 8002262:	3001      	adds	r0, #1
 8002264:	f000 80c2 	beq.w	80023ec <_vfiprintf_r+0x1ec>
 8002268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800226a:	4453      	add	r3, sl
 800226c:	9309      	str	r3, [sp, #36]	; 0x24
 800226e:	f898 3000 	ldrb.w	r3, [r8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80ba 	beq.w	80023ec <_vfiprintf_r+0x1ec>
 8002278:	2300      	movs	r3, #0
 800227a:	f04f 32ff 	mov.w	r2, #4294967295
 800227e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002282:	9304      	str	r3, [sp, #16]
 8002284:	9307      	str	r3, [sp, #28]
 8002286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800228a:	931a      	str	r3, [sp, #104]	; 0x68
 800228c:	46a8      	mov	r8, r5
 800228e:	2205      	movs	r2, #5
 8002290:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002294:	485e      	ldr	r0, [pc, #376]	; (8002410 <_vfiprintf_r+0x210>)
 8002296:	f7fd ffa3 	bl	80001e0 <memchr>
 800229a:	9b04      	ldr	r3, [sp, #16]
 800229c:	bb78      	cbnz	r0, 80022fe <_vfiprintf_r+0xfe>
 800229e:	06d9      	lsls	r1, r3, #27
 80022a0:	bf44      	itt	mi
 80022a2:	2220      	movmi	r2, #32
 80022a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022a8:	071a      	lsls	r2, r3, #28
 80022aa:	bf44      	itt	mi
 80022ac:	222b      	movmi	r2, #43	; 0x2b
 80022ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022b2:	782a      	ldrb	r2, [r5, #0]
 80022b4:	2a2a      	cmp	r2, #42	; 0x2a
 80022b6:	d02a      	beq.n	800230e <_vfiprintf_r+0x10e>
 80022b8:	9a07      	ldr	r2, [sp, #28]
 80022ba:	46a8      	mov	r8, r5
 80022bc:	2000      	movs	r0, #0
 80022be:	250a      	movs	r5, #10
 80022c0:	4641      	mov	r1, r8
 80022c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022c6:	3b30      	subs	r3, #48	; 0x30
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d969      	bls.n	80023a0 <_vfiprintf_r+0x1a0>
 80022cc:	b360      	cbz	r0, 8002328 <_vfiprintf_r+0x128>
 80022ce:	e024      	b.n	800231a <_vfiprintf_r+0x11a>
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <_vfiprintf_r+0x214>)
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d101      	bne.n	80022da <_vfiprintf_r+0xda>
 80022d6:	68b4      	ldr	r4, [r6, #8]
 80022d8:	e7a2      	b.n	8002220 <_vfiprintf_r+0x20>
 80022da:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <_vfiprintf_r+0x218>)
 80022dc:	429c      	cmp	r4, r3
 80022de:	bf08      	it	eq
 80022e0:	68f4      	ldreq	r4, [r6, #12]
 80022e2:	e79d      	b.n	8002220 <_vfiprintf_r+0x20>
 80022e4:	4621      	mov	r1, r4
 80022e6:	4630      	mov	r0, r6
 80022e8:	f000 fae0 	bl	80028ac <__swsetup_r>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d09d      	beq.n	800222c <_vfiprintf_r+0x2c>
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	b01d      	add	sp, #116	; 0x74
 80022f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022fa:	46a8      	mov	r8, r5
 80022fc:	e7a2      	b.n	8002244 <_vfiprintf_r+0x44>
 80022fe:	4a44      	ldr	r2, [pc, #272]	; (8002410 <_vfiprintf_r+0x210>)
 8002300:	1a80      	subs	r0, r0, r2
 8002302:	fa0b f000 	lsl.w	r0, fp, r0
 8002306:	4318      	orrs	r0, r3
 8002308:	9004      	str	r0, [sp, #16]
 800230a:	4645      	mov	r5, r8
 800230c:	e7be      	b.n	800228c <_vfiprintf_r+0x8c>
 800230e:	9a03      	ldr	r2, [sp, #12]
 8002310:	1d11      	adds	r1, r2, #4
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	9103      	str	r1, [sp, #12]
 8002316:	2a00      	cmp	r2, #0
 8002318:	db01      	blt.n	800231e <_vfiprintf_r+0x11e>
 800231a:	9207      	str	r2, [sp, #28]
 800231c:	e004      	b.n	8002328 <_vfiprintf_r+0x128>
 800231e:	4252      	negs	r2, r2
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	9207      	str	r2, [sp, #28]
 8002326:	9304      	str	r3, [sp, #16]
 8002328:	f898 3000 	ldrb.w	r3, [r8]
 800232c:	2b2e      	cmp	r3, #46	; 0x2e
 800232e:	d10e      	bne.n	800234e <_vfiprintf_r+0x14e>
 8002330:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002334:	2b2a      	cmp	r3, #42	; 0x2a
 8002336:	d138      	bne.n	80023aa <_vfiprintf_r+0x1aa>
 8002338:	9b03      	ldr	r3, [sp, #12]
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	9203      	str	r2, [sp, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	bfb8      	it	lt
 8002344:	f04f 33ff 	movlt.w	r3, #4294967295
 8002348:	f108 0802 	add.w	r8, r8, #2
 800234c:	9305      	str	r3, [sp, #20]
 800234e:	4d33      	ldr	r5, [pc, #204]	; (800241c <_vfiprintf_r+0x21c>)
 8002350:	f898 1000 	ldrb.w	r1, [r8]
 8002354:	2203      	movs	r2, #3
 8002356:	4628      	mov	r0, r5
 8002358:	f7fd ff42 	bl	80001e0 <memchr>
 800235c:	b140      	cbz	r0, 8002370 <_vfiprintf_r+0x170>
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	1b40      	subs	r0, r0, r5
 8002362:	fa03 f000 	lsl.w	r0, r3, r0
 8002366:	9b04      	ldr	r3, [sp, #16]
 8002368:	4303      	orrs	r3, r0
 800236a:	f108 0801 	add.w	r8, r8, #1
 800236e:	9304      	str	r3, [sp, #16]
 8002370:	f898 1000 	ldrb.w	r1, [r8]
 8002374:	482a      	ldr	r0, [pc, #168]	; (8002420 <_vfiprintf_r+0x220>)
 8002376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800237a:	2206      	movs	r2, #6
 800237c:	f108 0701 	add.w	r7, r8, #1
 8002380:	f7fd ff2e 	bl	80001e0 <memchr>
 8002384:	2800      	cmp	r0, #0
 8002386:	d037      	beq.n	80023f8 <_vfiprintf_r+0x1f8>
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <_vfiprintf_r+0x224>)
 800238a:	bb1b      	cbnz	r3, 80023d4 <_vfiprintf_r+0x1d4>
 800238c:	9b03      	ldr	r3, [sp, #12]
 800238e:	3307      	adds	r3, #7
 8002390:	f023 0307 	bic.w	r3, r3, #7
 8002394:	3308      	adds	r3, #8
 8002396:	9303      	str	r3, [sp, #12]
 8002398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800239a:	444b      	add	r3, r9
 800239c:	9309      	str	r3, [sp, #36]	; 0x24
 800239e:	e750      	b.n	8002242 <_vfiprintf_r+0x42>
 80023a0:	fb05 3202 	mla	r2, r5, r2, r3
 80023a4:	2001      	movs	r0, #1
 80023a6:	4688      	mov	r8, r1
 80023a8:	e78a      	b.n	80022c0 <_vfiprintf_r+0xc0>
 80023aa:	2300      	movs	r3, #0
 80023ac:	f108 0801 	add.w	r8, r8, #1
 80023b0:	9305      	str	r3, [sp, #20]
 80023b2:	4619      	mov	r1, r3
 80023b4:	250a      	movs	r5, #10
 80023b6:	4640      	mov	r0, r8
 80023b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023bc:	3a30      	subs	r2, #48	; 0x30
 80023be:	2a09      	cmp	r2, #9
 80023c0:	d903      	bls.n	80023ca <_vfiprintf_r+0x1ca>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0c3      	beq.n	800234e <_vfiprintf_r+0x14e>
 80023c6:	9105      	str	r1, [sp, #20]
 80023c8:	e7c1      	b.n	800234e <_vfiprintf_r+0x14e>
 80023ca:	fb05 2101 	mla	r1, r5, r1, r2
 80023ce:	2301      	movs	r3, #1
 80023d0:	4680      	mov	r8, r0
 80023d2:	e7f0      	b.n	80023b6 <_vfiprintf_r+0x1b6>
 80023d4:	ab03      	add	r3, sp, #12
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4622      	mov	r2, r4
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <_vfiprintf_r+0x228>)
 80023dc:	a904      	add	r1, sp, #16
 80023de:	4630      	mov	r0, r6
 80023e0:	f3af 8000 	nop.w
 80023e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80023e8:	4681      	mov	r9, r0
 80023ea:	d1d5      	bne.n	8002398 <_vfiprintf_r+0x198>
 80023ec:	89a3      	ldrh	r3, [r4, #12]
 80023ee:	065b      	lsls	r3, r3, #25
 80023f0:	f53f af7e 	bmi.w	80022f0 <_vfiprintf_r+0xf0>
 80023f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023f6:	e77d      	b.n	80022f4 <_vfiprintf_r+0xf4>
 80023f8:	ab03      	add	r3, sp, #12
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4622      	mov	r2, r4
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <_vfiprintf_r+0x228>)
 8002400:	a904      	add	r1, sp, #16
 8002402:	4630      	mov	r0, r6
 8002404:	f000 f888 	bl	8002518 <_printf_i>
 8002408:	e7ec      	b.n	80023e4 <_vfiprintf_r+0x1e4>
 800240a:	bf00      	nop
 800240c:	08002d7c 	.word	0x08002d7c
 8002410:	08002dbc 	.word	0x08002dbc
 8002414:	08002d9c 	.word	0x08002d9c
 8002418:	08002d5c 	.word	0x08002d5c
 800241c:	08002dc2 	.word	0x08002dc2
 8002420:	08002dc6 	.word	0x08002dc6
 8002424:	00000000 	.word	0x00000000
 8002428:	080021db 	.word	0x080021db

0800242c <_printf_common>:
 800242c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002430:	4691      	mov	r9, r2
 8002432:	461f      	mov	r7, r3
 8002434:	688a      	ldr	r2, [r1, #8]
 8002436:	690b      	ldr	r3, [r1, #16]
 8002438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800243c:	4293      	cmp	r3, r2
 800243e:	bfb8      	it	lt
 8002440:	4613      	movlt	r3, r2
 8002442:	f8c9 3000 	str.w	r3, [r9]
 8002446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800244a:	4606      	mov	r6, r0
 800244c:	460c      	mov	r4, r1
 800244e:	b112      	cbz	r2, 8002456 <_printf_common+0x2a>
 8002450:	3301      	adds	r3, #1
 8002452:	f8c9 3000 	str.w	r3, [r9]
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	0699      	lsls	r1, r3, #26
 800245a:	bf42      	ittt	mi
 800245c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002460:	3302      	addmi	r3, #2
 8002462:	f8c9 3000 	strmi.w	r3, [r9]
 8002466:	6825      	ldr	r5, [r4, #0]
 8002468:	f015 0506 	ands.w	r5, r5, #6
 800246c:	d107      	bne.n	800247e <_printf_common+0x52>
 800246e:	f104 0a19 	add.w	sl, r4, #25
 8002472:	68e3      	ldr	r3, [r4, #12]
 8002474:	f8d9 2000 	ldr.w	r2, [r9]
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	42ab      	cmp	r3, r5
 800247c:	dc28      	bgt.n	80024d0 <_printf_common+0xa4>
 800247e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	3300      	adds	r3, #0
 8002486:	bf18      	it	ne
 8002488:	2301      	movne	r3, #1
 800248a:	0692      	lsls	r2, r2, #26
 800248c:	d42d      	bmi.n	80024ea <_printf_common+0xbe>
 800248e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002492:	4639      	mov	r1, r7
 8002494:	4630      	mov	r0, r6
 8002496:	47c0      	blx	r8
 8002498:	3001      	adds	r0, #1
 800249a:	d020      	beq.n	80024de <_printf_common+0xb2>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	68e5      	ldr	r5, [r4, #12]
 80024a0:	f8d9 2000 	ldr.w	r2, [r9]
 80024a4:	f003 0306 	and.w	r3, r3, #6
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	bf08      	it	eq
 80024ac:	1aad      	subeq	r5, r5, r2
 80024ae:	68a3      	ldr	r3, [r4, #8]
 80024b0:	6922      	ldr	r2, [r4, #16]
 80024b2:	bf0c      	ite	eq
 80024b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024b8:	2500      	movne	r5, #0
 80024ba:	4293      	cmp	r3, r2
 80024bc:	bfc4      	itt	gt
 80024be:	1a9b      	subgt	r3, r3, r2
 80024c0:	18ed      	addgt	r5, r5, r3
 80024c2:	f04f 0900 	mov.w	r9, #0
 80024c6:	341a      	adds	r4, #26
 80024c8:	454d      	cmp	r5, r9
 80024ca:	d11a      	bne.n	8002502 <_printf_common+0xd6>
 80024cc:	2000      	movs	r0, #0
 80024ce:	e008      	b.n	80024e2 <_printf_common+0xb6>
 80024d0:	2301      	movs	r3, #1
 80024d2:	4652      	mov	r2, sl
 80024d4:	4639      	mov	r1, r7
 80024d6:	4630      	mov	r0, r6
 80024d8:	47c0      	blx	r8
 80024da:	3001      	adds	r0, #1
 80024dc:	d103      	bne.n	80024e6 <_printf_common+0xba>
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
 80024e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e6:	3501      	adds	r5, #1
 80024e8:	e7c3      	b.n	8002472 <_printf_common+0x46>
 80024ea:	18e1      	adds	r1, r4, r3
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	2030      	movs	r0, #48	; 0x30
 80024f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024f4:	4422      	add	r2, r4
 80024f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024fe:	3302      	adds	r3, #2
 8002500:	e7c5      	b.n	800248e <_printf_common+0x62>
 8002502:	2301      	movs	r3, #1
 8002504:	4622      	mov	r2, r4
 8002506:	4639      	mov	r1, r7
 8002508:	4630      	mov	r0, r6
 800250a:	47c0      	blx	r8
 800250c:	3001      	adds	r0, #1
 800250e:	d0e6      	beq.n	80024de <_printf_common+0xb2>
 8002510:	f109 0901 	add.w	r9, r9, #1
 8002514:	e7d8      	b.n	80024c8 <_printf_common+0x9c>
	...

08002518 <_printf_i>:
 8002518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800251c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002520:	460c      	mov	r4, r1
 8002522:	7e09      	ldrb	r1, [r1, #24]
 8002524:	b085      	sub	sp, #20
 8002526:	296e      	cmp	r1, #110	; 0x6e
 8002528:	4617      	mov	r7, r2
 800252a:	4606      	mov	r6, r0
 800252c:	4698      	mov	r8, r3
 800252e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002530:	f000 80b3 	beq.w	800269a <_printf_i+0x182>
 8002534:	d822      	bhi.n	800257c <_printf_i+0x64>
 8002536:	2963      	cmp	r1, #99	; 0x63
 8002538:	d036      	beq.n	80025a8 <_printf_i+0x90>
 800253a:	d80a      	bhi.n	8002552 <_printf_i+0x3a>
 800253c:	2900      	cmp	r1, #0
 800253e:	f000 80b9 	beq.w	80026b4 <_printf_i+0x19c>
 8002542:	2958      	cmp	r1, #88	; 0x58
 8002544:	f000 8083 	beq.w	800264e <_printf_i+0x136>
 8002548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800254c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002550:	e032      	b.n	80025b8 <_printf_i+0xa0>
 8002552:	2964      	cmp	r1, #100	; 0x64
 8002554:	d001      	beq.n	800255a <_printf_i+0x42>
 8002556:	2969      	cmp	r1, #105	; 0x69
 8002558:	d1f6      	bne.n	8002548 <_printf_i+0x30>
 800255a:	6820      	ldr	r0, [r4, #0]
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	0605      	lsls	r5, r0, #24
 8002560:	f103 0104 	add.w	r1, r3, #4
 8002564:	d52a      	bpl.n	80025bc <_printf_i+0xa4>
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	da03      	bge.n	8002576 <_printf_i+0x5e>
 800256e:	222d      	movs	r2, #45	; 0x2d
 8002570:	425b      	negs	r3, r3
 8002572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002576:	486f      	ldr	r0, [pc, #444]	; (8002734 <_printf_i+0x21c>)
 8002578:	220a      	movs	r2, #10
 800257a:	e039      	b.n	80025f0 <_printf_i+0xd8>
 800257c:	2973      	cmp	r1, #115	; 0x73
 800257e:	f000 809d 	beq.w	80026bc <_printf_i+0x1a4>
 8002582:	d808      	bhi.n	8002596 <_printf_i+0x7e>
 8002584:	296f      	cmp	r1, #111	; 0x6f
 8002586:	d020      	beq.n	80025ca <_printf_i+0xb2>
 8002588:	2970      	cmp	r1, #112	; 0x70
 800258a:	d1dd      	bne.n	8002548 <_printf_i+0x30>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	e003      	b.n	800259e <_printf_i+0x86>
 8002596:	2975      	cmp	r1, #117	; 0x75
 8002598:	d017      	beq.n	80025ca <_printf_i+0xb2>
 800259a:	2978      	cmp	r1, #120	; 0x78
 800259c:	d1d4      	bne.n	8002548 <_printf_i+0x30>
 800259e:	2378      	movs	r3, #120	; 0x78
 80025a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025a4:	4864      	ldr	r0, [pc, #400]	; (8002738 <_printf_i+0x220>)
 80025a6:	e055      	b.n	8002654 <_printf_i+0x13c>
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	1d19      	adds	r1, r3, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6011      	str	r1, [r2, #0]
 80025b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025b8:	2301      	movs	r3, #1
 80025ba:	e08c      	b.n	80026d6 <_printf_i+0x1be>
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6011      	str	r1, [r2, #0]
 80025c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025c4:	bf18      	it	ne
 80025c6:	b21b      	sxthne	r3, r3
 80025c8:	e7cf      	b.n	800256a <_printf_i+0x52>
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	6825      	ldr	r5, [r4, #0]
 80025ce:	1d18      	adds	r0, r3, #4
 80025d0:	6010      	str	r0, [r2, #0]
 80025d2:	0628      	lsls	r0, r5, #24
 80025d4:	d501      	bpl.n	80025da <_printf_i+0xc2>
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e002      	b.n	80025e0 <_printf_i+0xc8>
 80025da:	0668      	lsls	r0, r5, #25
 80025dc:	d5fb      	bpl.n	80025d6 <_printf_i+0xbe>
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	4854      	ldr	r0, [pc, #336]	; (8002734 <_printf_i+0x21c>)
 80025e2:	296f      	cmp	r1, #111	; 0x6f
 80025e4:	bf14      	ite	ne
 80025e6:	220a      	movne	r2, #10
 80025e8:	2208      	moveq	r2, #8
 80025ea:	2100      	movs	r1, #0
 80025ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025f0:	6865      	ldr	r5, [r4, #4]
 80025f2:	60a5      	str	r5, [r4, #8]
 80025f4:	2d00      	cmp	r5, #0
 80025f6:	f2c0 8095 	blt.w	8002724 <_printf_i+0x20c>
 80025fa:	6821      	ldr	r1, [r4, #0]
 80025fc:	f021 0104 	bic.w	r1, r1, #4
 8002600:	6021      	str	r1, [r4, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13d      	bne.n	8002682 <_printf_i+0x16a>
 8002606:	2d00      	cmp	r5, #0
 8002608:	f040 808e 	bne.w	8002728 <_printf_i+0x210>
 800260c:	4665      	mov	r5, ip
 800260e:	2a08      	cmp	r2, #8
 8002610:	d10b      	bne.n	800262a <_printf_i+0x112>
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	07db      	lsls	r3, r3, #31
 8002616:	d508      	bpl.n	800262a <_printf_i+0x112>
 8002618:	6923      	ldr	r3, [r4, #16]
 800261a:	6862      	ldr	r2, [r4, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	bfde      	ittt	le
 8002620:	2330      	movle	r3, #48	; 0x30
 8002622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800262a:	ebac 0305 	sub.w	r3, ip, r5
 800262e:	6123      	str	r3, [r4, #16]
 8002630:	f8cd 8000 	str.w	r8, [sp]
 8002634:	463b      	mov	r3, r7
 8002636:	aa03      	add	r2, sp, #12
 8002638:	4621      	mov	r1, r4
 800263a:	4630      	mov	r0, r6
 800263c:	f7ff fef6 	bl	800242c <_printf_common>
 8002640:	3001      	adds	r0, #1
 8002642:	d14d      	bne.n	80026e0 <_printf_i+0x1c8>
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	b005      	add	sp, #20
 800264a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800264e:	4839      	ldr	r0, [pc, #228]	; (8002734 <_printf_i+0x21c>)
 8002650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	6821      	ldr	r1, [r4, #0]
 8002658:	1d1d      	adds	r5, r3, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6015      	str	r5, [r2, #0]
 800265e:	060a      	lsls	r2, r1, #24
 8002660:	d50b      	bpl.n	800267a <_printf_i+0x162>
 8002662:	07ca      	lsls	r2, r1, #31
 8002664:	bf44      	itt	mi
 8002666:	f041 0120 	orrmi.w	r1, r1, #32
 800266a:	6021      	strmi	r1, [r4, #0]
 800266c:	b91b      	cbnz	r3, 8002676 <_printf_i+0x15e>
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	f022 0220 	bic.w	r2, r2, #32
 8002674:	6022      	str	r2, [r4, #0]
 8002676:	2210      	movs	r2, #16
 8002678:	e7b7      	b.n	80025ea <_printf_i+0xd2>
 800267a:	064d      	lsls	r5, r1, #25
 800267c:	bf48      	it	mi
 800267e:	b29b      	uxthmi	r3, r3
 8002680:	e7ef      	b.n	8002662 <_printf_i+0x14a>
 8002682:	4665      	mov	r5, ip
 8002684:	fbb3 f1f2 	udiv	r1, r3, r2
 8002688:	fb02 3311 	mls	r3, r2, r1, r3
 800268c:	5cc3      	ldrb	r3, [r0, r3]
 800268e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002692:	460b      	mov	r3, r1
 8002694:	2900      	cmp	r1, #0
 8002696:	d1f5      	bne.n	8002684 <_printf_i+0x16c>
 8002698:	e7b9      	b.n	800260e <_printf_i+0xf6>
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	6825      	ldr	r5, [r4, #0]
 800269e:	6961      	ldr	r1, [r4, #20]
 80026a0:	1d18      	adds	r0, r3, #4
 80026a2:	6010      	str	r0, [r2, #0]
 80026a4:	0628      	lsls	r0, r5, #24
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	d501      	bpl.n	80026ae <_printf_i+0x196>
 80026aa:	6019      	str	r1, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <_printf_i+0x19c>
 80026ae:	066a      	lsls	r2, r5, #25
 80026b0:	d5fb      	bpl.n	80026aa <_printf_i+0x192>
 80026b2:	8019      	strh	r1, [r3, #0]
 80026b4:	2300      	movs	r3, #0
 80026b6:	6123      	str	r3, [r4, #16]
 80026b8:	4665      	mov	r5, ip
 80026ba:	e7b9      	b.n	8002630 <_printf_i+0x118>
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	1d19      	adds	r1, r3, #4
 80026c0:	6011      	str	r1, [r2, #0]
 80026c2:	681d      	ldr	r5, [r3, #0]
 80026c4:	6862      	ldr	r2, [r4, #4]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4628      	mov	r0, r5
 80026ca:	f7fd fd89 	bl	80001e0 <memchr>
 80026ce:	b108      	cbz	r0, 80026d4 <_printf_i+0x1bc>
 80026d0:	1b40      	subs	r0, r0, r5
 80026d2:	6060      	str	r0, [r4, #4]
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	6123      	str	r3, [r4, #16]
 80026d8:	2300      	movs	r3, #0
 80026da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026de:	e7a7      	b.n	8002630 <_printf_i+0x118>
 80026e0:	6923      	ldr	r3, [r4, #16]
 80026e2:	462a      	mov	r2, r5
 80026e4:	4639      	mov	r1, r7
 80026e6:	4630      	mov	r0, r6
 80026e8:	47c0      	blx	r8
 80026ea:	3001      	adds	r0, #1
 80026ec:	d0aa      	beq.n	8002644 <_printf_i+0x12c>
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	079b      	lsls	r3, r3, #30
 80026f2:	d413      	bmi.n	800271c <_printf_i+0x204>
 80026f4:	68e0      	ldr	r0, [r4, #12]
 80026f6:	9b03      	ldr	r3, [sp, #12]
 80026f8:	4298      	cmp	r0, r3
 80026fa:	bfb8      	it	lt
 80026fc:	4618      	movlt	r0, r3
 80026fe:	e7a3      	b.n	8002648 <_printf_i+0x130>
 8002700:	2301      	movs	r3, #1
 8002702:	464a      	mov	r2, r9
 8002704:	4639      	mov	r1, r7
 8002706:	4630      	mov	r0, r6
 8002708:	47c0      	blx	r8
 800270a:	3001      	adds	r0, #1
 800270c:	d09a      	beq.n	8002644 <_printf_i+0x12c>
 800270e:	3501      	adds	r5, #1
 8002710:	68e3      	ldr	r3, [r4, #12]
 8002712:	9a03      	ldr	r2, [sp, #12]
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	42ab      	cmp	r3, r5
 8002718:	dcf2      	bgt.n	8002700 <_printf_i+0x1e8>
 800271a:	e7eb      	b.n	80026f4 <_printf_i+0x1dc>
 800271c:	2500      	movs	r5, #0
 800271e:	f104 0919 	add.w	r9, r4, #25
 8002722:	e7f5      	b.n	8002710 <_printf_i+0x1f8>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ac      	bne.n	8002682 <_printf_i+0x16a>
 8002728:	7803      	ldrb	r3, [r0, #0]
 800272a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800272e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002732:	e76c      	b.n	800260e <_printf_i+0xf6>
 8002734:	08002dcd 	.word	0x08002dcd
 8002738:	08002dde 	.word	0x08002dde

0800273c <_sbrk_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4c06      	ldr	r4, [pc, #24]	; (8002758 <_sbrk_r+0x1c>)
 8002740:	2300      	movs	r3, #0
 8002742:	4605      	mov	r5, r0
 8002744:	4608      	mov	r0, r1
 8002746:	6023      	str	r3, [r4, #0]
 8002748:	f7fd ff30 	bl	80005ac <_sbrk>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_sbrk_r+0x1a>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	b103      	cbz	r3, 8002756 <_sbrk_r+0x1a>
 8002754:	602b      	str	r3, [r5, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200000a0 	.word	0x200000a0

0800275c <__sread>:
 800275c:	b510      	push	{r4, lr}
 800275e:	460c      	mov	r4, r1
 8002760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002764:	f000 fa96 	bl	8002c94 <_read_r>
 8002768:	2800      	cmp	r0, #0
 800276a:	bfab      	itete	ge
 800276c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800276e:	89a3      	ldrhlt	r3, [r4, #12]
 8002770:	181b      	addge	r3, r3, r0
 8002772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002776:	bfac      	ite	ge
 8002778:	6563      	strge	r3, [r4, #84]	; 0x54
 800277a:	81a3      	strhlt	r3, [r4, #12]
 800277c:	bd10      	pop	{r4, pc}

0800277e <__swrite>:
 800277e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002782:	461f      	mov	r7, r3
 8002784:	898b      	ldrh	r3, [r1, #12]
 8002786:	05db      	lsls	r3, r3, #23
 8002788:	4605      	mov	r5, r0
 800278a:	460c      	mov	r4, r1
 800278c:	4616      	mov	r6, r2
 800278e:	d505      	bpl.n	800279c <__swrite+0x1e>
 8002790:	2302      	movs	r3, #2
 8002792:	2200      	movs	r2, #0
 8002794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002798:	f000 f9b6 	bl	8002b08 <_lseek_r>
 800279c:	89a3      	ldrh	r3, [r4, #12]
 800279e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027a6:	81a3      	strh	r3, [r4, #12]
 80027a8:	4632      	mov	r2, r6
 80027aa:	463b      	mov	r3, r7
 80027ac:	4628      	mov	r0, r5
 80027ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027b2:	f000 b869 	b.w	8002888 <_write_r>

080027b6 <__sseek>:
 80027b6:	b510      	push	{r4, lr}
 80027b8:	460c      	mov	r4, r1
 80027ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027be:	f000 f9a3 	bl	8002b08 <_lseek_r>
 80027c2:	1c43      	adds	r3, r0, #1
 80027c4:	89a3      	ldrh	r3, [r4, #12]
 80027c6:	bf15      	itete	ne
 80027c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80027ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027d2:	81a3      	strheq	r3, [r4, #12]
 80027d4:	bf18      	it	ne
 80027d6:	81a3      	strhne	r3, [r4, #12]
 80027d8:	bd10      	pop	{r4, pc}

080027da <__sclose>:
 80027da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027de:	f000 b8d3 	b.w	8002988 <_close_r>
	...

080027e4 <__swbuf_r>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	460e      	mov	r6, r1
 80027e8:	4614      	mov	r4, r2
 80027ea:	4605      	mov	r5, r0
 80027ec:	b118      	cbz	r0, 80027f6 <__swbuf_r+0x12>
 80027ee:	6983      	ldr	r3, [r0, #24]
 80027f0:	b90b      	cbnz	r3, 80027f6 <__swbuf_r+0x12>
 80027f2:	f7ff fbf7 	bl	8001fe4 <__sinit>
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <__swbuf_r+0x98>)
 80027f8:	429c      	cmp	r4, r3
 80027fa:	d12a      	bne.n	8002852 <__swbuf_r+0x6e>
 80027fc:	686c      	ldr	r4, [r5, #4]
 80027fe:	69a3      	ldr	r3, [r4, #24]
 8002800:	60a3      	str	r3, [r4, #8]
 8002802:	89a3      	ldrh	r3, [r4, #12]
 8002804:	071a      	lsls	r2, r3, #28
 8002806:	d52e      	bpl.n	8002866 <__swbuf_r+0x82>
 8002808:	6923      	ldr	r3, [r4, #16]
 800280a:	b363      	cbz	r3, 8002866 <__swbuf_r+0x82>
 800280c:	6923      	ldr	r3, [r4, #16]
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	1ac0      	subs	r0, r0, r3
 8002812:	6963      	ldr	r3, [r4, #20]
 8002814:	b2f6      	uxtb	r6, r6
 8002816:	4283      	cmp	r3, r0
 8002818:	4637      	mov	r7, r6
 800281a:	dc04      	bgt.n	8002826 <__swbuf_r+0x42>
 800281c:	4621      	mov	r1, r4
 800281e:	4628      	mov	r0, r5
 8002820:	f000 f948 	bl	8002ab4 <_fflush_r>
 8002824:	bb28      	cbnz	r0, 8002872 <__swbuf_r+0x8e>
 8002826:	68a3      	ldr	r3, [r4, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60a3      	str	r3, [r4, #8]
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	6022      	str	r2, [r4, #0]
 8002832:	701e      	strb	r6, [r3, #0]
 8002834:	6963      	ldr	r3, [r4, #20]
 8002836:	3001      	adds	r0, #1
 8002838:	4283      	cmp	r3, r0
 800283a:	d004      	beq.n	8002846 <__swbuf_r+0x62>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	07db      	lsls	r3, r3, #31
 8002840:	d519      	bpl.n	8002876 <__swbuf_r+0x92>
 8002842:	2e0a      	cmp	r6, #10
 8002844:	d117      	bne.n	8002876 <__swbuf_r+0x92>
 8002846:	4621      	mov	r1, r4
 8002848:	4628      	mov	r0, r5
 800284a:	f000 f933 	bl	8002ab4 <_fflush_r>
 800284e:	b190      	cbz	r0, 8002876 <__swbuf_r+0x92>
 8002850:	e00f      	b.n	8002872 <__swbuf_r+0x8e>
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <__swbuf_r+0x9c>)
 8002854:	429c      	cmp	r4, r3
 8002856:	d101      	bne.n	800285c <__swbuf_r+0x78>
 8002858:	68ac      	ldr	r4, [r5, #8]
 800285a:	e7d0      	b.n	80027fe <__swbuf_r+0x1a>
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <__swbuf_r+0xa0>)
 800285e:	429c      	cmp	r4, r3
 8002860:	bf08      	it	eq
 8002862:	68ec      	ldreq	r4, [r5, #12]
 8002864:	e7cb      	b.n	80027fe <__swbuf_r+0x1a>
 8002866:	4621      	mov	r1, r4
 8002868:	4628      	mov	r0, r5
 800286a:	f000 f81f 	bl	80028ac <__swsetup_r>
 800286e:	2800      	cmp	r0, #0
 8002870:	d0cc      	beq.n	800280c <__swbuf_r+0x28>
 8002872:	f04f 37ff 	mov.w	r7, #4294967295
 8002876:	4638      	mov	r0, r7
 8002878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287a:	bf00      	nop
 800287c:	08002d7c 	.word	0x08002d7c
 8002880:	08002d9c 	.word	0x08002d9c
 8002884:	08002d5c 	.word	0x08002d5c

08002888 <_write_r>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	4c07      	ldr	r4, [pc, #28]	; (80028a8 <_write_r+0x20>)
 800288c:	4605      	mov	r5, r0
 800288e:	4608      	mov	r0, r1
 8002890:	4611      	mov	r1, r2
 8002892:	2200      	movs	r2, #0
 8002894:	6022      	str	r2, [r4, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	f7fd fe37 	bl	800050a <_write>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d102      	bne.n	80028a6 <_write_r+0x1e>
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	b103      	cbz	r3, 80028a6 <_write_r+0x1e>
 80028a4:	602b      	str	r3, [r5, #0]
 80028a6:	bd38      	pop	{r3, r4, r5, pc}
 80028a8:	200000a0 	.word	0x200000a0

080028ac <__swsetup_r>:
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <__swsetup_r+0xcc>)
 80028ae:	b570      	push	{r4, r5, r6, lr}
 80028b0:	681d      	ldr	r5, [r3, #0]
 80028b2:	4606      	mov	r6, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	b125      	cbz	r5, 80028c2 <__swsetup_r+0x16>
 80028b8:	69ab      	ldr	r3, [r5, #24]
 80028ba:	b913      	cbnz	r3, 80028c2 <__swsetup_r+0x16>
 80028bc:	4628      	mov	r0, r5
 80028be:	f7ff fb91 	bl	8001fe4 <__sinit>
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <__swsetup_r+0xd0>)
 80028c4:	429c      	cmp	r4, r3
 80028c6:	d10f      	bne.n	80028e8 <__swsetup_r+0x3c>
 80028c8:	686c      	ldr	r4, [r5, #4]
 80028ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	0715      	lsls	r5, r2, #28
 80028d2:	d42c      	bmi.n	800292e <__swsetup_r+0x82>
 80028d4:	06d0      	lsls	r0, r2, #27
 80028d6:	d411      	bmi.n	80028fc <__swsetup_r+0x50>
 80028d8:	2209      	movs	r2, #9
 80028da:	6032      	str	r2, [r6, #0]
 80028dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	f04f 30ff 	mov.w	r0, #4294967295
 80028e6:	e03e      	b.n	8002966 <__swsetup_r+0xba>
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <__swsetup_r+0xd4>)
 80028ea:	429c      	cmp	r4, r3
 80028ec:	d101      	bne.n	80028f2 <__swsetup_r+0x46>
 80028ee:	68ac      	ldr	r4, [r5, #8]
 80028f0:	e7eb      	b.n	80028ca <__swsetup_r+0x1e>
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <__swsetup_r+0xd8>)
 80028f4:	429c      	cmp	r4, r3
 80028f6:	bf08      	it	eq
 80028f8:	68ec      	ldreq	r4, [r5, #12]
 80028fa:	e7e6      	b.n	80028ca <__swsetup_r+0x1e>
 80028fc:	0751      	lsls	r1, r2, #29
 80028fe:	d512      	bpl.n	8002926 <__swsetup_r+0x7a>
 8002900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002902:	b141      	cbz	r1, 8002916 <__swsetup_r+0x6a>
 8002904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002908:	4299      	cmp	r1, r3
 800290a:	d002      	beq.n	8002912 <__swsetup_r+0x66>
 800290c:	4630      	mov	r0, r6
 800290e:	f000 f973 	bl	8002bf8 <_free_r>
 8002912:	2300      	movs	r3, #0
 8002914:	6363      	str	r3, [r4, #52]	; 0x34
 8002916:	89a3      	ldrh	r3, [r4, #12]
 8002918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800291c:	81a3      	strh	r3, [r4, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	6063      	str	r3, [r4, #4]
 8002922:	6923      	ldr	r3, [r4, #16]
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	81a3      	strh	r3, [r4, #12]
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	b94b      	cbnz	r3, 8002946 <__swsetup_r+0x9a>
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293c:	d003      	beq.n	8002946 <__swsetup_r+0x9a>
 800293e:	4621      	mov	r1, r4
 8002940:	4630      	mov	r0, r6
 8002942:	f000 f917 	bl	8002b74 <__smakebuf_r>
 8002946:	89a2      	ldrh	r2, [r4, #12]
 8002948:	f012 0301 	ands.w	r3, r2, #1
 800294c:	d00c      	beq.n	8002968 <__swsetup_r+0xbc>
 800294e:	2300      	movs	r3, #0
 8002950:	60a3      	str	r3, [r4, #8]
 8002952:	6963      	ldr	r3, [r4, #20]
 8002954:	425b      	negs	r3, r3
 8002956:	61a3      	str	r3, [r4, #24]
 8002958:	6923      	ldr	r3, [r4, #16]
 800295a:	b953      	cbnz	r3, 8002972 <__swsetup_r+0xc6>
 800295c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002960:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002964:	d1ba      	bne.n	80028dc <__swsetup_r+0x30>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	0792      	lsls	r2, r2, #30
 800296a:	bf58      	it	pl
 800296c:	6963      	ldrpl	r3, [r4, #20]
 800296e:	60a3      	str	r3, [r4, #8]
 8002970:	e7f2      	b.n	8002958 <__swsetup_r+0xac>
 8002972:	2000      	movs	r0, #0
 8002974:	e7f7      	b.n	8002966 <__swsetup_r+0xba>
 8002976:	bf00      	nop
 8002978:	2000000c 	.word	0x2000000c
 800297c:	08002d7c 	.word	0x08002d7c
 8002980:	08002d9c 	.word	0x08002d9c
 8002984:	08002d5c 	.word	0x08002d5c

08002988 <_close_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4c06      	ldr	r4, [pc, #24]	; (80029a4 <_close_r+0x1c>)
 800298c:	2300      	movs	r3, #0
 800298e:	4605      	mov	r5, r0
 8002990:	4608      	mov	r0, r1
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	f7fd fdd5 	bl	8000542 <_close>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_close_r+0x1a>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_close_r+0x1a>
 80029a0:	602b      	str	r3, [r5, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	200000a0 	.word	0x200000a0

080029a8 <__sflush_r>:
 80029a8:	898a      	ldrh	r2, [r1, #12]
 80029aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ae:	4605      	mov	r5, r0
 80029b0:	0710      	lsls	r0, r2, #28
 80029b2:	460c      	mov	r4, r1
 80029b4:	d458      	bmi.n	8002a68 <__sflush_r+0xc0>
 80029b6:	684b      	ldr	r3, [r1, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	dc05      	bgt.n	80029c8 <__sflush_r+0x20>
 80029bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dc02      	bgt.n	80029c8 <__sflush_r+0x20>
 80029c2:	2000      	movs	r0, #0
 80029c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d0f9      	beq.n	80029c2 <__sflush_r+0x1a>
 80029ce:	2300      	movs	r3, #0
 80029d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029d4:	682f      	ldr	r7, [r5, #0]
 80029d6:	6a21      	ldr	r1, [r4, #32]
 80029d8:	602b      	str	r3, [r5, #0]
 80029da:	d032      	beq.n	8002a42 <__sflush_r+0x9a>
 80029dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	075a      	lsls	r2, r3, #29
 80029e2:	d505      	bpl.n	80029f0 <__sflush_r+0x48>
 80029e4:	6863      	ldr	r3, [r4, #4]
 80029e6:	1ac0      	subs	r0, r0, r3
 80029e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029ea:	b10b      	cbz	r3, 80029f0 <__sflush_r+0x48>
 80029ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ee:	1ac0      	subs	r0, r0, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	4602      	mov	r2, r0
 80029f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029f6:	6a21      	ldr	r1, [r4, #32]
 80029f8:	4628      	mov	r0, r5
 80029fa:	47b0      	blx	r6
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	d106      	bne.n	8002a10 <__sflush_r+0x68>
 8002a02:	6829      	ldr	r1, [r5, #0]
 8002a04:	291d      	cmp	r1, #29
 8002a06:	d848      	bhi.n	8002a9a <__sflush_r+0xf2>
 8002a08:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <__sflush_r+0x108>)
 8002a0a:	40ca      	lsrs	r2, r1
 8002a0c:	07d6      	lsls	r6, r2, #31
 8002a0e:	d544      	bpl.n	8002a9a <__sflush_r+0xf2>
 8002a10:	2200      	movs	r2, #0
 8002a12:	6062      	str	r2, [r4, #4]
 8002a14:	04d9      	lsls	r1, r3, #19
 8002a16:	6922      	ldr	r2, [r4, #16]
 8002a18:	6022      	str	r2, [r4, #0]
 8002a1a:	d504      	bpl.n	8002a26 <__sflush_r+0x7e>
 8002a1c:	1c42      	adds	r2, r0, #1
 8002a1e:	d101      	bne.n	8002a24 <__sflush_r+0x7c>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b903      	cbnz	r3, 8002a26 <__sflush_r+0x7e>
 8002a24:	6560      	str	r0, [r4, #84]	; 0x54
 8002a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a28:	602f      	str	r7, [r5, #0]
 8002a2a:	2900      	cmp	r1, #0
 8002a2c:	d0c9      	beq.n	80029c2 <__sflush_r+0x1a>
 8002a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a32:	4299      	cmp	r1, r3
 8002a34:	d002      	beq.n	8002a3c <__sflush_r+0x94>
 8002a36:	4628      	mov	r0, r5
 8002a38:	f000 f8de 	bl	8002bf8 <_free_r>
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a40:	e7c0      	b.n	80029c4 <__sflush_r+0x1c>
 8002a42:	2301      	movs	r3, #1
 8002a44:	4628      	mov	r0, r5
 8002a46:	47b0      	blx	r6
 8002a48:	1c41      	adds	r1, r0, #1
 8002a4a:	d1c8      	bne.n	80029de <__sflush_r+0x36>
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0c5      	beq.n	80029de <__sflush_r+0x36>
 8002a52:	2b1d      	cmp	r3, #29
 8002a54:	d001      	beq.n	8002a5a <__sflush_r+0xb2>
 8002a56:	2b16      	cmp	r3, #22
 8002a58:	d101      	bne.n	8002a5e <__sflush_r+0xb6>
 8002a5a:	602f      	str	r7, [r5, #0]
 8002a5c:	e7b1      	b.n	80029c2 <__sflush_r+0x1a>
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	e7ad      	b.n	80029c4 <__sflush_r+0x1c>
 8002a68:	690f      	ldr	r7, [r1, #16]
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d0a9      	beq.n	80029c2 <__sflush_r+0x1a>
 8002a6e:	0793      	lsls	r3, r2, #30
 8002a70:	680e      	ldr	r6, [r1, #0]
 8002a72:	bf08      	it	eq
 8002a74:	694b      	ldreq	r3, [r1, #20]
 8002a76:	600f      	str	r7, [r1, #0]
 8002a78:	bf18      	it	ne
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	eba6 0807 	sub.w	r8, r6, r7
 8002a80:	608b      	str	r3, [r1, #8]
 8002a82:	f1b8 0f00 	cmp.w	r8, #0
 8002a86:	dd9c      	ble.n	80029c2 <__sflush_r+0x1a>
 8002a88:	4643      	mov	r3, r8
 8002a8a:	463a      	mov	r2, r7
 8002a8c:	6a21      	ldr	r1, [r4, #32]
 8002a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a90:	4628      	mov	r0, r5
 8002a92:	47b0      	blx	r6
 8002a94:	2800      	cmp	r0, #0
 8002a96:	dc06      	bgt.n	8002aa6 <__sflush_r+0xfe>
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9e:	81a3      	strh	r3, [r4, #12]
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	e78e      	b.n	80029c4 <__sflush_r+0x1c>
 8002aa6:	4407      	add	r7, r0
 8002aa8:	eba8 0800 	sub.w	r8, r8, r0
 8002aac:	e7e9      	b.n	8002a82 <__sflush_r+0xda>
 8002aae:	bf00      	nop
 8002ab0:	20400001 	.word	0x20400001

08002ab4 <_fflush_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	690b      	ldr	r3, [r1, #16]
 8002ab8:	4605      	mov	r5, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	b1db      	cbz	r3, 8002af6 <_fflush_r+0x42>
 8002abe:	b118      	cbz	r0, 8002ac8 <_fflush_r+0x14>
 8002ac0:	6983      	ldr	r3, [r0, #24]
 8002ac2:	b90b      	cbnz	r3, 8002ac8 <_fflush_r+0x14>
 8002ac4:	f7ff fa8e 	bl	8001fe4 <__sinit>
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <_fflush_r+0x48>)
 8002aca:	429c      	cmp	r4, r3
 8002acc:	d109      	bne.n	8002ae2 <_fflush_r+0x2e>
 8002ace:	686c      	ldr	r4, [r5, #4]
 8002ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad4:	b17b      	cbz	r3, 8002af6 <_fflush_r+0x42>
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	4628      	mov	r0, r5
 8002ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ade:	f7ff bf63 	b.w	80029a8 <__sflush_r>
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <_fflush_r+0x4c>)
 8002ae4:	429c      	cmp	r4, r3
 8002ae6:	d101      	bne.n	8002aec <_fflush_r+0x38>
 8002ae8:	68ac      	ldr	r4, [r5, #8]
 8002aea:	e7f1      	b.n	8002ad0 <_fflush_r+0x1c>
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <_fflush_r+0x50>)
 8002aee:	429c      	cmp	r4, r3
 8002af0:	bf08      	it	eq
 8002af2:	68ec      	ldreq	r4, [r5, #12]
 8002af4:	e7ec      	b.n	8002ad0 <_fflush_r+0x1c>
 8002af6:	2000      	movs	r0, #0
 8002af8:	bd38      	pop	{r3, r4, r5, pc}
 8002afa:	bf00      	nop
 8002afc:	08002d7c 	.word	0x08002d7c
 8002b00:	08002d9c 	.word	0x08002d9c
 8002b04:	08002d5c 	.word	0x08002d5c

08002b08 <_lseek_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4c07      	ldr	r4, [pc, #28]	; (8002b28 <_lseek_r+0x20>)
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	4608      	mov	r0, r1
 8002b10:	4611      	mov	r1, r2
 8002b12:	2200      	movs	r2, #0
 8002b14:	6022      	str	r2, [r4, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f7fd fd3a 	bl	8000590 <_lseek>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_lseek_r+0x1e>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_lseek_r+0x1e>
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	200000a0 	.word	0x200000a0

08002b2c <__swhatbuf_r>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	460e      	mov	r6, r1
 8002b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b34:	2900      	cmp	r1, #0
 8002b36:	b096      	sub	sp, #88	; 0x58
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	da07      	bge.n	8002b4e <__swhatbuf_r+0x22>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	89b3      	ldrh	r3, [r6, #12]
 8002b44:	061a      	lsls	r2, r3, #24
 8002b46:	d410      	bmi.n	8002b6a <__swhatbuf_r+0x3e>
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	e00e      	b.n	8002b6c <__swhatbuf_r+0x40>
 8002b4e:	466a      	mov	r2, sp
 8002b50:	f000 f8b2 	bl	8002cb8 <_fstat_r>
 8002b54:	2800      	cmp	r0, #0
 8002b56:	dbf2      	blt.n	8002b3e <__swhatbuf_r+0x12>
 8002b58:	9a01      	ldr	r2, [sp, #4]
 8002b5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b62:	425a      	negs	r2, r3
 8002b64:	415a      	adcs	r2, r3
 8002b66:	602a      	str	r2, [r5, #0]
 8002b68:	e7ee      	b.n	8002b48 <__swhatbuf_r+0x1c>
 8002b6a:	2340      	movs	r3, #64	; 0x40
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	b016      	add	sp, #88	; 0x58
 8002b72:	bd70      	pop	{r4, r5, r6, pc}

08002b74 <__smakebuf_r>:
 8002b74:	898b      	ldrh	r3, [r1, #12]
 8002b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b78:	079d      	lsls	r5, r3, #30
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	d507      	bpl.n	8002b90 <__smakebuf_r+0x1c>
 8002b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	6123      	str	r3, [r4, #16]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	6163      	str	r3, [r4, #20]
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	ab01      	add	r3, sp, #4
 8002b92:	466a      	mov	r2, sp
 8002b94:	f7ff ffca 	bl	8002b2c <__swhatbuf_r>
 8002b98:	9900      	ldr	r1, [sp, #0]
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f7ff faab 	bl	80020f8 <_malloc_r>
 8002ba2:	b948      	cbnz	r0, 8002bb8 <__smakebuf_r+0x44>
 8002ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba8:	059a      	lsls	r2, r3, #22
 8002baa:	d4ef      	bmi.n	8002b8c <__smakebuf_r+0x18>
 8002bac:	f023 0303 	bic.w	r3, r3, #3
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	81a3      	strh	r3, [r4, #12]
 8002bb6:	e7e3      	b.n	8002b80 <__smakebuf_r+0xc>
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <__smakebuf_r+0x7c>)
 8002bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	6020      	str	r0, [r4, #0]
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	9b00      	ldr	r3, [sp, #0]
 8002bc8:	6163      	str	r3, [r4, #20]
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	6120      	str	r0, [r4, #16]
 8002bce:	b15b      	cbz	r3, 8002be8 <__smakebuf_r+0x74>
 8002bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f000 f881 	bl	8002cdc <_isatty_r>
 8002bda:	b128      	cbz	r0, 8002be8 <__smakebuf_r+0x74>
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	81a3      	strh	r3, [r4, #12]
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	431d      	orrs	r5, r3
 8002bec:	81a5      	strh	r5, [r4, #12]
 8002bee:	e7cd      	b.n	8002b8c <__smakebuf_r+0x18>
 8002bf0:	08001fad 	.word	0x08001fad

08002bf4 <__malloc_lock>:
 8002bf4:	4770      	bx	lr

08002bf6 <__malloc_unlock>:
 8002bf6:	4770      	bx	lr

08002bf8 <_free_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	d045      	beq.n	8002c8c <_free_r+0x94>
 8002c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c04:	1f0c      	subs	r4, r1, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bfb8      	it	lt
 8002c0a:	18e4      	addlt	r4, r4, r3
 8002c0c:	f7ff fff2 	bl	8002bf4 <__malloc_lock>
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <_free_r+0x98>)
 8002c12:	6813      	ldr	r3, [r2, #0]
 8002c14:	4610      	mov	r0, r2
 8002c16:	b933      	cbnz	r3, 8002c26 <_free_r+0x2e>
 8002c18:	6063      	str	r3, [r4, #4]
 8002c1a:	6014      	str	r4, [r2, #0]
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c22:	f7ff bfe8 	b.w	8002bf6 <__malloc_unlock>
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	d90c      	bls.n	8002c44 <_free_r+0x4c>
 8002c2a:	6821      	ldr	r1, [r4, #0]
 8002c2c:	1862      	adds	r2, r4, r1
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf04      	itt	eq
 8002c32:	681a      	ldreq	r2, [r3, #0]
 8002c34:	685b      	ldreq	r3, [r3, #4]
 8002c36:	6063      	str	r3, [r4, #4]
 8002c38:	bf04      	itt	eq
 8002c3a:	1852      	addeq	r2, r2, r1
 8002c3c:	6022      	streq	r2, [r4, #0]
 8002c3e:	6004      	str	r4, [r0, #0]
 8002c40:	e7ec      	b.n	8002c1c <_free_r+0x24>
 8002c42:	4613      	mov	r3, r2
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	b10a      	cbz	r2, 8002c4c <_free_r+0x54>
 8002c48:	42a2      	cmp	r2, r4
 8002c4a:	d9fa      	bls.n	8002c42 <_free_r+0x4a>
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	1858      	adds	r0, r3, r1
 8002c50:	42a0      	cmp	r0, r4
 8002c52:	d10b      	bne.n	8002c6c <_free_r+0x74>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	4401      	add	r1, r0
 8002c58:	1858      	adds	r0, r3, r1
 8002c5a:	4282      	cmp	r2, r0
 8002c5c:	6019      	str	r1, [r3, #0]
 8002c5e:	d1dd      	bne.n	8002c1c <_free_r+0x24>
 8002c60:	6810      	ldr	r0, [r2, #0]
 8002c62:	6852      	ldr	r2, [r2, #4]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	4401      	add	r1, r0
 8002c68:	6019      	str	r1, [r3, #0]
 8002c6a:	e7d7      	b.n	8002c1c <_free_r+0x24>
 8002c6c:	d902      	bls.n	8002c74 <_free_r+0x7c>
 8002c6e:	230c      	movs	r3, #12
 8002c70:	602b      	str	r3, [r5, #0]
 8002c72:	e7d3      	b.n	8002c1c <_free_r+0x24>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	1821      	adds	r1, r4, r0
 8002c78:	428a      	cmp	r2, r1
 8002c7a:	bf04      	itt	eq
 8002c7c:	6811      	ldreq	r1, [r2, #0]
 8002c7e:	6852      	ldreq	r2, [r2, #4]
 8002c80:	6062      	str	r2, [r4, #4]
 8002c82:	bf04      	itt	eq
 8002c84:	1809      	addeq	r1, r1, r0
 8002c86:	6021      	streq	r1, [r4, #0]
 8002c88:	605c      	str	r4, [r3, #4]
 8002c8a:	e7c7      	b.n	8002c1c <_free_r+0x24>
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000094 	.word	0x20000094

08002c94 <_read_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	4c07      	ldr	r4, [pc, #28]	; (8002cb4 <_read_r+0x20>)
 8002c98:	4605      	mov	r5, r0
 8002c9a:	4608      	mov	r0, r1
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	6022      	str	r2, [r4, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f7fd fc14 	bl	80004d0 <_read>
 8002ca8:	1c43      	adds	r3, r0, #1
 8002caa:	d102      	bne.n	8002cb2 <_read_r+0x1e>
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	b103      	cbz	r3, 8002cb2 <_read_r+0x1e>
 8002cb0:	602b      	str	r3, [r5, #0]
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
 8002cb4:	200000a0 	.word	0x200000a0

08002cb8 <_fstat_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4c07      	ldr	r4, [pc, #28]	; (8002cd8 <_fstat_r+0x20>)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	f7fd fc48 	bl	800055a <_fstat>
 8002cca:	1c43      	adds	r3, r0, #1
 8002ccc:	d102      	bne.n	8002cd4 <_fstat_r+0x1c>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	b103      	cbz	r3, 8002cd4 <_fstat_r+0x1c>
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200000a0 	.word	0x200000a0

08002cdc <_isatty_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4c06      	ldr	r4, [pc, #24]	; (8002cf8 <_isatty_r+0x1c>)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	4605      	mov	r5, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	f7fd fc47 	bl	800057a <_isatty>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_isatty_r+0x1a>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_isatty_r+0x1a>
 8002cf4:	602b      	str	r3, [r5, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	200000a0 	.word	0x200000a0

08002cfc <_init>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr

08002d08 <_fini>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr
