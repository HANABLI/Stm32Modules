
PLL_SYSCLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030f4  080030f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f4  080030f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  0800316c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800316c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e14  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010c0  00000000  00000000  00026eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  00027f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00028530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c036  00000000  00000000  00028a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005639  00000000  00000000  00044a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a63db  00000000  00000000  0004a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f049a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001984  00000000  00000000  000f0518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003030 	.word	0x08003030

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003030 	.word	0x08003030

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <HAL_Init+0x28>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <HAL_Init+0x28>)
 800029a:	f043 0310 	orr.w	r3, r3, #16
 800029e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002a0:	2003      	movs	r0, #3
 80002a2:	f000 f92b 	bl	80004fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f808 	bl	80002bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002ac:	f002 f9da 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002b0:	2300      	movs	r3, #0
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40022000 	.word	0x40022000

080002bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <HAL_InitTick+0x54>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <HAL_InitTick+0x58>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f943 	bl	8000566 <HAL_SYSTICK_Config>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e00e      	b.n	8000308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b0f      	cmp	r3, #15
 80002ee:	d80a      	bhi.n	8000306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002f0:	2200      	movs	r2, #0
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	f04f 30ff 	mov.w	r0, #4294967295
 80002f8:	f000 f90b 	bl	8000512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <HAL_InitTick+0x5c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000302:	2300      	movs	r3, #0
 8000304:	e000      	b.n	8000308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000306:	2301      	movs	r3, #1
}
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000008 	.word	0x20000008
 8000314:	20000004 	.word	0x20000004
 8000318:	20000000 	.word	0x20000000

0800031c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_IncTick+0x20>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_IncTick+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_IncTick+0x24>)
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000004 	.word	0x20000004
 8000340:	20000098 	.word	0x20000098

08000344 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return uwTick;  
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <HAL_GetTick+0x14>)
 800034a:	681b      	ldr	r3, [r3, #0]
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000098 	.word	0x20000098

0800035c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <__NVIC_SetPriorityGrouping+0x44>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000378:	4013      	ands	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800038c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	60d3      	str	r3, [r2, #12]
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <__NVIC_GetPriorityGrouping+0x18>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	0a1b      	lsrs	r3, r3, #8
 80003ae:	f003 0307 	and.w	r3, r3, #7
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db0b      	blt.n	80003ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 021f 	and.w	r2, r3, #31
 80003d8:	4907      	ldr	r1, [pc, #28]	; (80003f8 <__NVIC_EnableIRQ+0x38>)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	095b      	lsrs	r3, r3, #5
 80003e0:	2001      	movs	r0, #1
 80003e2:	fa00 f202 	lsl.w	r2, r0, r2
 80003e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e100 	.word	0xe000e100

080003fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	6039      	str	r1, [r7, #0]
 8000406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040c:	2b00      	cmp	r3, #0
 800040e:	db0a      	blt.n	8000426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	b2da      	uxtb	r2, r3
 8000414:	490c      	ldr	r1, [pc, #48]	; (8000448 <__NVIC_SetPriority+0x4c>)
 8000416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041a:	0112      	lsls	r2, r2, #4
 800041c:	b2d2      	uxtb	r2, r2
 800041e:	440b      	add	r3, r1
 8000420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000424:	e00a      	b.n	800043c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4908      	ldr	r1, [pc, #32]	; (800044c <__NVIC_SetPriority+0x50>)
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	f003 030f 	and.w	r3, r3, #15
 8000432:	3b04      	subs	r3, #4
 8000434:	0112      	lsls	r2, r2, #4
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	440b      	add	r3, r1
 800043a:	761a      	strb	r2, [r3, #24]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	e000e100 	.word	0xe000e100
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000450:	b480      	push	{r7}
 8000452:	b089      	sub	sp, #36	; 0x24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	f1c3 0307 	rsb	r3, r3, #7
 800046a:	2b04      	cmp	r3, #4
 800046c:	bf28      	it	cs
 800046e:	2304      	movcs	r3, #4
 8000470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3304      	adds	r3, #4
 8000476:	2b06      	cmp	r3, #6
 8000478:	d902      	bls.n	8000480 <NVIC_EncodePriority+0x30>
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	3b03      	subs	r3, #3
 800047e:	e000      	b.n	8000482 <NVIC_EncodePriority+0x32>
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000484:	f04f 32ff 	mov.w	r2, #4294967295
 8000488:	69bb      	ldr	r3, [r7, #24]
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	43da      	mvns	r2, r3
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	401a      	ands	r2, r3
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000498:	f04f 31ff 	mov.w	r1, #4294967295
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	43d9      	mvns	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a8:	4313      	orrs	r3, r2
         );
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3724      	adds	r7, #36	; 0x24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c8:	d301      	bcc.n	80004ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004ca:	2301      	movs	r3, #1
 80004cc:	e00f      	b.n	80004ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <SysTick_Config+0x40>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004d6:	210f      	movs	r1, #15
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295
 80004dc:	f7ff ff8e 	bl	80003fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <SysTick_Config+0x40>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <SysTick_Config+0x40>)
 80004e8:	2207      	movs	r2, #7
 80004ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	e000e010 	.word	0xe000e010

080004fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff29 	bl	800035c <__NVIC_SetPriorityGrouping>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	607a      	str	r2, [r7, #4]
 800051e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000524:	f7ff ff3e 	bl	80003a4 <__NVIC_GetPriorityGrouping>
 8000528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	6978      	ldr	r0, [r7, #20]
 8000530:	f7ff ff8e 	bl	8000450 <NVIC_EncodePriority>
 8000534:	4602      	mov	r2, r0
 8000536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff5d 	bl	80003fc <__NVIC_SetPriority>
}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff31 	bl	80003c0 <__NVIC_EnableIRQ>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffa2 	bl	80004b8 <SysTick_Config>
 8000574:	4603      	mov	r3, r0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b04      	cmp	r3, #4
 800058c:	d106      	bne.n	800059c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800059a:	e005      	b.n	80005a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80005a2:	f023 0304 	bic.w	r3, r3, #4
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000e010 	.word	0xe000e010

080005b8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80005bc:	f000 f802 	bl	80005c4 <HAL_SYSTICK_Callback>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005e2:	e160      	b.n	80008a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	2101      	movs	r1, #1
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	f000 8152 	beq.w	80008a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d003      	beq.n	800060c <HAL_GPIO_Init+0x38>
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b12      	cmp	r3, #18
 800060a:	d123      	bne.n	8000654 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	08da      	lsrs	r2, r3, #3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3208      	adds	r2, #8
 8000614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000618:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	f003 0307 	and.w	r3, r3, #7
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	220f      	movs	r2, #15
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	691a      	ldr	r2, [r3, #16]
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	4313      	orrs	r3, r2
 8000644:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	08da      	lsrs	r2, r3, #3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3208      	adds	r2, #8
 800064e:	6939      	ldr	r1, [r7, #16]
 8000650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	2203      	movs	r2, #3
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	43db      	mvns	r3, r3
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	4013      	ands	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	f003 0203 	and.w	r2, r3, #3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	4313      	orrs	r3, r2
 8000680:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00b      	beq.n	80006a8 <HAL_GPIO_Init+0xd4>
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d007      	beq.n	80006a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800069c:	2b11      	cmp	r3, #17
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	2b12      	cmp	r3, #18
 80006a6:	d130      	bne.n	800070a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	2203      	movs	r2, #3
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006de:	2201      	movs	r2, #1
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	4013      	ands	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	f003 0201 	and.w	r2, r3, #1
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	2203      	movs	r2, #3
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43db      	mvns	r3, r3
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	4013      	ands	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 80ac 	beq.w	80008a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	4b5e      	ldr	r3, [pc, #376]	; (80008c4 <HAL_GPIO_Init+0x2f0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a5d      	ldr	r2, [pc, #372]	; (80008c4 <HAL_GPIO_Init+0x2f0>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <HAL_GPIO_Init+0x2f0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000760:	4a59      	ldr	r2, [pc, #356]	; (80008c8 <HAL_GPIO_Init+0x2f4>)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	089b      	lsrs	r3, r3, #2
 8000766:	3302      	adds	r3, #2
 8000768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	220f      	movs	r2, #15
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800078a:	d025      	beq.n	80007d8 <HAL_GPIO_Init+0x204>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a4f      	ldr	r2, [pc, #316]	; (80008cc <HAL_GPIO_Init+0x2f8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d01f      	beq.n	80007d4 <HAL_GPIO_Init+0x200>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a4e      	ldr	r2, [pc, #312]	; (80008d0 <HAL_GPIO_Init+0x2fc>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d019      	beq.n	80007d0 <HAL_GPIO_Init+0x1fc>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a4d      	ldr	r2, [pc, #308]	; (80008d4 <HAL_GPIO_Init+0x300>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d013      	beq.n	80007cc <HAL_GPIO_Init+0x1f8>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a4c      	ldr	r2, [pc, #304]	; (80008d8 <HAL_GPIO_Init+0x304>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d00d      	beq.n	80007c8 <HAL_GPIO_Init+0x1f4>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a4b      	ldr	r2, [pc, #300]	; (80008dc <HAL_GPIO_Init+0x308>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d007      	beq.n	80007c4 <HAL_GPIO_Init+0x1f0>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a4a      	ldr	r2, [pc, #296]	; (80008e0 <HAL_GPIO_Init+0x30c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d101      	bne.n	80007c0 <HAL_GPIO_Init+0x1ec>
 80007bc:	2306      	movs	r3, #6
 80007be:	e00c      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007c0:	2307      	movs	r3, #7
 80007c2:	e00a      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007c4:	2305      	movs	r3, #5
 80007c6:	e008      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007c8:	2304      	movs	r3, #4
 80007ca:	e006      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007cc:	2303      	movs	r3, #3
 80007ce:	e004      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007d0:	2302      	movs	r3, #2
 80007d2:	e002      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e000      	b.n	80007da <HAL_GPIO_Init+0x206>
 80007d8:	2300      	movs	r3, #0
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	f002 0203 	and.w	r2, r2, #3
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	4093      	lsls	r3, r2
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007ea:	4937      	ldr	r1, [pc, #220]	; (80008c8 <HAL_GPIO_Init+0x2f4>)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	3302      	adds	r3, #2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007f8:	4b3a      	ldr	r3, [pc, #232]	; (80008e4 <HAL_GPIO_Init+0x310>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <HAL_GPIO_Init+0x310>)
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <HAL_GPIO_Init+0x310>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000846:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <HAL_GPIO_Init+0x310>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <HAL_GPIO_Init+0x310>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	43db      	mvns	r3, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <HAL_GPIO_Init+0x310>)
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_GPIO_Init+0x310>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	43db      	mvns	r3, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d003      	beq.n	800089a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <HAL_GPIO_Init+0x310>)
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	fa22 f303 	lsr.w	r3, r2, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f47f ae97 	bne.w	80005e4 <HAL_GPIO_Init+0x10>
  }
}
 80008b6:	bf00      	nop
 80008b8:	371c      	adds	r7, #28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010000 	.word	0x40010000
 80008cc:	48000400 	.word	0x48000400
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48000c00 	.word	0x48000c00
 80008d8:	48001000 	.word	0x48001000
 80008dc:	48001400 	.word	0x48001400
 80008e0:	48001800 	.word	0x48001800
 80008e4:	40010400 	.word	0x40010400

080008e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	f000 bf01 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	f000 8160 	beq.w	8000bd2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000912:	4bae      	ldr	r3, [pc, #696]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b04      	cmp	r3, #4
 800091c:	d00c      	beq.n	8000938 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800091e:	4bab      	ldr	r3, [pc, #684]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 030c 	and.w	r3, r3, #12
 8000926:	2b08      	cmp	r3, #8
 8000928:	d159      	bne.n	80009de <HAL_RCC_OscConfig+0xf6>
 800092a:	4ba8      	ldr	r3, [pc, #672]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000936:	d152      	bne.n	80009de <HAL_RCC_OscConfig+0xf6>
 8000938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000940:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000944:	fa93 f3a3 	rbit	r3, r3
 8000948:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800094c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000950:	fab3 f383 	clz	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b01      	cmp	r3, #1
 8000962:	d102      	bne.n	800096a <HAL_RCC_OscConfig+0x82>
 8000964:	4b99      	ldr	r3, [pc, #612]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	e015      	b.n	8000996 <HAL_RCC_OscConfig+0xae>
 800096a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800096e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000972:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000976:	fa93 f3a3 	rbit	r3, r3
 800097a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800097e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000982:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000986:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800098a:	fa93 f3a3 	rbit	r3, r3
 800098e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000992:	4b8e      	ldr	r3, [pc, #568]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800099a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800099e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80009a2:	fa92 f2a2 	rbit	r2, r2
 80009a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80009aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80009ae:	fab2 f282 	clz	r2, r2
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	f042 0220 	orr.w	r2, r2, #32
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	f002 021f 	and.w	r2, r2, #31
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	4013      	ands	r3, r2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 8102 	beq.w	8000bd0 <HAL_RCC_OscConfig+0x2e8>
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f040 80fc 	bne.w	8000bd0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	f000 be93 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e8:	d106      	bne.n	80009f8 <HAL_RCC_OscConfig+0x110>
 80009ea:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 80009f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e030      	b.n	8000a5a <HAL_RCC_OscConfig+0x172>
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10c      	bne.n	8000a1c <HAL_RCC_OscConfig+0x134>
 8000a02:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a71      	ldr	r2, [pc, #452]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a6e      	ldr	r2, [pc, #440]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e01e      	b.n	8000a5a <HAL_RCC_OscConfig+0x172>
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a26:	d10c      	bne.n	8000a42 <HAL_RCC_OscConfig+0x15a>
 8000a28:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a67      	ldr	r2, [pc, #412]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a64      	ldr	r2, [pc, #400]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e00b      	b.n	8000a5a <HAL_RCC_OscConfig+0x172>
 8000a42:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a61      	ldr	r2, [pc, #388]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a5e      	ldr	r2, [pc, #376]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a58:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d059      	beq.n	8000b18 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a64:	f7ff fc6e 	bl	8000344 <HAL_GetTick>
 8000a68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6c:	e00a      	b.n	8000a84 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a6e:	f7ff fc69 	bl	8000344 <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b64      	cmp	r3, #100	; 0x64
 8000a7c:	d902      	bls.n	8000a84 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f000 be40 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>
 8000a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a90:	fa93 f3a3 	rbit	r3, r3
 8000a94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000a98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a9c:	fab3 f383 	clz	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d102      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x1ce>
 8000ab0:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	e015      	b.n	8000ae2 <HAL_RCC_OscConfig+0x1fa>
 8000ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ace:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ad2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ae6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000aea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000aee:	fa92 f2a2 	rbit	r2, r2
 8000af2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000af6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000afa:	fab2 f282 	clz	r2, r2
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	f042 0220 	orr.w	r2, r2, #32
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	f002 021f 	and.w	r2, r2, #31
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0ab      	beq.n	8000a6e <HAL_RCC_OscConfig+0x186>
 8000b16:	e05c      	b.n	8000bd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fc14 	bl	8000344 <HAL_GetTick>
 8000b1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b20:	e00a      	b.n	8000b38 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b22:	f7ff fc0f 	bl	8000344 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b64      	cmp	r3, #100	; 0x64
 8000b30:	d902      	bls.n	8000b38 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	f000 bde6 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>
 8000b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000b4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b50:	fab3 f383 	clz	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d102      	bne.n	8000b6a <HAL_RCC_OscConfig+0x282>
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	e015      	b.n	8000b96 <HAL_RCC_OscConfig+0x2ae>
 8000b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b76:	fa93 f3a3 	rbit	r3, r3
 8000b7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b9a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b9e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ba2:	fa92 f2a2 	rbit	r2, r2
 8000ba6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000baa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	f042 0220 	orr.w	r2, r2, #32
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	f002 021f 	and.w	r2, r2, #31
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1ab      	bne.n	8000b22 <HAL_RCC_OscConfig+0x23a>
 8000bca:	e002      	b.n	8000bd2 <HAL_RCC_OscConfig+0x2ea>
 8000bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 8170 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be2:	4bd0      	ldr	r3, [pc, #832]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00c      	beq.n	8000c08 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bee:	4bcd      	ldr	r3, [pc, #820]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d16d      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x3ee>
 8000bfa:	4bca      	ldr	r3, [pc, #808]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c06:	d166      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x3ee>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000c12:	fa93 f3a3 	rbit	r3, r3
 8000c16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000c1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	fab3 f383 	clz	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	095b      	lsrs	r3, r3, #5
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d102      	bne.n	8000c38 <HAL_RCC_OscConfig+0x350>
 8000c32:	4bbc      	ldr	r3, [pc, #752]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <HAL_RCC_OscConfig+0x378>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c50:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c5c:	4bb1      	ldr	r3, [pc, #708]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	2202      	movs	r2, #2
 8000c62:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c66:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c6a:	fa92 f2a2 	rbit	r2, r2
 8000c6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000c72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	f042 0220 	orr.w	r2, r2, #32
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	f002 021f 	and.w	r2, r2, #31
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x3ba>
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f000 bd31 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4ba0      	ldr	r3, [pc, #640]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	21f8      	movs	r1, #248	; 0xf8
 8000cb2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000cba:	fa91 f1a1 	rbit	r1, r1
 8000cbe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000cc2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000cc6:	fab1 f181 	clz	r1, r1
 8000cca:	b2c9      	uxtb	r1, r1
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	4995      	ldr	r1, [pc, #596]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd4:	e0f5      	b.n	8000ec2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 8085 	beq.w	8000dec <HAL_RCC_OscConfig+0x504>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000cf4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fb19 	bl	8000344 <HAL_GetTick>
 8000d12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d16:	e00a      	b.n	8000d2e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fb14 	bl	8000344 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d902      	bls.n	8000d2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f000 bceb 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000d40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x476>
 8000d58:	4b72      	ldr	r3, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	e013      	b.n	8000d86 <HAL_RCC_OscConfig+0x49e>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d82:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	2202      	movs	r2, #2
 8000d88:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d90:	fa92 f2a2 	rbit	r2, r2
 8000d94:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000d98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d9c:	fab2 f282 	clz	r2, r2
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	f042 0220 	orr.w	r2, r2, #32
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	f002 021f 	and.w	r2, r2, #31
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0af      	beq.n	8000d18 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db8:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	21f8      	movs	r1, #248	; 0xf8
 8000dc8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dcc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000dd0:	fa91 f1a1 	rbit	r1, r1
 8000dd4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000dd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ddc:	fab1 f181 	clz	r1, r1
 8000de0:	b2c9      	uxtb	r1, r1
 8000de2:	408b      	lsls	r3, r1
 8000de4:	494f      	ldr	r1, [pc, #316]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
 8000dea:	e06a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x5da>
 8000dec:	2301      	movs	r3, #1
 8000dee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000dfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e02:	fab3 f383 	clz	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	461a      	mov	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fa94 	bl	8000344 <HAL_GetTick>
 8000e1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fa8f 	bl	8000344 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d902      	bls.n	8000e38 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f000 bc66 	b.w	8001704 <HAL_RCC_OscConfig+0xe1c>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	095b      	lsrs	r3, r3, #5
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <HAL_RCC_OscConfig+0x580>
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	e013      	b.n	8000e90 <HAL_RCC_OscConfig+0x5a8>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_RCC_OscConfig+0x63c>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	2202      	movs	r2, #2
 8000e92:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e96:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e9a:	fa92 f2a2 	rbit	r2, r2
 8000e9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000ea2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	f042 0220 	orr.w	r2, r2, #32
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	f002 021f 	and.w	r2, r2, #31
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1af      	bne.n	8000e22 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0308 	and.w	r3, r3, #8
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80da 	beq.w	8001086 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d069      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x6c8>
 8000edc:	2301      	movs	r3, #1
 8000ede:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000eee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_RCC_OscConfig+0x640>)
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	461a      	mov	r2, r3
 8000f02:	2301      	movs	r3, #1
 8000f04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fa1d 	bl	8000344 <HAL_GetTick>
 8000f0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	e00d      	b.n	8000f2c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fa18 	bl	8000344 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d905      	bls.n	8000f2c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e3ef      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 8000f24:	40021000 	.word	0x40021000
 8000f28:	10908120 	.word	0x10908120
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f36:	fa93 f2a3 	rbit	r2, r3
 8000f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f44:	2202      	movs	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	fa93 f2a3 	rbit	r2, r3
 8000f52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	fa93 f2a3 	rbit	r2, r3
 8000f6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f70:	4ba4      	ldr	r3, [pc, #656]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8000f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f74:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f78:	2102      	movs	r1, #2
 8000f7a:	6019      	str	r1, [r3, #0]
 8000f7c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	fa93 f1a3 	rbit	r1, r3
 8000f86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f8a:	6019      	str	r1, [r3, #0]
  return result;
 8000f8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0b0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x628>
 8000fae:	e06a      	b.n	8001086 <HAL_RCC_OscConfig+0x79e>
 8000fb0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	fa93 f2a3 	rbit	r2, r3
 8000fc2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fc6:	601a      	str	r2, [r3, #0]
  return result;
 8000fc8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fcc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b8c      	ldr	r3, [pc, #560]	; (8001208 <HAL_RCC_OscConfig+0x920>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2300      	movs	r3, #0
 8000fe0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff f9af 	bl	8000344 <HAL_GetTick>
 8000fe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	e009      	b.n	8001000 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff f9aa 	bl	8000344 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e381      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 8001000:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001004:	2202      	movs	r2, #2
 8001006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	fa93 f2a3 	rbit	r2, r3
 8001012:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101c:	2202      	movs	r2, #2
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	fa93 f2a3 	rbit	r2, r3
 800102a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001034:	2202      	movs	r2, #2
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	fa93 f2a3 	rbit	r2, r3
 8001042:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001046:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 800104a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800104c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001050:	2102      	movs	r1, #2
 8001052:	6019      	str	r1, [r3, #0]
 8001054:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	fa93 f1a3 	rbit	r1, r3
 800105e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001062:	6019      	str	r1, [r3, #0]
  return result;
 8001064:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	fab3 f383 	clz	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	2101      	movs	r1, #1
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1b2      	bne.n	8000fec <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8157 	beq.w	8001344 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d112      	bne.n	80010ce <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	4a55      	ldr	r2, [pc, #340]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	61d3      	str	r3, [r2, #28]
 80010b4:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b4f      	ldr	r3, [pc, #316]	; (800120c <HAL_RCC_OscConfig+0x924>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11a      	bne.n	8001110 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_RCC_OscConfig+0x924>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_RCC_OscConfig+0x924>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff f92d 	bl	8000344 <HAL_GetTick>
 80010ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ee:	e009      	b.n	8001104 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f0:	f7ff f928 	bl	8000344 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b64      	cmp	r3, #100	; 0x64
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e2ff      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_RCC_OscConfig+0x924>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0ef      	beq.n	80010f0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x840>
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	e02f      	b.n	8001188 <HAL_RCC_OscConfig+0x8a0>
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x864>
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0x8a0>
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x888>
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a27      	ldr	r2, [pc, #156]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0x8a0>
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001182:	f023 0304 	bic.w	r3, r3, #4
 8001186:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d06a      	beq.n	8001268 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff f8d7 	bl	8000344 <HAL_GetTick>
 8001196:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff f8d2 	bl	8000344 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e2a7      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 80011b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011b8:	2202      	movs	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	fa93 f2a3 	rbit	r2, r3
 80011c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011d0:	2202      	movs	r2, #2
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fa93 f2a3 	rbit	r2, r3
 80011de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011e2:	601a      	str	r2, [r3, #0]
  return result;
 80011e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d108      	bne.n	8001210 <HAL_RCC_OscConfig+0x928>
 80011fe:	4b01      	ldr	r3, [pc, #4]	; (8001204 <HAL_RCC_OscConfig+0x91c>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	e013      	b.n	800122c <HAL_RCC_OscConfig+0x944>
 8001204:	40021000 	.word	0x40021000
 8001208:	10908120 	.word	0x10908120
 800120c:	40007000 	.word	0x40007000
 8001210:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001214:	2202      	movs	r2, #2
 8001216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	fa93 f2a3 	rbit	r2, r3
 8001222:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	4bc0      	ldr	r3, [pc, #768]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001230:	2102      	movs	r1, #2
 8001232:	6011      	str	r1, [r2, #0]
 8001234:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	fa92 f1a2 	rbit	r1, r2
 800123e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001242:	6011      	str	r1, [r2, #0]
  return result;
 8001244:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f002 021f 	and.w	r2, r2, #31
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d09a      	beq.n	800119c <HAL_RCC_OscConfig+0x8b4>
 8001266:	e063      	b.n	8001330 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff f86c 	bl	8000344 <HAL_GetTick>
 800126c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00b      	b.n	800128a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff f867 	bl	8000344 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e23c      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 800128a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800128e:	2202      	movs	r2, #2
 8001290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fa93 f2a3 	rbit	r2, r3
 800129c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a6:	2202      	movs	r2, #2
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	fa93 f2a3 	rbit	r2, r3
 80012b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012b8:	601a      	str	r2, [r3, #0]
  return result;
 80012ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x9f2>
 80012d4:	4b95      	ldr	r3, [pc, #596]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	e00d      	b.n	80012f6 <HAL_RCC_OscConfig+0xa0e>
 80012da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012de:	2202      	movs	r2, #2
 80012e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	fa93 f2a3 	rbit	r2, r3
 80012ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	4b8e      	ldr	r3, [pc, #568]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012fa:	2102      	movs	r1, #2
 80012fc:	6011      	str	r1, [r2, #0]
 80012fe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	fa92 f1a2 	rbit	r1, r2
 8001308:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800130c:	6011      	str	r1, [r2, #0]
  return result;
 800130e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	fab2 f282 	clz	r2, r2
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1a0      	bne.n	8001272 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001330:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	4b7c      	ldr	r3, [pc, #496]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a7b      	ldr	r2, [pc, #492]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 800133e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001342:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 81d9 	beq.w	8001702 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	f000 81a6 	beq.w	80016aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b02      	cmp	r3, #2
 8001366:	f040 811e 	bne.w	80015a6 <HAL_RCC_OscConfig+0xcbe>
 800136a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800136e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001382:	601a      	str	r2, [r3, #0]
  return result;
 8001384:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001388:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001394:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	461a      	mov	r2, r3
 800139c:	2300      	movs	r3, #0
 800139e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7fe ffd0 	bl	8000344 <HAL_GetTick>
 80013a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	e009      	b.n	80013be <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013aa:	f7fe ffcb 	bl	8000344 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1a2      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 80013be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	fa93 f2a3 	rbit	r2, r3
 80013d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013d6:	601a      	str	r2, [r3, #0]
  return result;
 80013d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	095b      	lsrs	r3, r3, #5
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <HAL_RCC_OscConfig+0xb10>
 80013f2:	4b4e      	ldr	r3, [pc, #312]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	e01b      	b.n	8001430 <HAL_RCC_OscConfig+0xb48>
 80013f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001434:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001438:	6011      	str	r1, [r2, #0]
 800143a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	fa92 f1a2 	rbit	r1, r2
 8001444:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001448:	6011      	str	r1, [r2, #0]
  return result;
 800144a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d19e      	bne.n	80013aa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	f023 020f 	bic.w	r2, r3, #15
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	492c      	ldr	r1, [pc, #176]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 800147c:	4313      	orrs	r3, r2
 800147e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6a19      	ldr	r1, [r3, #32]
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	430b      	orrs	r3, r1
 8001496:	4925      	ldr	r1, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
 800149c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014b4:	601a      	str	r2, [r3, #0]
  return result;
 80014b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	461a      	mov	r2, r3
 80014ce:	2301      	movs	r3, #1
 80014d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7fe ff37 	bl	8000344 <HAL_GetTick>
 80014d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014da:	e009      	b.n	80014f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7fe ff32 	bl	8000344 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e109      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 80014f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001508:	601a      	str	r2, [r3, #0]
  return result;
 800150a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800150e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0xc48>
 8001524:	4b01      	ldr	r3, [pc, #4]	; (800152c <HAL_RCC_OscConfig+0xc44>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e01e      	b.n	8001568 <HAL_RCC_OscConfig+0xc80>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800154e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_RCC_OscConfig+0xe28>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800156c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001570:	6011      	str	r1, [r2, #0]
 8001572:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	fa92 f1a2 	rbit	r1, r2
 800157c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001580:	6011      	str	r1, [r2, #0]
  return result;
 8001582:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	fab2 f282 	clz	r2, r2
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f042 0220 	orr.w	r2, r2, #32
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f002 021f 	and.w	r2, r2, #31
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d09b      	beq.n	80014dc <HAL_RCC_OscConfig+0xbf4>
 80015a4:	e0ad      	b.n	8001702 <HAL_RCC_OscConfig+0xe1a>
 80015a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015be:	601a      	str	r2, [r3, #0]
  return result;
 80015c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	461a      	mov	r2, r3
 80015d8:	2300      	movs	r3, #0
 80015da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7fe feb2 	bl	8000344 <HAL_GetTick>
 80015e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	e009      	b.n	80015fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7fe fead 	bl	8000344 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e084      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	fa93 f2a3 	rbit	r2, r3
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	601a      	str	r2, [r3, #0]
  return result;
 8001614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001618:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_RCC_OscConfig+0xd4c>
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_RCC_OscConfig+0xe28>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	e01b      	b.n	800166c <HAL_RCC_OscConfig+0xd84>
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_RCC_OscConfig+0xe28>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	f107 0214 	add.w	r2, r7, #20
 8001670:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001674:	6011      	str	r1, [r2, #0]
 8001676:	f107 0214 	add.w	r2, r7, #20
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	fa92 f1a2 	rbit	r1, r2
 8001680:	f107 0210 	add.w	r2, r7, #16
 8001684:	6011      	str	r1, [r2, #0]
  return result;
 8001686:	f107 0210 	add.w	r2, r7, #16
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	fab2 f282 	clz	r2, r2
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f042 0220 	orr.w	r2, r2, #32
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f002 021f 	and.w	r2, r2, #31
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d19e      	bne.n	80015e6 <HAL_RCC_OscConfig+0xcfe>
 80016a8:	e02b      	b.n	8001702 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e025      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0xe28>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_RCC_OscConfig+0xe28>)
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80016c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016cc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d111      	bne.n	80016fe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80016da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d108      	bne.n	80016fe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80016ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f0:	f003 020f 	and.w	r2, r3, #15
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09e      	sub	sp, #120	; 0x78
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e162      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b90      	ldr	r3, [pc, #576]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d910      	bls.n	800175c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	498b      	ldr	r1, [pc, #556]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e14a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b82      	ldr	r3, [pc, #520]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	497f      	ldr	r1, [pc, #508]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80dc 	beq.w	8001940 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d13c      	bne.n	800180a <HAL_RCC_ClockConfig+0xf6>
 8001790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001794:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800179e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_ClockConfig+0xa6>
 80017b4:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e00f      	b.n	80017da <HAL_RCC_ClockConfig+0xc6>
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	667b      	str	r3, [r7, #100]	; 0x64
 80017c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017cc:	663b      	str	r3, [r7, #96]	; 0x60
 80017ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017de:	65ba      	str	r2, [r7, #88]	; 0x58
 80017e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017e2:	fa92 f2a2 	rbit	r2, r2
 80017e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80017e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d17b      	bne.n	80018fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0f3      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d13c      	bne.n	800188c <HAL_RCC_ClockConfig+0x178>
 8001812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d102      	bne.n	800183c <HAL_RCC_ClockConfig+0x128>
 8001836:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	e00f      	b.n	800185c <HAL_RCC_ClockConfig+0x148>
 800183c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001840:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	647b      	str	r3, [r7, #68]	; 0x44
 800184a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
 8001850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001858:	4b46      	ldr	r3, [pc, #280]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001860:	63ba      	str	r2, [r7, #56]	; 0x38
 8001862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001864:	fa92 f2a2 	rbit	r2, r2
 8001868:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800186a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800186c:	fab2 f282 	clz	r2, r2
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f042 0220 	orr.w	r2, r2, #32
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	f002 021f 	and.w	r2, r2, #31
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d13a      	bne.n	80018fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b2      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
 800188c:	2302      	movs	r3, #2
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x1a0>
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	e00d      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1bc>
 80018b4:	2302      	movs	r3, #2
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	2202      	movs	r2, #2
 80018d2:	61ba      	str	r2, [r7, #24]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	fa92 f2a2 	rbit	r2, r2
 80018da:	617a      	str	r2, [r7, #20]
  return result;
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e079      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	491a      	ldr	r1, [pc, #104]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7fe fd18 	bl	8000344 <HAL_GetTick>
 8001914:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7fe fd14 	bl	8000344 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e061      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_RCC_ClockConfig+0x260>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d214      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4906      	ldr	r1, [pc, #24]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <HAL_RCC_ClockConfig+0x25c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e040      	b.n	80019f2 <HAL_RCC_ClockConfig+0x2de>
 8001970:	40022000 	.word	0x40022000
 8001974:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_ClockConfig+0x2e8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	491a      	ldr	r1, [pc, #104]	; (80019fc <HAL_RCC_ClockConfig+0x2e8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x2e8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4912      	ldr	r1, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x2e8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019b6:	f000 f829 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ba:	4601      	mov	r1, r0
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_ClockConfig+0x2e8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c4:	22f0      	movs	r2, #240	; 0xf0
 80019c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	fa92 f2a2 	rbit	r2, r2
 80019ce:	60fa      	str	r2, [r7, #12]
  return result;
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	fab2 f282 	clz	r2, r2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	40d3      	lsrs	r3, r2
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x2ec>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	fa21 f303 	lsr.w	r3, r1, r3
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_RCC_ClockConfig+0x2f0>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_RCC_ClockConfig+0x2f4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fc66 	bl	80002bc <HAL_InitTick>
  
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3778      	adds	r7, #120	; 0x78
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	080030a8 	.word	0x080030a8
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x30>
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x36>
 8001a3a:	e03f      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a3e:	623b      	str	r3, [r7, #32]
      break;
 8001a40:	e03f      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001a48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001a4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	fa92 f2a2 	rbit	r2, r2
 8001a54:	607a      	str	r2, [r7, #4]
  return result;
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	fab2 f282 	clz	r2, r2
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	40d3      	lsrs	r3, r2
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	220f      	movs	r2, #15
 8001a70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	fa92 f2a2 	rbit	r2, r2
 8001a78:	60fa      	str	r2, [r7, #12]
  return result;
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	40d3      	lsrs	r3, r2
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a94:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	e007      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	623b      	str	r3, [r7, #32]
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001abe:	623b      	str	r3, [r7, #32]
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	372c      	adds	r7, #44	; 0x2c
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	007a1200 	.word	0x007a1200
 8001ad8:	08003088 	.word	0x08003088
 8001adc:	08003098 	.word	0x08003098

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001afe:	f7ff ffef 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b02:	4601      	mov	r1, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	603a      	str	r2, [r7, #0]
  return result;
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	40d3      	lsrs	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080030b8 	.word	0x080030b8

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b42:	f7ff ffcd 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b46:	4601      	mov	r1, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	fa92 f2a2 	rbit	r2, r2
 8001b5c:	603a      	str	r2, [r7, #0]
  return result;
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	40d3      	lsrs	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	080030b8 	.word	0x080030b8

08001b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e040      	b.n	8001c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fd80 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8c0 	bl	8001d44 <UART_SetConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e022      	b.n	8001c14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 face 	bl	8002178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb55 	bl	80022bc <UART_CheckIdleState>
 8001c12:	4603      	mov	r3, r0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	f040 8081 	bne.w	8001d38 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_UART_Transmit+0x26>
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e079      	b.n	8001d3a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_UART_Transmit+0x38>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e072      	b.n	8001d3a <HAL_UART_Transmit+0x11e>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2221      	movs	r2, #33	; 0x21
 8001c66:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c68:	f7fe fb6c 	bl	8000344 <HAL_GetTick>
 8001c6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c86:	d108      	bne.n	8001c9a <HAL_UART_Transmit+0x7e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	e003      	b.n	8001ca2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ca2:	e02d      	b.n	8001d00 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2200      	movs	r2, #0
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fb49 	bl	8002346 <UART_WaitOnFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e03d      	b.n	8001d3a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10b      	bne.n	8001cdc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	881a      	ldrh	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	e008      	b.n	8001cee <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	3301      	adds	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1cb      	bne.n	8001ca4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2200      	movs	r2, #0
 8001d14:	2140      	movs	r1, #64	; 0x40
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fb15 	bl	8002346 <UART_WaitOnFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e009      	b.n	8001d3a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4bac      	ldr	r3, [pc, #688]	; (8002024 <UART_SetConfig+0x2e0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	6939      	ldr	r1, [r7, #16]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a9a      	ldr	r2, [pc, #616]	; (8002028 <UART_SetConfig+0x2e4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d121      	bne.n	8001e08 <UART_SetConfig+0xc4>
 8001dc4:	4b99      	ldr	r3, [pc, #612]	; (800202c <UART_SetConfig+0x2e8>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d817      	bhi.n	8001e00 <UART_SetConfig+0xbc>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <UART_SetConfig+0x94>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001dfb 	.word	0x08001dfb
 8001de4:	08001def 	.word	0x08001def
 8001de8:	2301      	movs	r3, #1
 8001dea:	77fb      	strb	r3, [r7, #31]
 8001dec:	e0b2      	b.n	8001f54 <UART_SetConfig+0x210>
 8001dee:	2302      	movs	r3, #2
 8001df0:	77fb      	strb	r3, [r7, #31]
 8001df2:	e0af      	b.n	8001f54 <UART_SetConfig+0x210>
 8001df4:	2304      	movs	r3, #4
 8001df6:	77fb      	strb	r3, [r7, #31]
 8001df8:	e0ac      	b.n	8001f54 <UART_SetConfig+0x210>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	77fb      	strb	r3, [r7, #31]
 8001dfe:	e0a9      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e00:	2310      	movs	r3, #16
 8001e02:	77fb      	strb	r3, [r7, #31]
 8001e04:	bf00      	nop
 8001e06:	e0a5      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a88      	ldr	r2, [pc, #544]	; (8002030 <UART_SetConfig+0x2ec>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d123      	bne.n	8001e5a <UART_SetConfig+0x116>
 8001e12:	4b86      	ldr	r3, [pc, #536]	; (800202c <UART_SetConfig+0x2e8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1e:	d012      	beq.n	8001e46 <UART_SetConfig+0x102>
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d802      	bhi.n	8001e2c <UART_SetConfig+0xe8>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <UART_SetConfig+0xf6>
 8001e2a:	e012      	b.n	8001e52 <UART_SetConfig+0x10e>
 8001e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e30:	d00c      	beq.n	8001e4c <UART_SetConfig+0x108>
 8001e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e36:	d003      	beq.n	8001e40 <UART_SetConfig+0xfc>
 8001e38:	e00b      	b.n	8001e52 <UART_SetConfig+0x10e>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	77fb      	strb	r3, [r7, #31]
 8001e3e:	e089      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e40:	2302      	movs	r3, #2
 8001e42:	77fb      	strb	r3, [r7, #31]
 8001e44:	e086      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e46:	2304      	movs	r3, #4
 8001e48:	77fb      	strb	r3, [r7, #31]
 8001e4a:	e083      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	77fb      	strb	r3, [r7, #31]
 8001e50:	e080      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e52:	2310      	movs	r3, #16
 8001e54:	77fb      	strb	r3, [r7, #31]
 8001e56:	bf00      	nop
 8001e58:	e07c      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a75      	ldr	r2, [pc, #468]	; (8002034 <UART_SetConfig+0x2f0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d123      	bne.n	8001eac <UART_SetConfig+0x168>
 8001e64:	4b71      	ldr	r3, [pc, #452]	; (800202c <UART_SetConfig+0x2e8>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001e6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e70:	d012      	beq.n	8001e98 <UART_SetConfig+0x154>
 8001e72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e76:	d802      	bhi.n	8001e7e <UART_SetConfig+0x13a>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <UART_SetConfig+0x148>
 8001e7c:	e012      	b.n	8001ea4 <UART_SetConfig+0x160>
 8001e7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e82:	d00c      	beq.n	8001e9e <UART_SetConfig+0x15a>
 8001e84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e88:	d003      	beq.n	8001e92 <UART_SetConfig+0x14e>
 8001e8a:	e00b      	b.n	8001ea4 <UART_SetConfig+0x160>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
 8001e90:	e060      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e92:	2302      	movs	r3, #2
 8001e94:	77fb      	strb	r3, [r7, #31]
 8001e96:	e05d      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	77fb      	strb	r3, [r7, #31]
 8001e9c:	e05a      	b.n	8001f54 <UART_SetConfig+0x210>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	77fb      	strb	r3, [r7, #31]
 8001ea2:	e057      	b.n	8001f54 <UART_SetConfig+0x210>
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	77fb      	strb	r3, [r7, #31]
 8001ea8:	bf00      	nop
 8001eaa:	e053      	b.n	8001f54 <UART_SetConfig+0x210>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a61      	ldr	r2, [pc, #388]	; (8002038 <UART_SetConfig+0x2f4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d123      	bne.n	8001efe <UART_SetConfig+0x1ba>
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <UART_SetConfig+0x2e8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec2:	d012      	beq.n	8001eea <UART_SetConfig+0x1a6>
 8001ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec8:	d802      	bhi.n	8001ed0 <UART_SetConfig+0x18c>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <UART_SetConfig+0x19a>
 8001ece:	e012      	b.n	8001ef6 <UART_SetConfig+0x1b2>
 8001ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed4:	d00c      	beq.n	8001ef0 <UART_SetConfig+0x1ac>
 8001ed6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001eda:	d003      	beq.n	8001ee4 <UART_SetConfig+0x1a0>
 8001edc:	e00b      	b.n	8001ef6 <UART_SetConfig+0x1b2>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	77fb      	strb	r3, [r7, #31]
 8001ee2:	e037      	b.n	8001f54 <UART_SetConfig+0x210>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	77fb      	strb	r3, [r7, #31]
 8001ee8:	e034      	b.n	8001f54 <UART_SetConfig+0x210>
 8001eea:	2304      	movs	r3, #4
 8001eec:	77fb      	strb	r3, [r7, #31]
 8001eee:	e031      	b.n	8001f54 <UART_SetConfig+0x210>
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	77fb      	strb	r3, [r7, #31]
 8001ef4:	e02e      	b.n	8001f54 <UART_SetConfig+0x210>
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	77fb      	strb	r3, [r7, #31]
 8001efa:	bf00      	nop
 8001efc:	e02a      	b.n	8001f54 <UART_SetConfig+0x210>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a4e      	ldr	r2, [pc, #312]	; (800203c <UART_SetConfig+0x2f8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d123      	bne.n	8001f50 <UART_SetConfig+0x20c>
 8001f08:	4b48      	ldr	r3, [pc, #288]	; (800202c <UART_SetConfig+0x2e8>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f14:	d012      	beq.n	8001f3c <UART_SetConfig+0x1f8>
 8001f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1a:	d802      	bhi.n	8001f22 <UART_SetConfig+0x1de>
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <UART_SetConfig+0x1ec>
 8001f20:	e012      	b.n	8001f48 <UART_SetConfig+0x204>
 8001f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f26:	d00c      	beq.n	8001f42 <UART_SetConfig+0x1fe>
 8001f28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f2c:	d003      	beq.n	8001f36 <UART_SetConfig+0x1f2>
 8001f2e:	e00b      	b.n	8001f48 <UART_SetConfig+0x204>
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
 8001f34:	e00e      	b.n	8001f54 <UART_SetConfig+0x210>
 8001f36:	2302      	movs	r3, #2
 8001f38:	77fb      	strb	r3, [r7, #31]
 8001f3a:	e00b      	b.n	8001f54 <UART_SetConfig+0x210>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	77fb      	strb	r3, [r7, #31]
 8001f40:	e008      	b.n	8001f54 <UART_SetConfig+0x210>
 8001f42:	2308      	movs	r3, #8
 8001f44:	77fb      	strb	r3, [r7, #31]
 8001f46:	e005      	b.n	8001f54 <UART_SetConfig+0x210>
 8001f48:	2310      	movs	r3, #16
 8001f4a:	77fb      	strb	r3, [r7, #31]
 8001f4c:	bf00      	nop
 8001f4e:	e001      	b.n	8001f54 <UART_SetConfig+0x210>
 8001f50:	2310      	movs	r3, #16
 8001f52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5c:	f040 8090 	bne.w	8002080 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d86c      	bhi.n	8002040 <UART_SetConfig+0x2fc>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <UART_SetConfig+0x228>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f91 	.word	0x08001f91
 8001f70:	08001fb1 	.word	0x08001fb1
 8001f74:	08001fd1 	.word	0x08001fd1
 8001f78:	08002041 	.word	0x08002041
 8001f7c:	08001fed 	.word	0x08001fed
 8001f80:	08002041 	.word	0x08002041
 8001f84:	08002041 	.word	0x08002041
 8001f88:	08002041 	.word	0x08002041
 8001f8c:	0800200d 	.word	0x0800200d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f90:	f7ff fdb2 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8001f94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	005a      	lsls	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	61bb      	str	r3, [r7, #24]
        break;
 8001fae:	e04a      	b.n	8002046 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fb0:	f7ff fdc4 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8001fb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	005a      	lsls	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	441a      	add	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	61bb      	str	r3, [r7, #24]
        break;
 8001fce:	e03a      	b.n	8002046 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001fda:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6852      	ldr	r2, [r2, #4]
 8001fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	61bb      	str	r3, [r7, #24]
        break;
 8001fea:	e02c      	b.n	8002046 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fec:	f7ff fd0e 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8001ff0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	005a      	lsls	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	441a      	add	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	b29b      	uxth	r3, r3
 8002008:	61bb      	str	r3, [r7, #24]
        break;
 800200a:	e01c      	b.n	8002046 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	61bb      	str	r3, [r7, #24]
        break;
 8002022:	e010      	b.n	8002046 <UART_SetConfig+0x302>
 8002024:	efff69f3 	.word	0xefff69f3
 8002028:	40013800 	.word	0x40013800
 800202c:	40021000 	.word	0x40021000
 8002030:	40004400 	.word	0x40004400
 8002034:	40004800 	.word	0x40004800
 8002038:	40004c00 	.word	0x40004c00
 800203c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
        break;
 8002044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d916      	bls.n	800207a <UART_SetConfig+0x336>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d212      	bcs.n	800207a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	b29b      	uxth	r3, r3
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	b29a      	uxth	r2, r3
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	4313      	orrs	r3, r2
 800206e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	897a      	ldrh	r2, [r7, #10]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e072      	b.n	8002160 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	e06f      	b.n	8002160 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8002080:	7ffb      	ldrb	r3, [r7, #31]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d85b      	bhi.n	800213e <UART_SetConfig+0x3fa>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <UART_SetConfig+0x348>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020b1 	.word	0x080020b1
 8002090:	080020cf 	.word	0x080020cf
 8002094:	080020ed 	.word	0x080020ed
 8002098:	0800213f 	.word	0x0800213f
 800209c:	08002109 	.word	0x08002109
 80020a0:	0800213f 	.word	0x0800213f
 80020a4:	0800213f 	.word	0x0800213f
 80020a8:	0800213f 	.word	0x0800213f
 80020ac:	08002127 	.word	0x08002127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020b0:	f7ff fd22 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 80020b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	085a      	lsrs	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	441a      	add	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	61bb      	str	r3, [r7, #24]
        break;
 80020cc:	e03a      	b.n	8002144 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80020ce:	f7ff fd35 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 80020d2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	085a      	lsrs	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	441a      	add	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	61bb      	str	r3, [r7, #24]
        break;
 80020ea:	e02b      	b.n	8002144 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80020f6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6852      	ldr	r2, [r2, #4]
 80020fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	61bb      	str	r3, [r7, #24]
        break;
 8002106:	e01d      	b.n	8002144 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002108:	f7ff fc80 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 800210c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	085a      	lsrs	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	441a      	add	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	61bb      	str	r3, [r7, #24]
        break;
 8002124:	e00e      	b.n	8002144 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	61bb      	str	r3, [r7, #24]
        break;
 800213c:	e002      	b.n	8002144 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
        break;
 8002142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	d908      	bls.n	800215c <UART_SetConfig+0x418>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d204      	bcs.n	800215c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	e001      	b.n	8002160 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800216c:	7dfb      	ldrb	r3, [r7, #23]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop

08002178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01a      	beq.n	800228e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002276:	d10a      	bne.n	800228e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
  }
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80022ca:	f7fe f83b 	bl	8000344 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d10e      	bne.n	80022fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f82a 	bl	8002346 <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e020      	b.n	800233e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d10e      	bne.n	8002328 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800230a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f814 	bl	8002346 <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e00a      	b.n	800233e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002356:	e05d      	b.n	8002414 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d059      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7fd fff0 	bl	8000344 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <UART_WaitOnFlagUntilTimeout+0x30>
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11b      	bne.n	80023ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002384:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e042      	b.n	8002434 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d02b      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ca:	d123      	bne.n	8002414 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e00f      	b.n	8002434 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	429a      	cmp	r2, r3
 8002430:	d092      	beq.n	8002358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <SysTick_Handler>:
 */

#include "stm32f3xx_hal.h"

void SysTick_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002440:	f7fd ff6c 	bl	800031c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002444:	f7fe f8b8 	bl	80005b8 <HAL_SYSTICK_IRQHandler>
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <main>:
void Error_handler(void);
void Sysclk_Config(uint8_t freq);
UART_HandleTypeDef huart2;
char msg[100];
int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	HAL_Init();
 8002450:	f7fd ff1e 	bl	8000290 <HAL_Init>

	Sysclk_Config(SYS_CLOCK_FREQ_48_MHZ);
 8002454:	2030      	movs	r0, #48	; 0x30
 8002456:	f000 f86f 	bl	8002538 <Sysclk_Config>

	UART2_Init();
 800245a:	f000 f8d9 	bl	8002610 <UART2_Init>

	memset(msg,0,sizeof(msg));
 800245e:	2264      	movs	r2, #100	; 0x64
 8002460:	2100      	movs	r1, #0
 8002462:	482f      	ldr	r0, [pc, #188]	; (8002520 <main+0xd4>)
 8002464:	f000 f9c8 	bl	80027f8 <memset>
	sprintf(msg,"SYSCLK : %ld\r\n",HAL_RCC_GetSysClockFreq());
 8002468:	f7ff fad0 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	492c      	ldr	r1, [pc, #176]	; (8002524 <main+0xd8>)
 8002472:	482b      	ldr	r0, [pc, #172]	; (8002520 <main+0xd4>)
 8002474:	f000 f9c8 	bl	8002808 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002478:	4829      	ldr	r0, [pc, #164]	; (8002520 <main+0xd4>)
 800247a:	f7fd feb1 	bl	80001e0 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29a      	uxth	r2, r3
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	4926      	ldr	r1, [pc, #152]	; (8002520 <main+0xd4>)
 8002488:	4827      	ldr	r0, [pc, #156]	; (8002528 <main+0xdc>)
 800248a:	f7ff fbc7 	bl	8001c1c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800248e:	2264      	movs	r2, #100	; 0x64
 8002490:	2100      	movs	r1, #0
 8002492:	4823      	ldr	r0, [pc, #140]	; (8002520 <main+0xd4>)
 8002494:	f000 f9b0 	bl	80027f8 <memset>
	sprintf(msg,"AHBCLK : %ld\r\n",HAL_RCC_GetHCLKFreq());
 8002498:	f7ff fb22 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	4922      	ldr	r1, [pc, #136]	; (800252c <main+0xe0>)
 80024a2:	481f      	ldr	r0, [pc, #124]	; (8002520 <main+0xd4>)
 80024a4:	f000 f9b0 	bl	8002808 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80024a8:	481d      	ldr	r0, [pc, #116]	; (8002520 <main+0xd4>)
 80024aa:	f7fd fe99 	bl	80001e0 <strlen>
 80024ae:	4603      	mov	r3, r0
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	491a      	ldr	r1, [pc, #104]	; (8002520 <main+0xd4>)
 80024b8:	481b      	ldr	r0, [pc, #108]	; (8002528 <main+0xdc>)
 80024ba:	f7ff fbaf 	bl	8001c1c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80024be:	2264      	movs	r2, #100	; 0x64
 80024c0:	2100      	movs	r1, #0
 80024c2:	4817      	ldr	r0, [pc, #92]	; (8002520 <main+0xd4>)
 80024c4:	f000 f998 	bl	80027f8 <memset>
	sprintf(msg,"APB1CLK : %ld\r\n",HAL_RCC_GetPCLK1Freq());
 80024c8:	f7ff fb16 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4917      	ldr	r1, [pc, #92]	; (8002530 <main+0xe4>)
 80024d2:	4813      	ldr	r0, [pc, #76]	; (8002520 <main+0xd4>)
 80024d4:	f000 f998 	bl	8002808 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80024d8:	4811      	ldr	r0, [pc, #68]	; (8002520 <main+0xd4>)
 80024da:	f7fd fe81 	bl	80001e0 <strlen>
 80024de:	4603      	mov	r3, r0
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <main+0xd4>)
 80024e8:	480f      	ldr	r0, [pc, #60]	; (8002528 <main+0xdc>)
 80024ea:	f7ff fb97 	bl	8001c1c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80024ee:	2264      	movs	r2, #100	; 0x64
 80024f0:	2100      	movs	r1, #0
 80024f2:	480b      	ldr	r0, [pc, #44]	; (8002520 <main+0xd4>)
 80024f4:	f000 f980 	bl	80027f8 <memset>
	sprintf(msg,"APB2CLK : %ld\r\n",HAL_RCC_GetPCLK2Freq());
 80024f8:	f7ff fb20 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	490c      	ldr	r1, [pc, #48]	; (8002534 <main+0xe8>)
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <main+0xd4>)
 8002504:	f000 f980 	bl	8002808 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <main+0xd4>)
 800250a:	f7fd fe69 	bl	80001e0 <strlen>
 800250e:	4603      	mov	r3, r0
 8002510:	b29a      	uxth	r2, r3
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	4902      	ldr	r1, [pc, #8]	; (8002520 <main+0xd4>)
 8002518:	4803      	ldr	r0, [pc, #12]	; (8002528 <main+0xdc>)
 800251a:	f7ff fb7f 	bl	8001c1c <HAL_UART_Transmit>

	while(1);
 800251e:	e7fe      	b.n	800251e <main+0xd2>
 8002520:	2000009c 	.word	0x2000009c
 8002524:	08003048 	.word	0x08003048
 8002528:	20000100 	.word	0x20000100
 800252c:	08003058 	.word	0x08003058
 8002530:	08003068 	.word	0x08003068
 8002534:	08003078 	.word	0x08003078

08002538 <Sysclk_Config>:

	return 0;
}

void Sysclk_Config(uint8_t freq)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	; 0x48
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
	uint8_t latency = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002548:	2302      	movs	r3, #2
 800254a:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 800254c:	2301      	movs	r3, #1
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.HSICalibrationValue = 16;
 8002550:	2310      	movs	r3, #16
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8002554:	2302      	movs	r3, #2
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(freq)
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b30      	cmp	r3, #48	; 0x30
 8002562:	d00d      	beq.n	8002580 <Sysclk_Config+0x48>
 8002564:	2b48      	cmp	r3, #72	; 0x48
 8002566:	d014      	beq.n	8002592 <Sysclk_Config+0x5a>
 8002568:	2b18      	cmp	r3, #24
 800256a:	d000      	beq.n	800256e <Sysclk_Config+0x36>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
			latency = FLASH_LATENCY_2;
			break;
		}
		default:
			return ;
 800256c:	e04a      	b.n	8002604 <Sysclk_Config+0xcc>
			osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV3;
 800256e:	2302      	movs	r3, #2
 8002570:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 8002572:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
			latency = FLASH_LATENCY_0;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 800257e:	e011      	b.n	80025a4 <Sysclk_Config+0x6c>
			osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV2;
 8002580:	2301      	movs	r3, #1
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL12;
 8002584:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
			latency = FLASH_LATENCY_1;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8002590:	e008      	b.n	80025a4 <Sysclk_Config+0x6c>
			osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 8002596:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
			latency = FLASH_LATENCY_2;
 800259c:	2302      	movs	r3, #2
 800259e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80025a2:	bf00      	nop
	}
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe f99d 	bl	80008e8 <HAL_RCC_OscConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <Sysclk_Config+0x80>
	{
		Error_handler();
 80025b4:	f000 f852 	bl	800265c <Error_handler>
	}
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80025b8:	230f      	movs	r3, #15
 80025ba:	60bb      	str	r3, [r7, #8]
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2302      	movs	r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c8:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80025ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ce:	61bb      	str	r3, [r7, #24]

	if(HAL_RCC_ClockConfig(&clk_init, latency)!= HAL_OK)
 80025d0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f89a 	bl	8001714 <HAL_RCC_ClockConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <Sysclk_Config+0xb2>
	{
		Error_handler();
 80025e6:	f000 f839 	bl	800265c <Error_handler>
	}
	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80025ea:	f7ff fa79 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <Sysclk_Config+0xd4>)
 80025f2:	fba3 2302 	umull	r2, r3, r3, r2
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffb4 	bl	8000566 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80025fe:	2004      	movs	r0, #4
 8002600:	f7fd ffbe 	bl	8000580 <HAL_SYSTICK_CLKSourceConfig>
}
 8002604:	3748      	adds	r7, #72	; 0x48
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <UART2_Init>:

void UART2_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <UART2_Init+0x44>)
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <UART2_Init+0x48>)
 8002618:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <UART2_Init+0x44>)
 800261c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002620:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <UART2_Init+0x44>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <UART2_Init+0x44>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <UART2_Init+0x44>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <UART2_Init+0x44>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <UART2_Init+0x44>)
 800263c:	220c      	movs	r2, #12
 800263e:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!=HAL_OK)
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <UART2_Init+0x44>)
 8002642:	f7ff fa9d 	bl	8001b80 <HAL_UART_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 800264c:	f000 f806 	bl	800265c <Error_handler>
	}
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000100 	.word	0x20000100
 8002658:	40004400 	.word	0x40004400

0800265c <Error_handler>:


void Error_handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	while(1);
 8002660:	e7fe      	b.n	8002660 <Error_handler+0x4>
	...

08002664 <HAL_MspInit>:
 *  Created on: Jun 11, 2020
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
void HAL_MspInit(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f7fd ff47 	bl	80004fc <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exception
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_MspInit+0x40>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_MspInit+0x40>)
 8002674:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002678:	6253      	str	r3, [r2, #36]	; 0x24
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	f06f 000b 	mvn.w	r0, #11
 8002682:	f7fd ff46 	bl	8000512 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	f06f 000a 	mvn.w	r0, #10
 800268e:	f7fd ff40 	bl	8000512 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	f06f 0009 	mvn.w	r0, #9
 800269a:	f7fd ff3a 	bl	8000512 <HAL_NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
  // here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_UART_MspInit+0x84>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_UART_MspInit+0x84>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	61d3      	str	r3, [r2, #28]
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_UART_MspInit+0x84>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_UART_MspInit+0x84>)
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_UART_MspInit+0x84>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	6153      	str	r3, [r2, #20]
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0x84>)
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations

	gpio_uart.Pin = GPIO_PIN_2;
 80026e0:	2304      	movs	r3, #4
 80026e2:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_TX
 80026f0:	2307      	movs	r3, #7
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fe:	f7fd ff69 	bl	80005d4 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8002702:	2308      	movs	r3, #8
 8002704:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002710:	f7fd ff60 	bl	80005d4 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC setting)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002714:	2026      	movs	r0, #38	; 0x26
 8002716:	f7fd ff18 	bl	800054a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	210f      	movs	r1, #15
 800271e:	2026      	movs	r0, #38	; 0x26
 8002720:	f7fd fef7 	bl	8000512 <HAL_NVIC_SetPriority>
}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <SystemInit+0x28>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <SystemInit+0x28>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SystemInit+0x28>)
 8002746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800274a:	609a      	str	r2, [r3, #8]
#endif
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800275c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002794 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002760:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002762:	e003      	b.n	800276c <LoopCopyDataInit>

08002764 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002766:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002768:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800276a:	3104      	adds	r1, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800276c:	480b      	ldr	r0, [pc, #44]	; (800279c <LoopForever+0xa>)
	ldr	r3, =_edata
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002770:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002772:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002774:	d3f6      	bcc.n	8002764 <CopyDataInit>
	ldr	r2, =_sbss
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002778:	e002      	b.n	8002780 <LoopFillZerobss>

0800277a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800277a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800277c:	f842 3b04 	str.w	r3, [r2], #4

08002780 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <LoopForever+0x16>)
	cmp	r2, r3
 8002782:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002784:	d3f9      	bcc.n	800277a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002786:	f7ff ffd3 	bl	8002730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278a:	f000 f811 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800278e:	f7ff fe5d 	bl	800244c <main>

08002792 <LoopForever>:

LoopForever:
    b LoopForever
 8002792:	e7fe      	b.n	8002792 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002794:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002798:	080030fc 	.word	0x080030fc
	ldr	r0, =_sdata
 800279c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027a0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80027a4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80027a8:	20000184 	.word	0x20000184

080027ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC1_2_IRQHandler>
	...

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	4e0d      	ldr	r6, [pc, #52]	; (80027e8 <__libc_init_array+0x38>)
 80027b4:	4c0d      	ldr	r4, [pc, #52]	; (80027ec <__libc_init_array+0x3c>)
 80027b6:	1ba4      	subs	r4, r4, r6
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	2500      	movs	r5, #0
 80027bc:	42a5      	cmp	r5, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	4e0b      	ldr	r6, [pc, #44]	; (80027f0 <__libc_init_array+0x40>)
 80027c2:	4c0c      	ldr	r4, [pc, #48]	; (80027f4 <__libc_init_array+0x44>)
 80027c4:	f000 fc34 	bl	8003030 <_init>
 80027c8:	1ba4      	subs	r4, r4, r6
 80027ca:	10a4      	asrs	r4, r4, #2
 80027cc:	2500      	movs	r5, #0
 80027ce:	42a5      	cmp	r5, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d8:	4798      	blx	r3
 80027da:	3501      	adds	r5, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e2:	4798      	blx	r3
 80027e4:	3501      	adds	r5, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	080030f4 	.word	0x080030f4
 80027ec:	080030f4 	.word	0x080030f4
 80027f0:	080030f4 	.word	0x080030f4
 80027f4:	080030f8 	.word	0x080030f8

080027f8 <memset>:
 80027f8:	4402      	add	r2, r0
 80027fa:	4603      	mov	r3, r0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <memset+0xa>
 8002800:	4770      	bx	lr
 8002802:	f803 1b01 	strb.w	r1, [r3], #1
 8002806:	e7f9      	b.n	80027fc <memset+0x4>

08002808 <siprintf>:
 8002808:	b40e      	push	{r1, r2, r3}
 800280a:	b500      	push	{lr}
 800280c:	b09c      	sub	sp, #112	; 0x70
 800280e:	ab1d      	add	r3, sp, #116	; 0x74
 8002810:	9002      	str	r0, [sp, #8]
 8002812:	9006      	str	r0, [sp, #24]
 8002814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002818:	4809      	ldr	r0, [pc, #36]	; (8002840 <siprintf+0x38>)
 800281a:	9107      	str	r1, [sp, #28]
 800281c:	9104      	str	r1, [sp, #16]
 800281e:	4909      	ldr	r1, [pc, #36]	; (8002844 <siprintf+0x3c>)
 8002820:	f853 2b04 	ldr.w	r2, [r3], #4
 8002824:	9105      	str	r1, [sp, #20]
 8002826:	6800      	ldr	r0, [r0, #0]
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	a902      	add	r1, sp, #8
 800282c:	f000 f866 	bl	80028fc <_svfiprintf_r>
 8002830:	9b02      	ldr	r3, [sp, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	b01c      	add	sp, #112	; 0x70
 8002838:	f85d eb04 	ldr.w	lr, [sp], #4
 800283c:	b003      	add	sp, #12
 800283e:	4770      	bx	lr
 8002840:	2000000c 	.word	0x2000000c
 8002844:	ffff0208 	.word	0xffff0208

08002848 <__ssputs_r>:
 8002848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800284c:	688e      	ldr	r6, [r1, #8]
 800284e:	429e      	cmp	r6, r3
 8002850:	4682      	mov	sl, r0
 8002852:	460c      	mov	r4, r1
 8002854:	4690      	mov	r8, r2
 8002856:	4699      	mov	r9, r3
 8002858:	d837      	bhi.n	80028ca <__ssputs_r+0x82>
 800285a:	898a      	ldrh	r2, [r1, #12]
 800285c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002860:	d031      	beq.n	80028c6 <__ssputs_r+0x7e>
 8002862:	6825      	ldr	r5, [r4, #0]
 8002864:	6909      	ldr	r1, [r1, #16]
 8002866:	1a6f      	subs	r7, r5, r1
 8002868:	6965      	ldr	r5, [r4, #20]
 800286a:	2302      	movs	r3, #2
 800286c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002870:	fb95 f5f3 	sdiv	r5, r5, r3
 8002874:	f109 0301 	add.w	r3, r9, #1
 8002878:	443b      	add	r3, r7
 800287a:	429d      	cmp	r5, r3
 800287c:	bf38      	it	cc
 800287e:	461d      	movcc	r5, r3
 8002880:	0553      	lsls	r3, r2, #21
 8002882:	d530      	bpl.n	80028e6 <__ssputs_r+0x9e>
 8002884:	4629      	mov	r1, r5
 8002886:	f000 fb2b 	bl	8002ee0 <_malloc_r>
 800288a:	4606      	mov	r6, r0
 800288c:	b950      	cbnz	r0, 80028a4 <__ssputs_r+0x5c>
 800288e:	230c      	movs	r3, #12
 8002890:	f8ca 3000 	str.w	r3, [sl]
 8002894:	89a3      	ldrh	r3, [r4, #12]
 8002896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289a:	81a3      	strh	r3, [r4, #12]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a4:	463a      	mov	r2, r7
 80028a6:	6921      	ldr	r1, [r4, #16]
 80028a8:	f000 faa8 	bl	8002dfc <memcpy>
 80028ac:	89a3      	ldrh	r3, [r4, #12]
 80028ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b6:	81a3      	strh	r3, [r4, #12]
 80028b8:	6126      	str	r6, [r4, #16]
 80028ba:	6165      	str	r5, [r4, #20]
 80028bc:	443e      	add	r6, r7
 80028be:	1bed      	subs	r5, r5, r7
 80028c0:	6026      	str	r6, [r4, #0]
 80028c2:	60a5      	str	r5, [r4, #8]
 80028c4:	464e      	mov	r6, r9
 80028c6:	454e      	cmp	r6, r9
 80028c8:	d900      	bls.n	80028cc <__ssputs_r+0x84>
 80028ca:	464e      	mov	r6, r9
 80028cc:	4632      	mov	r2, r6
 80028ce:	4641      	mov	r1, r8
 80028d0:	6820      	ldr	r0, [r4, #0]
 80028d2:	f000 fa9e 	bl	8002e12 <memmove>
 80028d6:	68a3      	ldr	r3, [r4, #8]
 80028d8:	1b9b      	subs	r3, r3, r6
 80028da:	60a3      	str	r3, [r4, #8]
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	441e      	add	r6, r3
 80028e0:	6026      	str	r6, [r4, #0]
 80028e2:	2000      	movs	r0, #0
 80028e4:	e7dc      	b.n	80028a0 <__ssputs_r+0x58>
 80028e6:	462a      	mov	r2, r5
 80028e8:	f000 fb54 	bl	8002f94 <_realloc_r>
 80028ec:	4606      	mov	r6, r0
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1e2      	bne.n	80028b8 <__ssputs_r+0x70>
 80028f2:	6921      	ldr	r1, [r4, #16]
 80028f4:	4650      	mov	r0, sl
 80028f6:	f000 faa5 	bl	8002e44 <_free_r>
 80028fa:	e7c8      	b.n	800288e <__ssputs_r+0x46>

080028fc <_svfiprintf_r>:
 80028fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002900:	461d      	mov	r5, r3
 8002902:	898b      	ldrh	r3, [r1, #12]
 8002904:	061f      	lsls	r7, r3, #24
 8002906:	b09d      	sub	sp, #116	; 0x74
 8002908:	4680      	mov	r8, r0
 800290a:	460c      	mov	r4, r1
 800290c:	4616      	mov	r6, r2
 800290e:	d50f      	bpl.n	8002930 <_svfiprintf_r+0x34>
 8002910:	690b      	ldr	r3, [r1, #16]
 8002912:	b96b      	cbnz	r3, 8002930 <_svfiprintf_r+0x34>
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	f000 fae3 	bl	8002ee0 <_malloc_r>
 800291a:	6020      	str	r0, [r4, #0]
 800291c:	6120      	str	r0, [r4, #16]
 800291e:	b928      	cbnz	r0, 800292c <_svfiprintf_r+0x30>
 8002920:	230c      	movs	r3, #12
 8002922:	f8c8 3000 	str.w	r3, [r8]
 8002926:	f04f 30ff 	mov.w	r0, #4294967295
 800292a:	e0c8      	b.n	8002abe <_svfiprintf_r+0x1c2>
 800292c:	2340      	movs	r3, #64	; 0x40
 800292e:	6163      	str	r3, [r4, #20]
 8002930:	2300      	movs	r3, #0
 8002932:	9309      	str	r3, [sp, #36]	; 0x24
 8002934:	2320      	movs	r3, #32
 8002936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800293a:	2330      	movs	r3, #48	; 0x30
 800293c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002940:	9503      	str	r5, [sp, #12]
 8002942:	f04f 0b01 	mov.w	fp, #1
 8002946:	4637      	mov	r7, r6
 8002948:	463d      	mov	r5, r7
 800294a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800294e:	b10b      	cbz	r3, 8002954 <_svfiprintf_r+0x58>
 8002950:	2b25      	cmp	r3, #37	; 0x25
 8002952:	d13e      	bne.n	80029d2 <_svfiprintf_r+0xd6>
 8002954:	ebb7 0a06 	subs.w	sl, r7, r6
 8002958:	d00b      	beq.n	8002972 <_svfiprintf_r+0x76>
 800295a:	4653      	mov	r3, sl
 800295c:	4632      	mov	r2, r6
 800295e:	4621      	mov	r1, r4
 8002960:	4640      	mov	r0, r8
 8002962:	f7ff ff71 	bl	8002848 <__ssputs_r>
 8002966:	3001      	adds	r0, #1
 8002968:	f000 80a4 	beq.w	8002ab4 <_svfiprintf_r+0x1b8>
 800296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800296e:	4453      	add	r3, sl
 8002970:	9309      	str	r3, [sp, #36]	; 0x24
 8002972:	783b      	ldrb	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 809d 	beq.w	8002ab4 <_svfiprintf_r+0x1b8>
 800297a:	2300      	movs	r3, #0
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002984:	9304      	str	r3, [sp, #16]
 8002986:	9307      	str	r3, [sp, #28]
 8002988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800298c:	931a      	str	r3, [sp, #104]	; 0x68
 800298e:	462f      	mov	r7, r5
 8002990:	2205      	movs	r2, #5
 8002992:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002996:	4850      	ldr	r0, [pc, #320]	; (8002ad8 <_svfiprintf_r+0x1dc>)
 8002998:	f7fd fc2a 	bl	80001f0 <memchr>
 800299c:	9b04      	ldr	r3, [sp, #16]
 800299e:	b9d0      	cbnz	r0, 80029d6 <_svfiprintf_r+0xda>
 80029a0:	06d9      	lsls	r1, r3, #27
 80029a2:	bf44      	itt	mi
 80029a4:	2220      	movmi	r2, #32
 80029a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029aa:	071a      	lsls	r2, r3, #28
 80029ac:	bf44      	itt	mi
 80029ae:	222b      	movmi	r2, #43	; 0x2b
 80029b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029b4:	782a      	ldrb	r2, [r5, #0]
 80029b6:	2a2a      	cmp	r2, #42	; 0x2a
 80029b8:	d015      	beq.n	80029e6 <_svfiprintf_r+0xea>
 80029ba:	9a07      	ldr	r2, [sp, #28]
 80029bc:	462f      	mov	r7, r5
 80029be:	2000      	movs	r0, #0
 80029c0:	250a      	movs	r5, #10
 80029c2:	4639      	mov	r1, r7
 80029c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c8:	3b30      	subs	r3, #48	; 0x30
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d94d      	bls.n	8002a6a <_svfiprintf_r+0x16e>
 80029ce:	b1b8      	cbz	r0, 8002a00 <_svfiprintf_r+0x104>
 80029d0:	e00f      	b.n	80029f2 <_svfiprintf_r+0xf6>
 80029d2:	462f      	mov	r7, r5
 80029d4:	e7b8      	b.n	8002948 <_svfiprintf_r+0x4c>
 80029d6:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <_svfiprintf_r+0x1dc>)
 80029d8:	1a80      	subs	r0, r0, r2
 80029da:	fa0b f000 	lsl.w	r0, fp, r0
 80029de:	4318      	orrs	r0, r3
 80029e0:	9004      	str	r0, [sp, #16]
 80029e2:	463d      	mov	r5, r7
 80029e4:	e7d3      	b.n	800298e <_svfiprintf_r+0x92>
 80029e6:	9a03      	ldr	r2, [sp, #12]
 80029e8:	1d11      	adds	r1, r2, #4
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	9103      	str	r1, [sp, #12]
 80029ee:	2a00      	cmp	r2, #0
 80029f0:	db01      	blt.n	80029f6 <_svfiprintf_r+0xfa>
 80029f2:	9207      	str	r2, [sp, #28]
 80029f4:	e004      	b.n	8002a00 <_svfiprintf_r+0x104>
 80029f6:	4252      	negs	r2, r2
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	9207      	str	r2, [sp, #28]
 80029fe:	9304      	str	r3, [sp, #16]
 8002a00:	783b      	ldrb	r3, [r7, #0]
 8002a02:	2b2e      	cmp	r3, #46	; 0x2e
 8002a04:	d10c      	bne.n	8002a20 <_svfiprintf_r+0x124>
 8002a06:	787b      	ldrb	r3, [r7, #1]
 8002a08:	2b2a      	cmp	r3, #42	; 0x2a
 8002a0a:	d133      	bne.n	8002a74 <_svfiprintf_r+0x178>
 8002a0c:	9b03      	ldr	r3, [sp, #12]
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	9203      	str	r2, [sp, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bfb8      	it	lt
 8002a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a1c:	3702      	adds	r7, #2
 8002a1e:	9305      	str	r3, [sp, #20]
 8002a20:	4d2e      	ldr	r5, [pc, #184]	; (8002adc <_svfiprintf_r+0x1e0>)
 8002a22:	7839      	ldrb	r1, [r7, #0]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4628      	mov	r0, r5
 8002a28:	f7fd fbe2 	bl	80001f0 <memchr>
 8002a2c:	b138      	cbz	r0, 8002a3e <_svfiprintf_r+0x142>
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	1b40      	subs	r0, r0, r5
 8002a32:	fa03 f000 	lsl.w	r0, r3, r0
 8002a36:	9b04      	ldr	r3, [sp, #16]
 8002a38:	4303      	orrs	r3, r0
 8002a3a:	3701      	adds	r7, #1
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	7839      	ldrb	r1, [r7, #0]
 8002a40:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <_svfiprintf_r+0x1e4>)
 8002a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a46:	2206      	movs	r2, #6
 8002a48:	1c7e      	adds	r6, r7, #1
 8002a4a:	f7fd fbd1 	bl	80001f0 <memchr>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d038      	beq.n	8002ac4 <_svfiprintf_r+0x1c8>
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <_svfiprintf_r+0x1e8>)
 8002a54:	bb13      	cbnz	r3, 8002a9c <_svfiprintf_r+0x1a0>
 8002a56:	9b03      	ldr	r3, [sp, #12]
 8002a58:	3307      	adds	r3, #7
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	3308      	adds	r3, #8
 8002a60:	9303      	str	r3, [sp, #12]
 8002a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a64:	444b      	add	r3, r9
 8002a66:	9309      	str	r3, [sp, #36]	; 0x24
 8002a68:	e76d      	b.n	8002946 <_svfiprintf_r+0x4a>
 8002a6a:	fb05 3202 	mla	r2, r5, r2, r3
 8002a6e:	2001      	movs	r0, #1
 8002a70:	460f      	mov	r7, r1
 8002a72:	e7a6      	b.n	80029c2 <_svfiprintf_r+0xc6>
 8002a74:	2300      	movs	r3, #0
 8002a76:	3701      	adds	r7, #1
 8002a78:	9305      	str	r3, [sp, #20]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	250a      	movs	r5, #10
 8002a7e:	4638      	mov	r0, r7
 8002a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a84:	3a30      	subs	r2, #48	; 0x30
 8002a86:	2a09      	cmp	r2, #9
 8002a88:	d903      	bls.n	8002a92 <_svfiprintf_r+0x196>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0c8      	beq.n	8002a20 <_svfiprintf_r+0x124>
 8002a8e:	9105      	str	r1, [sp, #20]
 8002a90:	e7c6      	b.n	8002a20 <_svfiprintf_r+0x124>
 8002a92:	fb05 2101 	mla	r1, r5, r1, r2
 8002a96:	2301      	movs	r3, #1
 8002a98:	4607      	mov	r7, r0
 8002a9a:	e7f0      	b.n	8002a7e <_svfiprintf_r+0x182>
 8002a9c:	ab03      	add	r3, sp, #12
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <_svfiprintf_r+0x1ec>)
 8002aa4:	a904      	add	r1, sp, #16
 8002aa6:	4640      	mov	r0, r8
 8002aa8:	f3af 8000 	nop.w
 8002aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ab0:	4681      	mov	r9, r0
 8002ab2:	d1d6      	bne.n	8002a62 <_svfiprintf_r+0x166>
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	065b      	lsls	r3, r3, #25
 8002ab8:	f53f af35 	bmi.w	8002926 <_svfiprintf_r+0x2a>
 8002abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002abe:	b01d      	add	sp, #116	; 0x74
 8002ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac4:	ab03      	add	r3, sp, #12
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4622      	mov	r2, r4
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <_svfiprintf_r+0x1ec>)
 8002acc:	a904      	add	r1, sp, #16
 8002ace:	4640      	mov	r0, r8
 8002ad0:	f000 f882 	bl	8002bd8 <_printf_i>
 8002ad4:	e7ea      	b.n	8002aac <_svfiprintf_r+0x1b0>
 8002ad6:	bf00      	nop
 8002ad8:	080030c0 	.word	0x080030c0
 8002adc:	080030c6 	.word	0x080030c6
 8002ae0:	080030ca 	.word	0x080030ca
 8002ae4:	00000000 	.word	0x00000000
 8002ae8:	08002849 	.word	0x08002849

08002aec <_printf_common>:
 8002aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002af0:	4691      	mov	r9, r2
 8002af2:	461f      	mov	r7, r3
 8002af4:	688a      	ldr	r2, [r1, #8]
 8002af6:	690b      	ldr	r3, [r1, #16]
 8002af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bfb8      	it	lt
 8002b00:	4613      	movlt	r3, r2
 8002b02:	f8c9 3000 	str.w	r3, [r9]
 8002b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	b112      	cbz	r2, 8002b16 <_printf_common+0x2a>
 8002b10:	3301      	adds	r3, #1
 8002b12:	f8c9 3000 	str.w	r3, [r9]
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	0699      	lsls	r1, r3, #26
 8002b1a:	bf42      	ittt	mi
 8002b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b20:	3302      	addmi	r3, #2
 8002b22:	f8c9 3000 	strmi.w	r3, [r9]
 8002b26:	6825      	ldr	r5, [r4, #0]
 8002b28:	f015 0506 	ands.w	r5, r5, #6
 8002b2c:	d107      	bne.n	8002b3e <_printf_common+0x52>
 8002b2e:	f104 0a19 	add.w	sl, r4, #25
 8002b32:	68e3      	ldr	r3, [r4, #12]
 8002b34:	f8d9 2000 	ldr.w	r2, [r9]
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	42ab      	cmp	r3, r5
 8002b3c:	dc28      	bgt.n	8002b90 <_printf_common+0xa4>
 8002b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	3300      	adds	r3, #0
 8002b46:	bf18      	it	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	0692      	lsls	r2, r2, #26
 8002b4c:	d42d      	bmi.n	8002baa <_printf_common+0xbe>
 8002b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b52:	4639      	mov	r1, r7
 8002b54:	4630      	mov	r0, r6
 8002b56:	47c0      	blx	r8
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d020      	beq.n	8002b9e <_printf_common+0xb2>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	68e5      	ldr	r5, [r4, #12]
 8002b60:	f8d9 2000 	ldr.w	r2, [r9]
 8002b64:	f003 0306 	and.w	r3, r3, #6
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	bf08      	it	eq
 8002b6c:	1aad      	subeq	r5, r5, r2
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	bf0c      	ite	eq
 8002b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b78:	2500      	movne	r5, #0
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	bfc4      	itt	gt
 8002b7e:	1a9b      	subgt	r3, r3, r2
 8002b80:	18ed      	addgt	r5, r5, r3
 8002b82:	f04f 0900 	mov.w	r9, #0
 8002b86:	341a      	adds	r4, #26
 8002b88:	454d      	cmp	r5, r9
 8002b8a:	d11a      	bne.n	8002bc2 <_printf_common+0xd6>
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e008      	b.n	8002ba2 <_printf_common+0xb6>
 8002b90:	2301      	movs	r3, #1
 8002b92:	4652      	mov	r2, sl
 8002b94:	4639      	mov	r1, r7
 8002b96:	4630      	mov	r0, r6
 8002b98:	47c0      	blx	r8
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	d103      	bne.n	8002ba6 <_printf_common+0xba>
 8002b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba6:	3501      	adds	r5, #1
 8002ba8:	e7c3      	b.n	8002b32 <_printf_common+0x46>
 8002baa:	18e1      	adds	r1, r4, r3
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	2030      	movs	r0, #48	; 0x30
 8002bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bb4:	4422      	add	r2, r4
 8002bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	e7c5      	b.n	8002b4e <_printf_common+0x62>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	4639      	mov	r1, r7
 8002bc8:	4630      	mov	r0, r6
 8002bca:	47c0      	blx	r8
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d0e6      	beq.n	8002b9e <_printf_common+0xb2>
 8002bd0:	f109 0901 	add.w	r9, r9, #1
 8002bd4:	e7d8      	b.n	8002b88 <_printf_common+0x9c>
	...

08002bd8 <_printf_i>:
 8002bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002be0:	460c      	mov	r4, r1
 8002be2:	7e09      	ldrb	r1, [r1, #24]
 8002be4:	b085      	sub	sp, #20
 8002be6:	296e      	cmp	r1, #110	; 0x6e
 8002be8:	4617      	mov	r7, r2
 8002bea:	4606      	mov	r6, r0
 8002bec:	4698      	mov	r8, r3
 8002bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bf0:	f000 80b3 	beq.w	8002d5a <_printf_i+0x182>
 8002bf4:	d822      	bhi.n	8002c3c <_printf_i+0x64>
 8002bf6:	2963      	cmp	r1, #99	; 0x63
 8002bf8:	d036      	beq.n	8002c68 <_printf_i+0x90>
 8002bfa:	d80a      	bhi.n	8002c12 <_printf_i+0x3a>
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	f000 80b9 	beq.w	8002d74 <_printf_i+0x19c>
 8002c02:	2958      	cmp	r1, #88	; 0x58
 8002c04:	f000 8083 	beq.w	8002d0e <_printf_i+0x136>
 8002c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c10:	e032      	b.n	8002c78 <_printf_i+0xa0>
 8002c12:	2964      	cmp	r1, #100	; 0x64
 8002c14:	d001      	beq.n	8002c1a <_printf_i+0x42>
 8002c16:	2969      	cmp	r1, #105	; 0x69
 8002c18:	d1f6      	bne.n	8002c08 <_printf_i+0x30>
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	6813      	ldr	r3, [r2, #0]
 8002c1e:	0605      	lsls	r5, r0, #24
 8002c20:	f103 0104 	add.w	r1, r3, #4
 8002c24:	d52a      	bpl.n	8002c7c <_printf_i+0xa4>
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	da03      	bge.n	8002c36 <_printf_i+0x5e>
 8002c2e:	222d      	movs	r2, #45	; 0x2d
 8002c30:	425b      	negs	r3, r3
 8002c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c36:	486f      	ldr	r0, [pc, #444]	; (8002df4 <_printf_i+0x21c>)
 8002c38:	220a      	movs	r2, #10
 8002c3a:	e039      	b.n	8002cb0 <_printf_i+0xd8>
 8002c3c:	2973      	cmp	r1, #115	; 0x73
 8002c3e:	f000 809d 	beq.w	8002d7c <_printf_i+0x1a4>
 8002c42:	d808      	bhi.n	8002c56 <_printf_i+0x7e>
 8002c44:	296f      	cmp	r1, #111	; 0x6f
 8002c46:	d020      	beq.n	8002c8a <_printf_i+0xb2>
 8002c48:	2970      	cmp	r1, #112	; 0x70
 8002c4a:	d1dd      	bne.n	8002c08 <_printf_i+0x30>
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	f043 0320 	orr.w	r3, r3, #32
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	e003      	b.n	8002c5e <_printf_i+0x86>
 8002c56:	2975      	cmp	r1, #117	; 0x75
 8002c58:	d017      	beq.n	8002c8a <_printf_i+0xb2>
 8002c5a:	2978      	cmp	r1, #120	; 0x78
 8002c5c:	d1d4      	bne.n	8002c08 <_printf_i+0x30>
 8002c5e:	2378      	movs	r3, #120	; 0x78
 8002c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c64:	4864      	ldr	r0, [pc, #400]	; (8002df8 <_printf_i+0x220>)
 8002c66:	e055      	b.n	8002d14 <_printf_i+0x13c>
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	1d19      	adds	r1, r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6011      	str	r1, [r2, #0]
 8002c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e08c      	b.n	8002d96 <_printf_i+0x1be>
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6011      	str	r1, [r2, #0]
 8002c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c84:	bf18      	it	ne
 8002c86:	b21b      	sxthne	r3, r3
 8002c88:	e7cf      	b.n	8002c2a <_printf_i+0x52>
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	6825      	ldr	r5, [r4, #0]
 8002c8e:	1d18      	adds	r0, r3, #4
 8002c90:	6010      	str	r0, [r2, #0]
 8002c92:	0628      	lsls	r0, r5, #24
 8002c94:	d501      	bpl.n	8002c9a <_printf_i+0xc2>
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	e002      	b.n	8002ca0 <_printf_i+0xc8>
 8002c9a:	0668      	lsls	r0, r5, #25
 8002c9c:	d5fb      	bpl.n	8002c96 <_printf_i+0xbe>
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	4854      	ldr	r0, [pc, #336]	; (8002df4 <_printf_i+0x21c>)
 8002ca2:	296f      	cmp	r1, #111	; 0x6f
 8002ca4:	bf14      	ite	ne
 8002ca6:	220a      	movne	r2, #10
 8002ca8:	2208      	moveq	r2, #8
 8002caa:	2100      	movs	r1, #0
 8002cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cb0:	6865      	ldr	r5, [r4, #4]
 8002cb2:	60a5      	str	r5, [r4, #8]
 8002cb4:	2d00      	cmp	r5, #0
 8002cb6:	f2c0 8095 	blt.w	8002de4 <_printf_i+0x20c>
 8002cba:	6821      	ldr	r1, [r4, #0]
 8002cbc:	f021 0104 	bic.w	r1, r1, #4
 8002cc0:	6021      	str	r1, [r4, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13d      	bne.n	8002d42 <_printf_i+0x16a>
 8002cc6:	2d00      	cmp	r5, #0
 8002cc8:	f040 808e 	bne.w	8002de8 <_printf_i+0x210>
 8002ccc:	4665      	mov	r5, ip
 8002cce:	2a08      	cmp	r2, #8
 8002cd0:	d10b      	bne.n	8002cea <_printf_i+0x112>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	07db      	lsls	r3, r3, #31
 8002cd6:	d508      	bpl.n	8002cea <_printf_i+0x112>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	6862      	ldr	r2, [r4, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	bfde      	ittt	le
 8002ce0:	2330      	movle	r3, #48	; 0x30
 8002ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cea:	ebac 0305 	sub.w	r3, ip, r5
 8002cee:	6123      	str	r3, [r4, #16]
 8002cf0:	f8cd 8000 	str.w	r8, [sp]
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	aa03      	add	r2, sp, #12
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f7ff fef6 	bl	8002aec <_printf_common>
 8002d00:	3001      	adds	r0, #1
 8002d02:	d14d      	bne.n	8002da0 <_printf_i+0x1c8>
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	b005      	add	sp, #20
 8002d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d0e:	4839      	ldr	r0, [pc, #228]	; (8002df4 <_printf_i+0x21c>)
 8002d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	6821      	ldr	r1, [r4, #0]
 8002d18:	1d1d      	adds	r5, r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6015      	str	r5, [r2, #0]
 8002d1e:	060a      	lsls	r2, r1, #24
 8002d20:	d50b      	bpl.n	8002d3a <_printf_i+0x162>
 8002d22:	07ca      	lsls	r2, r1, #31
 8002d24:	bf44      	itt	mi
 8002d26:	f041 0120 	orrmi.w	r1, r1, #32
 8002d2a:	6021      	strmi	r1, [r4, #0]
 8002d2c:	b91b      	cbnz	r3, 8002d36 <_printf_i+0x15e>
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	f022 0220 	bic.w	r2, r2, #32
 8002d34:	6022      	str	r2, [r4, #0]
 8002d36:	2210      	movs	r2, #16
 8002d38:	e7b7      	b.n	8002caa <_printf_i+0xd2>
 8002d3a:	064d      	lsls	r5, r1, #25
 8002d3c:	bf48      	it	mi
 8002d3e:	b29b      	uxthmi	r3, r3
 8002d40:	e7ef      	b.n	8002d22 <_printf_i+0x14a>
 8002d42:	4665      	mov	r5, ip
 8002d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d48:	fb02 3311 	mls	r3, r2, r1, r3
 8002d4c:	5cc3      	ldrb	r3, [r0, r3]
 8002d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d52:	460b      	mov	r3, r1
 8002d54:	2900      	cmp	r1, #0
 8002d56:	d1f5      	bne.n	8002d44 <_printf_i+0x16c>
 8002d58:	e7b9      	b.n	8002cce <_printf_i+0xf6>
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	6825      	ldr	r5, [r4, #0]
 8002d5e:	6961      	ldr	r1, [r4, #20]
 8002d60:	1d18      	adds	r0, r3, #4
 8002d62:	6010      	str	r0, [r2, #0]
 8002d64:	0628      	lsls	r0, r5, #24
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	d501      	bpl.n	8002d6e <_printf_i+0x196>
 8002d6a:	6019      	str	r1, [r3, #0]
 8002d6c:	e002      	b.n	8002d74 <_printf_i+0x19c>
 8002d6e:	066a      	lsls	r2, r5, #25
 8002d70:	d5fb      	bpl.n	8002d6a <_printf_i+0x192>
 8002d72:	8019      	strh	r1, [r3, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	6123      	str	r3, [r4, #16]
 8002d78:	4665      	mov	r5, ip
 8002d7a:	e7b9      	b.n	8002cf0 <_printf_i+0x118>
 8002d7c:	6813      	ldr	r3, [r2, #0]
 8002d7e:	1d19      	adds	r1, r3, #4
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	681d      	ldr	r5, [r3, #0]
 8002d84:	6862      	ldr	r2, [r4, #4]
 8002d86:	2100      	movs	r1, #0
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7fd fa31 	bl	80001f0 <memchr>
 8002d8e:	b108      	cbz	r0, 8002d94 <_printf_i+0x1bc>
 8002d90:	1b40      	subs	r0, r0, r5
 8002d92:	6060      	str	r0, [r4, #4]
 8002d94:	6863      	ldr	r3, [r4, #4]
 8002d96:	6123      	str	r3, [r4, #16]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d9e:	e7a7      	b.n	8002cf0 <_printf_i+0x118>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	462a      	mov	r2, r5
 8002da4:	4639      	mov	r1, r7
 8002da6:	4630      	mov	r0, r6
 8002da8:	47c0      	blx	r8
 8002daa:	3001      	adds	r0, #1
 8002dac:	d0aa      	beq.n	8002d04 <_printf_i+0x12c>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	079b      	lsls	r3, r3, #30
 8002db2:	d413      	bmi.n	8002ddc <_printf_i+0x204>
 8002db4:	68e0      	ldr	r0, [r4, #12]
 8002db6:	9b03      	ldr	r3, [sp, #12]
 8002db8:	4298      	cmp	r0, r3
 8002dba:	bfb8      	it	lt
 8002dbc:	4618      	movlt	r0, r3
 8002dbe:	e7a3      	b.n	8002d08 <_printf_i+0x130>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	464a      	mov	r2, r9
 8002dc4:	4639      	mov	r1, r7
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	47c0      	blx	r8
 8002dca:	3001      	adds	r0, #1
 8002dcc:	d09a      	beq.n	8002d04 <_printf_i+0x12c>
 8002dce:	3501      	adds	r5, #1
 8002dd0:	68e3      	ldr	r3, [r4, #12]
 8002dd2:	9a03      	ldr	r2, [sp, #12]
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	42ab      	cmp	r3, r5
 8002dd8:	dcf2      	bgt.n	8002dc0 <_printf_i+0x1e8>
 8002dda:	e7eb      	b.n	8002db4 <_printf_i+0x1dc>
 8002ddc:	2500      	movs	r5, #0
 8002dde:	f104 0919 	add.w	r9, r4, #25
 8002de2:	e7f5      	b.n	8002dd0 <_printf_i+0x1f8>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ac      	bne.n	8002d42 <_printf_i+0x16a>
 8002de8:	7803      	ldrb	r3, [r0, #0]
 8002dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002df2:	e76c      	b.n	8002cce <_printf_i+0xf6>
 8002df4:	080030d1 	.word	0x080030d1
 8002df8:	080030e2 	.word	0x080030e2

08002dfc <memcpy>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	1e43      	subs	r3, r0, #1
 8002e00:	440a      	add	r2, r1
 8002e02:	4291      	cmp	r1, r2
 8002e04:	d100      	bne.n	8002e08 <memcpy+0xc>
 8002e06:	bd10      	pop	{r4, pc}
 8002e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e10:	e7f7      	b.n	8002e02 <memcpy+0x6>

08002e12 <memmove>:
 8002e12:	4288      	cmp	r0, r1
 8002e14:	b510      	push	{r4, lr}
 8002e16:	eb01 0302 	add.w	r3, r1, r2
 8002e1a:	d807      	bhi.n	8002e2c <memmove+0x1a>
 8002e1c:	1e42      	subs	r2, r0, #1
 8002e1e:	4299      	cmp	r1, r3
 8002e20:	d00a      	beq.n	8002e38 <memmove+0x26>
 8002e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e2a:	e7f8      	b.n	8002e1e <memmove+0xc>
 8002e2c:	4283      	cmp	r3, r0
 8002e2e:	d9f5      	bls.n	8002e1c <memmove+0xa>
 8002e30:	1881      	adds	r1, r0, r2
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	42d3      	cmn	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memmove+0x28>
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e42:	e7f7      	b.n	8002e34 <memmove+0x22>

08002e44 <_free_r>:
 8002e44:	b538      	push	{r3, r4, r5, lr}
 8002e46:	4605      	mov	r5, r0
 8002e48:	2900      	cmp	r1, #0
 8002e4a:	d045      	beq.n	8002ed8 <_free_r+0x94>
 8002e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e50:	1f0c      	subs	r4, r1, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bfb8      	it	lt
 8002e56:	18e4      	addlt	r4, r4, r3
 8002e58:	f000 f8d2 	bl	8003000 <__malloc_lock>
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <_free_r+0x98>)
 8002e5e:	6813      	ldr	r3, [r2, #0]
 8002e60:	4610      	mov	r0, r2
 8002e62:	b933      	cbnz	r3, 8002e72 <_free_r+0x2e>
 8002e64:	6063      	str	r3, [r4, #4]
 8002e66:	6014      	str	r4, [r2, #0]
 8002e68:	4628      	mov	r0, r5
 8002e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e6e:	f000 b8c8 	b.w	8003002 <__malloc_unlock>
 8002e72:	42a3      	cmp	r3, r4
 8002e74:	d90c      	bls.n	8002e90 <_free_r+0x4c>
 8002e76:	6821      	ldr	r1, [r4, #0]
 8002e78:	1862      	adds	r2, r4, r1
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	bf04      	itt	eq
 8002e7e:	681a      	ldreq	r2, [r3, #0]
 8002e80:	685b      	ldreq	r3, [r3, #4]
 8002e82:	6063      	str	r3, [r4, #4]
 8002e84:	bf04      	itt	eq
 8002e86:	1852      	addeq	r2, r2, r1
 8002e88:	6022      	streq	r2, [r4, #0]
 8002e8a:	6004      	str	r4, [r0, #0]
 8002e8c:	e7ec      	b.n	8002e68 <_free_r+0x24>
 8002e8e:	4613      	mov	r3, r2
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	b10a      	cbz	r2, 8002e98 <_free_r+0x54>
 8002e94:	42a2      	cmp	r2, r4
 8002e96:	d9fa      	bls.n	8002e8e <_free_r+0x4a>
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	1858      	adds	r0, r3, r1
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	d10b      	bne.n	8002eb8 <_free_r+0x74>
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	4401      	add	r1, r0
 8002ea4:	1858      	adds	r0, r3, r1
 8002ea6:	4282      	cmp	r2, r0
 8002ea8:	6019      	str	r1, [r3, #0]
 8002eaa:	d1dd      	bne.n	8002e68 <_free_r+0x24>
 8002eac:	6810      	ldr	r0, [r2, #0]
 8002eae:	6852      	ldr	r2, [r2, #4]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	4401      	add	r1, r0
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	e7d7      	b.n	8002e68 <_free_r+0x24>
 8002eb8:	d902      	bls.n	8002ec0 <_free_r+0x7c>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	602b      	str	r3, [r5, #0]
 8002ebe:	e7d3      	b.n	8002e68 <_free_r+0x24>
 8002ec0:	6820      	ldr	r0, [r4, #0]
 8002ec2:	1821      	adds	r1, r4, r0
 8002ec4:	428a      	cmp	r2, r1
 8002ec6:	bf04      	itt	eq
 8002ec8:	6811      	ldreq	r1, [r2, #0]
 8002eca:	6852      	ldreq	r2, [r2, #4]
 8002ecc:	6062      	str	r2, [r4, #4]
 8002ece:	bf04      	itt	eq
 8002ed0:	1809      	addeq	r1, r1, r0
 8002ed2:	6021      	streq	r1, [r4, #0]
 8002ed4:	605c      	str	r4, [r3, #4]
 8002ed6:	e7c7      	b.n	8002e68 <_free_r+0x24>
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
 8002eda:	bf00      	nop
 8002edc:	2000008c 	.word	0x2000008c

08002ee0 <_malloc_r>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	1ccd      	adds	r5, r1, #3
 8002ee4:	f025 0503 	bic.w	r5, r5, #3
 8002ee8:	3508      	adds	r5, #8
 8002eea:	2d0c      	cmp	r5, #12
 8002eec:	bf38      	it	cc
 8002eee:	250c      	movcc	r5, #12
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	db01      	blt.n	8002efa <_malloc_r+0x1a>
 8002ef6:	42a9      	cmp	r1, r5
 8002ef8:	d903      	bls.n	8002f02 <_malloc_r+0x22>
 8002efa:	230c      	movs	r3, #12
 8002efc:	6033      	str	r3, [r6, #0]
 8002efe:	2000      	movs	r0, #0
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
 8002f02:	f000 f87d 	bl	8003000 <__malloc_lock>
 8002f06:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <_malloc_r+0xac>)
 8002f08:	6814      	ldr	r4, [r2, #0]
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	b991      	cbnz	r1, 8002f34 <_malloc_r+0x54>
 8002f0e:	4c20      	ldr	r4, [pc, #128]	; (8002f90 <_malloc_r+0xb0>)
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	b91b      	cbnz	r3, 8002f1c <_malloc_r+0x3c>
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 f863 	bl	8002fe0 <_sbrk_r>
 8002f1a:	6020      	str	r0, [r4, #0]
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f000 f85e 	bl	8002fe0 <_sbrk_r>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d124      	bne.n	8002f72 <_malloc_r+0x92>
 8002f28:	230c      	movs	r3, #12
 8002f2a:	6033      	str	r3, [r6, #0]
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	f000 f868 	bl	8003002 <__malloc_unlock>
 8002f32:	e7e4      	b.n	8002efe <_malloc_r+0x1e>
 8002f34:	680b      	ldr	r3, [r1, #0]
 8002f36:	1b5b      	subs	r3, r3, r5
 8002f38:	d418      	bmi.n	8002f6c <_malloc_r+0x8c>
 8002f3a:	2b0b      	cmp	r3, #11
 8002f3c:	d90f      	bls.n	8002f5e <_malloc_r+0x7e>
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	50cd      	str	r5, [r1, r3]
 8002f42:	18cc      	adds	r4, r1, r3
 8002f44:	4630      	mov	r0, r6
 8002f46:	f000 f85c 	bl	8003002 <__malloc_unlock>
 8002f4a:	f104 000b 	add.w	r0, r4, #11
 8002f4e:	1d23      	adds	r3, r4, #4
 8002f50:	f020 0007 	bic.w	r0, r0, #7
 8002f54:	1ac3      	subs	r3, r0, r3
 8002f56:	d0d3      	beq.n	8002f00 <_malloc_r+0x20>
 8002f58:	425a      	negs	r2, r3
 8002f5a:	50e2      	str	r2, [r4, r3]
 8002f5c:	e7d0      	b.n	8002f00 <_malloc_r+0x20>
 8002f5e:	428c      	cmp	r4, r1
 8002f60:	684b      	ldr	r3, [r1, #4]
 8002f62:	bf16      	itet	ne
 8002f64:	6063      	strne	r3, [r4, #4]
 8002f66:	6013      	streq	r3, [r2, #0]
 8002f68:	460c      	movne	r4, r1
 8002f6a:	e7eb      	b.n	8002f44 <_malloc_r+0x64>
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	6849      	ldr	r1, [r1, #4]
 8002f70:	e7cc      	b.n	8002f0c <_malloc_r+0x2c>
 8002f72:	1cc4      	adds	r4, r0, #3
 8002f74:	f024 0403 	bic.w	r4, r4, #3
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d005      	beq.n	8002f88 <_malloc_r+0xa8>
 8002f7c:	1a21      	subs	r1, r4, r0
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f000 f82e 	bl	8002fe0 <_sbrk_r>
 8002f84:	3001      	adds	r0, #1
 8002f86:	d0cf      	beq.n	8002f28 <_malloc_r+0x48>
 8002f88:	6025      	str	r5, [r4, #0]
 8002f8a:	e7db      	b.n	8002f44 <_malloc_r+0x64>
 8002f8c:	2000008c 	.word	0x2000008c
 8002f90:	20000090 	.word	0x20000090

08002f94 <_realloc_r>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	4607      	mov	r7, r0
 8002f98:	4614      	mov	r4, r2
 8002f9a:	460e      	mov	r6, r1
 8002f9c:	b921      	cbnz	r1, 8002fa8 <_realloc_r+0x14>
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002fa4:	f7ff bf9c 	b.w	8002ee0 <_malloc_r>
 8002fa8:	b922      	cbnz	r2, 8002fb4 <_realloc_r+0x20>
 8002faa:	f7ff ff4b 	bl	8002e44 <_free_r>
 8002fae:	4625      	mov	r5, r4
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb4:	f000 f826 	bl	8003004 <_malloc_usable_size_r>
 8002fb8:	42a0      	cmp	r0, r4
 8002fba:	d20f      	bcs.n	8002fdc <_realloc_r+0x48>
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4638      	mov	r0, r7
 8002fc0:	f7ff ff8e 	bl	8002ee0 <_malloc_r>
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d0f2      	beq.n	8002fb0 <_realloc_r+0x1c>
 8002fca:	4631      	mov	r1, r6
 8002fcc:	4622      	mov	r2, r4
 8002fce:	f7ff ff15 	bl	8002dfc <memcpy>
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4638      	mov	r0, r7
 8002fd6:	f7ff ff35 	bl	8002e44 <_free_r>
 8002fda:	e7e9      	b.n	8002fb0 <_realloc_r+0x1c>
 8002fdc:	4635      	mov	r5, r6
 8002fde:	e7e7      	b.n	8002fb0 <_realloc_r+0x1c>

08002fe0 <_sbrk_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4c06      	ldr	r4, [pc, #24]	; (8002ffc <_sbrk_r+0x1c>)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	4608      	mov	r0, r1
 8002fea:	6023      	str	r3, [r4, #0]
 8002fec:	f000 f812 	bl	8003014 <_sbrk>
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	d102      	bne.n	8002ffa <_sbrk_r+0x1a>
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	b103      	cbz	r3, 8002ffa <_sbrk_r+0x1a>
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
 8002ffc:	20000180 	.word	0x20000180

08003000 <__malloc_lock>:
 8003000:	4770      	bx	lr

08003002 <__malloc_unlock>:
 8003002:	4770      	bx	lr

08003004 <_malloc_usable_size_r>:
 8003004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003008:	1f18      	subs	r0, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfbc      	itt	lt
 800300e:	580b      	ldrlt	r3, [r1, r0]
 8003010:	18c0      	addlt	r0, r0, r3
 8003012:	4770      	bx	lr

08003014 <_sbrk>:
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <_sbrk+0x14>)
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	4602      	mov	r2, r0
 800301a:	b909      	cbnz	r1, 8003020 <_sbrk+0xc>
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <_sbrk+0x18>)
 800301e:	6019      	str	r1, [r3, #0]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	4402      	add	r2, r0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	4770      	bx	lr
 8003028:	20000094 	.word	0x20000094
 800302c:	20000188 	.word	0x20000188

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
