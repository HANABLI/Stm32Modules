
Timer6_100ms_It_50Mhz_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002270  08002270  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002270  08002270  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002270  08002270  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002284  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002284  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095ac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000139d  00000000  00000000  000295e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c8bc  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006eae  00000000  00000000  0004836c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad872  00000000  00000000  0004f21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fca8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b4  00000000  00000000  000fcb08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002228 	.word	0x08002228

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002228 	.word	0x08002228

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x28>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f92b 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f001 ff76 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f943 	bl	80004aa <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f90b 	bl	8000456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_IncTick+0x20>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_IncTick+0x24>)
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	20000028 	.word	0x20000028

08000288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return uwTick;  
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_GetTick+0x14>)
 800028e:	681b      	ldr	r3, [r3, #0]
}
 8000290:	4618      	mov	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028

080002a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f003 0307 	and.w	r3, r3, #7
 80002ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <__NVIC_SetPriorityGrouping+0x44>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002bc:	4013      	ands	r3, r2
 80002be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <__NVIC_SetPriorityGrouping+0x44>)
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	60d3      	str	r3, [r2, #12]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <__NVIC_GetPriorityGrouping+0x18>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	0a1b      	lsrs	r3, r3, #8
 80002f2:	f003 0307 	and.w	r3, r3, #7
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	db0b      	blt.n	800032e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f003 021f 	and.w	r2, r3, #31
 800031c:	4907      	ldr	r1, [pc, #28]	; (800033c <__NVIC_EnableIRQ+0x38>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	095b      	lsrs	r3, r3, #5
 8000324:	2001      	movs	r0, #1
 8000326:	fa00 f202 	lsl.w	r2, r0, r2
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100

08000340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	6039      	str	r1, [r7, #0]
 800034a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db0a      	blt.n	800036a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	490c      	ldr	r1, [pc, #48]	; (800038c <__NVIC_SetPriority+0x4c>)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000368:	e00a      	b.n	8000380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4908      	ldr	r1, [pc, #32]	; (8000390 <__NVIC_SetPriority+0x50>)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	f003 030f 	and.w	r3, r3, #15
 8000376:	3b04      	subs	r3, #4
 8000378:	0112      	lsls	r2, r2, #4
 800037a:	b2d2      	uxtb	r2, r2
 800037c:	440b      	add	r3, r1
 800037e:	761a      	strb	r2, [r3, #24]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000e100 	.word	0xe000e100
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000394:	b480      	push	{r7}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f003 0307 	and.w	r3, r3, #7
 80003a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f1c3 0307 	rsb	r3, r3, #7
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	bf28      	it	cs
 80003b2:	2304      	movcs	r3, #4
 80003b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	3304      	adds	r3, #4
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d902      	bls.n	80003c4 <NVIC_EncodePriority+0x30>
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3b03      	subs	r3, #3
 80003c2:	e000      	b.n	80003c6 <NVIC_EncodePriority+0x32>
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	69bb      	ldr	r3, [r7, #24]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	43da      	mvns	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	401a      	ands	r2, r3
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003dc:	f04f 31ff 	mov.w	r1, #4294967295
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43d9      	mvns	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	4313      	orrs	r3, r2
         );
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295
 8000420:	f7ff ff8e 	bl	8000340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	.word	0xe000e010

08000440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff29 	bl	80002a0 <__NVIC_SetPriorityGrouping>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	4603      	mov	r3, r0
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000468:	f7ff ff3e 	bl	80002e8 <__NVIC_GetPriorityGrouping>
 800046c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68b9      	ldr	r1, [r7, #8]
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f7ff ff8e 	bl	8000394 <NVIC_EncodePriority>
 8000478:	4602      	mov	r2, r0
 800047a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff5d 	bl	8000340 <__NVIC_SetPriority>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff31 	bl	8000304 <__NVIC_EnableIRQ>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff ffa2 	bl	80003fc <SysTick_Config>
 80004b8:	4603      	mov	r3, r0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	d106      	bne.n	80004e0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80004de:	e005      	b.n	80004ec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80004e6:	f023 0304 	bic.w	r3, r3, #4
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e010 	.word	0xe000e010

080004fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000500:	f000 f802 	bl	8000508 <HAL_SYSTICK_Callback>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000526:	e160      	b.n	80007ea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2b00      	cmp	r3, #0
 800053c:	f000 8152 	beq.w	80007e4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d003      	beq.n	8000550 <HAL_GPIO_Init+0x38>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b12      	cmp	r3, #18
 800054e:	d123      	bne.n	8000598 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	08da      	lsrs	r2, r3, #3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3208      	adds	r2, #8
 8000558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	f003 0307 	and.w	r3, r3, #7
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	220f      	movs	r2, #15
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	4013      	ands	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	691a      	ldr	r2, [r3, #16]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	4313      	orrs	r3, r2
 8000588:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	08da      	lsrs	r2, r3, #3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3208      	adds	r2, #8
 8000592:	6939      	ldr	r1, [r7, #16]
 8000594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2203      	movs	r2, #3
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f003 0203 	and.w	r2, r3, #3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <HAL_GPIO_Init+0xd4>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d007      	beq.n	80005ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e0:	2b11      	cmp	r3, #17
 80005e2:	d003      	beq.n	80005ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b12      	cmp	r3, #18
 80005ea:	d130      	bne.n	800064e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	2203      	movs	r2, #3
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000622:	2201      	movs	r2, #1
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	4013      	ands	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	091b      	lsrs	r3, r3, #4
 8000638:	f003 0201 	and.w	r2, r3, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4313      	orrs	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2203      	movs	r2, #3
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	4013      	ands	r3, r2
 8000664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4313      	orrs	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 80ac 	beq.w	80007e4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <HAL_GPIO_Init+0x2f0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a5d      	ldr	r2, [pc, #372]	; (8000808 <HAL_GPIO_Init+0x2f0>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <HAL_GPIO_Init+0x2f0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80006a4:	4a59      	ldr	r2, [pc, #356]	; (800080c <HAL_GPIO_Init+0x2f4>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	3302      	adds	r3, #2
 80006ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	f003 0303 	and.w	r3, r3, #3
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	220f      	movs	r2, #15
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006ce:	d025      	beq.n	800071c <HAL_GPIO_Init+0x204>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a4f      	ldr	r2, [pc, #316]	; (8000810 <HAL_GPIO_Init+0x2f8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d01f      	beq.n	8000718 <HAL_GPIO_Init+0x200>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a4e      	ldr	r2, [pc, #312]	; (8000814 <HAL_GPIO_Init+0x2fc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d019      	beq.n	8000714 <HAL_GPIO_Init+0x1fc>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a4d      	ldr	r2, [pc, #308]	; (8000818 <HAL_GPIO_Init+0x300>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d013      	beq.n	8000710 <HAL_GPIO_Init+0x1f8>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a4c      	ldr	r2, [pc, #304]	; (800081c <HAL_GPIO_Init+0x304>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d00d      	beq.n	800070c <HAL_GPIO_Init+0x1f4>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <HAL_GPIO_Init+0x308>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d007      	beq.n	8000708 <HAL_GPIO_Init+0x1f0>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a4a      	ldr	r2, [pc, #296]	; (8000824 <HAL_GPIO_Init+0x30c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d101      	bne.n	8000704 <HAL_GPIO_Init+0x1ec>
 8000700:	2306      	movs	r3, #6
 8000702:	e00c      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000704:	2307      	movs	r3, #7
 8000706:	e00a      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000708:	2305      	movs	r3, #5
 800070a:	e008      	b.n	800071e <HAL_GPIO_Init+0x206>
 800070c:	2304      	movs	r3, #4
 800070e:	e006      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000710:	2303      	movs	r3, #3
 8000712:	e004      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000714:	2302      	movs	r3, #2
 8000716:	e002      	b.n	800071e <HAL_GPIO_Init+0x206>
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <HAL_GPIO_Init+0x206>
 800071c:	2300      	movs	r3, #0
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	f002 0203 	and.w	r2, r2, #3
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	4093      	lsls	r3, r2
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	4313      	orrs	r3, r2
 800072c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800072e:	4937      	ldr	r1, [pc, #220]	; (800080c <HAL_GPIO_Init+0x2f4>)
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	3302      	adds	r3, #2
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <HAL_GPIO_Init+0x310>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	43db      	mvns	r3, r3
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4313      	orrs	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000760:	4a31      	ldr	r2, [pc, #196]	; (8000828 <HAL_GPIO_Init+0x310>)
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <HAL_GPIO_Init+0x310>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	43db      	mvns	r3, r3
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4313      	orrs	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <HAL_GPIO_Init+0x310>)
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_GPIO_Init+0x310>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	43db      	mvns	r3, r3
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007b4:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <HAL_GPIO_Init+0x310>)
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_GPIO_Init+0x310>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	43db      	mvns	r3, r3
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	4013      	ands	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4313      	orrs	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_GPIO_Init+0x310>)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f47f ae97 	bne.w	8000528 <HAL_GPIO_Init+0x10>
  }
}
 80007fa:	bf00      	nop
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000
 8000810:	48000400 	.word	0x48000400
 8000814:	48000800 	.word	0x48000800
 8000818:	48000c00 	.word	0x48000c00
 800081c:	48001000 	.word	0x48001000
 8000820:	48001400 	.word	0x48001400
 8000824:	48001800 	.word	0x48001800
 8000828:	40010400 	.word	0x40010400

0800082c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000844:	887b      	ldrh	r3, [r7, #2]
 8000846:	041a      	lsls	r2, r3, #16
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800084c:	e002      	b.n	8000854 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800084e:	887a      	ldrh	r2, [r7, #2]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	619a      	str	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000866:	af00      	add	r7, sp, #0
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	f000 bf01 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 8160 	beq.w	8000b4a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800088a:	4bae      	ldr	r3, [pc, #696]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 030c 	and.w	r3, r3, #12
 8000892:	2b04      	cmp	r3, #4
 8000894:	d00c      	beq.n	80008b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000896:	4bab      	ldr	r3, [pc, #684]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 030c 	and.w	r3, r3, #12
 800089e:	2b08      	cmp	r3, #8
 80008a0:	d159      	bne.n	8000956 <HAL_RCC_OscConfig+0xf6>
 80008a2:	4ba8      	ldr	r3, [pc, #672]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80008aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ae:	d152      	bne.n	8000956 <HAL_RCC_OscConfig+0xf6>
 80008b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008bc:	fa93 f3a3 	rbit	r3, r3
 80008c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c8:	fab3 f383 	clz	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d102      	bne.n	80008e2 <HAL_RCC_OscConfig+0x82>
 80008dc:	4b99      	ldr	r3, [pc, #612]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	e015      	b.n	800090e <HAL_RCC_OscConfig+0xae>
 80008e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80008ee:	fa93 f3a3 	rbit	r3, r3
 80008f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80008f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80008fe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000902:	fa93 f3a3 	rbit	r3, r3
 8000906:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800090a:	4b8e      	ldr	r3, [pc, #568]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000912:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000916:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800091a:	fa92 f2a2 	rbit	r2, r2
 800091e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000922:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000926:	fab2 f282 	clz	r2, r2
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	f042 0220 	orr.w	r2, r2, #32
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	f002 021f 	and.w	r2, r2, #31
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4013      	ands	r3, r2
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 8102 	beq.w	8000b48 <HAL_RCC_OscConfig+0x2e8>
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	f040 80fc 	bne.w	8000b48 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	f000 be93 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000960:	d106      	bne.n	8000970 <HAL_RCC_OscConfig+0x110>
 8000962:	4b78      	ldr	r3, [pc, #480]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a77      	ldr	r2, [pc, #476]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e030      	b.n	80009d2 <HAL_RCC_OscConfig+0x172>
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10c      	bne.n	8000994 <HAL_RCC_OscConfig+0x134>
 800097a:	4b72      	ldr	r3, [pc, #456]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a71      	ldr	r2, [pc, #452]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a6e      	ldr	r2, [pc, #440]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 800098c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e01e      	b.n	80009d2 <HAL_RCC_OscConfig+0x172>
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800099e:	d10c      	bne.n	80009ba <HAL_RCC_OscConfig+0x15a>
 80009a0:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a67      	ldr	r2, [pc, #412]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b65      	ldr	r3, [pc, #404]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a64      	ldr	r2, [pc, #400]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e00b      	b.n	80009d2 <HAL_RCC_OscConfig+0x172>
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a61      	ldr	r2, [pc, #388]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	4b5f      	ldr	r3, [pc, #380]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a5e      	ldr	r2, [pc, #376]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 80009cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d059      	beq.n	8000a90 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fc54 	bl	8000288 <HAL_GetTick>
 80009e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e4:	e00a      	b.n	80009fc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e6:	f7ff fc4f 	bl	8000288 <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b64      	cmp	r3, #100	; 0x64
 80009f4:	d902      	bls.n	80009fc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f000 be40 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>
 80009fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a00:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a08:	fa93 f3a3 	rbit	r3, r3
 8000a0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000a10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a14:	fab3 f383 	clz	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d102      	bne.n	8000a2e <HAL_RCC_OscConfig+0x1ce>
 8000a28:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	e015      	b.n	8000a5a <HAL_RCC_OscConfig+0x1fa>
 8000a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a3a:	fa93 f3a3 	rbit	r3, r3
 8000a3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a62:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a66:	fa92 f2a2 	rbit	r2, r2
 8000a6a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000a6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a72:	fab2 f282 	clz	r2, r2
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	f042 0220 	orr.w	r2, r2, #32
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	f002 021f 	and.w	r2, r2, #31
 8000a82:	2101      	movs	r1, #1
 8000a84:	fa01 f202 	lsl.w	r2, r1, r2
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0ab      	beq.n	80009e6 <HAL_RCC_OscConfig+0x186>
 8000a8e:	e05c      	b.n	8000b4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a90:	f7ff fbfa 	bl	8000288 <HAL_GetTick>
 8000a94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a98:	e00a      	b.n	8000ab0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a9a:	f7ff fbf5 	bl	8000288 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d902      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f000 bde6 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>
 8000ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000ac4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac8:	fab3 f383 	clz	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d102      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x282>
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	e015      	b.n	8000b0e <HAL_RCC_OscConfig+0x2ae>
 8000ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000af6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000afa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000afe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b02:	fa93 f3a3 	rbit	r3, r3
 8000b06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_RCC_OscConfig+0x2e4>)
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b12:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b16:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b1a:	fa92 f2a2 	rbit	r2, r2
 8000b1e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000b22:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	f042 0220 	orr.w	r2, r2, #32
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	f002 021f 	and.w	r2, r2, #31
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1ab      	bne.n	8000a9a <HAL_RCC_OscConfig+0x23a>
 8000b42:	e002      	b.n	8000b4a <HAL_RCC_OscConfig+0x2ea>
 8000b44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 8170 	beq.w	8000e3a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b5a:	4bd0      	ldr	r3, [pc, #832]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00c      	beq.n	8000b80 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b66:	4bcd      	ldr	r3, [pc, #820]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d16d      	bne.n	8000c4e <HAL_RCC_OscConfig+0x3ee>
 8000b72:	4bca      	ldr	r3, [pc, #808]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b7e:	d166      	bne.n	8000c4e <HAL_RCC_OscConfig+0x3ee>
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b86:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000b92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b96:	fab3 f383 	clz	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d102      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x350>
 8000baa:	4bbc      	ldr	r3, [pc, #752]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	e013      	b.n	8000bd8 <HAL_RCC_OscConfig+0x378>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000bba:	fa93 f3a3 	rbit	r3, r3
 8000bbe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000bc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000bcc:	fa93 f3a3 	rbit	r3, r3
 8000bd0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000bd4:	4bb1      	ldr	r3, [pc, #708]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	2202      	movs	r2, #2
 8000bda:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000bde:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000be2:	fa92 f2a2 	rbit	r2, r2
 8000be6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000bea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	f042 0220 	orr.w	r2, r2, #32
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	f002 021f 	and.w	r2, r2, #31
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	4013      	ands	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <HAL_RCC_OscConfig+0x3ba>
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d002      	beq.n	8000c1a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f000 bd31 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1a:	4ba0      	ldr	r3, [pc, #640]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	21f8      	movs	r1, #248	; 0xf8
 8000c2a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000c32:	fa91 f1a1 	rbit	r1, r1
 8000c36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000c3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000c3e:	fab1 f181 	clz	r1, r1
 8000c42:	b2c9      	uxtb	r1, r1
 8000c44:	408b      	lsls	r3, r1
 8000c46:	4995      	ldr	r1, [pc, #596]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4c:	e0f5      	b.n	8000e3a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 8085 	beq.w	8000d64 <HAL_RCC_OscConfig+0x504>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c64:	fa93 f3a3 	rbit	r3, r3
 8000c68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000c6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	461a      	mov	r2, r3
 8000c82:	2301      	movs	r3, #1
 8000c84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff faff 	bl	8000288 <HAL_GetTick>
 8000c8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8e:	e00a      	b.n	8000ca6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fafa 	bl	8000288 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d902      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	f000 bceb 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000cb0:	fa93 f3a3 	rbit	r3, r3
 8000cb4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000cb8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbc:	fab3 f383 	clz	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x476>
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	e013      	b.n	8000cfe <HAL_RCC_OscConfig+0x49e>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000cee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000cfa:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	2202      	movs	r2, #2
 8000d00:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d08:	fa92 f2a2 	rbit	r2, r2
 8000d0c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000d10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	f042 0220 	orr.w	r2, r2, #32
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	f002 021f 	and.w	r2, r2, #31
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0af      	beq.n	8000c90 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d30:	4b5a      	ldr	r3, [pc, #360]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	21f8      	movs	r1, #248	; 0xf8
 8000d40:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d44:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000d48:	fa91 f1a1 	rbit	r1, r1
 8000d4c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000d50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000d54:	fab1 f181 	clz	r1, r1
 8000d58:	b2c9      	uxtb	r1, r1
 8000d5a:	408b      	lsls	r3, r1
 8000d5c:	494f      	ldr	r1, [pc, #316]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
 8000d62:	e06a      	b.n	8000e3a <HAL_RCC_OscConfig+0x5da>
 8000d64:	2301      	movs	r3, #1
 8000d66:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000d76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fa7a 	bl	8000288 <HAL_GetTick>
 8000d94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d98:	e00a      	b.n	8000db0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fa75 	bl	8000288 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d902      	bls.n	8000db0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f000 bc66 	b.w	800167c <HAL_RCC_OscConfig+0xe1c>
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000dc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d102      	bne.n	8000de0 <HAL_RCC_OscConfig+0x580>
 8000dda:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	e013      	b.n	8000e08 <HAL_RCC_OscConfig+0x5a8>
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000df8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000dfc:	fa93 f3a3 	rbit	r3, r3
 8000e00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_RCC_OscConfig+0x63c>)
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	2202      	movs	r2, #2
 8000e0a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e0e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e12:	fa92 f2a2 	rbit	r2, r2
 8000e16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000e1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	f042 0220 	orr.w	r2, r2, #32
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	f002 021f 	and.w	r2, r2, #31
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fa01 f202 	lsl.w	r2, r1, r2
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1af      	bne.n	8000d9a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80da 	beq.w	8000ffe <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d069      	beq.n	8000f28 <HAL_RCC_OscConfig+0x6c8>
 8000e54:	2301      	movs	r3, #1
 8000e56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_RCC_OscConfig+0x640>)
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fa03 	bl	8000288 <HAL_GetTick>
 8000e82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	e00d      	b.n	8000ea4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff f9fe 	bl	8000288 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d905      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e3ef      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	10908120 	.word	0x10908120
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eae:	fa93 f2a3 	rbit	r2, r3
 8000eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	fa93 f2a3 	rbit	r2, r3
 8000eca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	fa93 f2a3 	rbit	r2, r3
 8000ee2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ee6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee8:	4ba4      	ldr	r3, [pc, #656]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8000eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	6019      	str	r1, [r3, #0]
 8000ef4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	fa93 f1a3 	rbit	r1, r3
 8000efe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f02:	6019      	str	r1, [r3, #0]
  return result;
 8000f04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0b0      	beq.n	8000e88 <HAL_RCC_OscConfig+0x628>
 8000f26:	e06a      	b.n	8000ffe <HAL_RCC_OscConfig+0x79e>
 8000f28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	fa93 f2a3 	rbit	r2, r3
 8000f3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f3e:	601a      	str	r2, [r3, #0]
  return result;
 8000f40:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <HAL_RCC_OscConfig+0x920>)
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	461a      	mov	r2, r3
 8000f56:	2300      	movs	r3, #0
 8000f58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff f995 	bl	8000288 <HAL_GetTick>
 8000f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f62:	e009      	b.n	8000f78 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f64:	f7ff f990 	bl	8000288 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e381      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 8000f78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	fa93 f2a3 	rbit	r2, r3
 8000f8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f94:	2202      	movs	r2, #2
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	fa93 f2a3 	rbit	r2, r3
 8000fa2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	fa93 f2a3 	rbit	r2, r3
 8000fba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	4b6e      	ldr	r3, [pc, #440]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc8:	2102      	movs	r1, #2
 8000fca:	6019      	str	r1, [r3, #0]
 8000fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	fa93 f1a3 	rbit	r1, r3
 8000fd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fda:	6019      	str	r1, [r3, #0]
  return result;
 8000fdc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1b2      	bne.n	8000f64 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8157 	beq.w	80012bc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001014:	4b59      	ldr	r3, [pc, #356]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d112      	bne.n	8001046 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	4b56      	ldr	r3, [pc, #344]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4a55      	ldr	r2, [pc, #340]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	61d3      	str	r3, [r2, #28]
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001040:	2301      	movs	r3, #1
 8001042:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <HAL_RCC_OscConfig+0x924>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104e:	2b00      	cmp	r3, #0
 8001050:	d11a      	bne.n	8001088 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_RCC_OscConfig+0x924>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_RCC_OscConfig+0x924>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800105e:	f7ff f913 	bl	8000288 <HAL_GetTick>
 8001062:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	e009      	b.n	800107c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001068:	f7ff f90e 	bl	8000288 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e2ff      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b41      	ldr	r3, [pc, #260]	; (8001184 <HAL_RCC_OscConfig+0x924>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ef      	beq.n	8001068 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d106      	bne.n	80010a0 <HAL_RCC_OscConfig+0x840>
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a39      	ldr	r2, [pc, #228]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6213      	str	r3, [r2, #32]
 800109e:	e02f      	b.n	8001100 <HAL_RCC_OscConfig+0x8a0>
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x864>
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a33      	ldr	r2, [pc, #204]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a30      	ldr	r2, [pc, #192]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0x8a0>
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x888>
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6213      	str	r3, [r2, #32]
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0x8a0>
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a23      	ldr	r2, [pc, #140]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 80010fa:	f023 0304 	bic.w	r3, r3, #4
 80010fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d06a      	beq.n	80011e0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff f8bd 	bl	8000288 <HAL_GetTick>
 800110e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001114:	f7ff f8b8 	bl	8000288 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e2a7      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 800112c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001130:	2202      	movs	r2, #2
 8001132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	fa93 f2a3 	rbit	r2, r3
 800113e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001148:	2202      	movs	r2, #2
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	fa93 f2a3 	rbit	r2, r3
 8001156:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800115a:	601a      	str	r2, [r3, #0]
  return result;
 800115c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001160:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	095b      	lsrs	r3, r3, #5
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d108      	bne.n	8001188 <HAL_RCC_OscConfig+0x928>
 8001176:	4b01      	ldr	r3, [pc, #4]	; (800117c <HAL_RCC_OscConfig+0x91c>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	e013      	b.n	80011a4 <HAL_RCC_OscConfig+0x944>
 800117c:	40021000 	.word	0x40021000
 8001180:	10908120 	.word	0x10908120
 8001184:	40007000 	.word	0x40007000
 8001188:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800118c:	2202      	movs	r2, #2
 800118e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	fa93 f2a3 	rbit	r2, r3
 800119a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	4bc0      	ldr	r3, [pc, #768]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011a8:	2102      	movs	r1, #2
 80011aa:	6011      	str	r1, [r2, #0]
 80011ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	fa92 f1a2 	rbit	r1, r2
 80011b6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011ba:	6011      	str	r1, [r2, #0]
  return result;
 80011bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f002 021f 	and.w	r2, r2, #31
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d09a      	beq.n	8001114 <HAL_RCC_OscConfig+0x8b4>
 80011de:	e063      	b.n	80012a8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff f852 	bl	8000288 <HAL_GetTick>
 80011e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff f84d 	bl	8000288 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e23c      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 8001202:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001206:	2202      	movs	r2, #2
 8001208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	fa93 f2a3 	rbit	r2, r3
 8001214:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800121e:	2202      	movs	r2, #2
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	fa93 f2a3 	rbit	r2, r3
 800122c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001230:	601a      	str	r2, [r3, #0]
  return result;
 8001232:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001236:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d102      	bne.n	8001252 <HAL_RCC_OscConfig+0x9f2>
 800124c:	4b95      	ldr	r3, [pc, #596]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	e00d      	b.n	800126e <HAL_RCC_OscConfig+0xa0e>
 8001252:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001256:	2202      	movs	r2, #2
 8001258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fa93 f2a3 	rbit	r2, r3
 8001264:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	4b8e      	ldr	r3, [pc, #568]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001272:	2102      	movs	r1, #2
 8001274:	6011      	str	r1, [r2, #0]
 8001276:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	fa92 f1a2 	rbit	r1, r2
 8001280:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001284:	6011      	str	r1, [r2, #0]
  return result;
 8001286:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	f002 021f 	and.w	r2, r2, #31
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f202 	lsl.w	r2, r1, r2
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1a0      	bne.n	80011ea <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012a8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d105      	bne.n	80012bc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b0:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a7b      	ldr	r2, [pc, #492]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80012b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 81d9 	beq.w	800167a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c8:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	f000 81a6 	beq.w	8001622 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	f040 811e 	bne.w	800151e <HAL_RCC_OscConfig+0xcbe>
 80012e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fa93 f2a3 	rbit	r2, r3
 80012f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012fa:	601a      	str	r2, [r3, #0]
  return result;
 80012fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001300:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800130c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	461a      	mov	r2, r3
 8001314:	2300      	movs	r3, #0
 8001316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7fe ffb6 	bl	8000288 <HAL_GetTick>
 800131c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	e009      	b.n	8001336 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001322:	f7fe ffb1 	bl	8000288 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1a2      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 8001336:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800133a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800133e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800134e:	601a      	str	r2, [r3, #0]
  return result;
 8001350:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001354:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	095b      	lsrs	r3, r3, #5
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_RCC_OscConfig+0xb10>
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0xb48>
 8001370:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800138e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fa93 f2a3 	rbit	r2, r3
 800139e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013b0:	6011      	str	r1, [r2, #0]
 80013b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	fa92 f1a2 	rbit	r1, r2
 80013bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013c0:	6011      	str	r1, [r2, #0]
  return result;
 80013c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	fab2 f282 	clz	r2, r2
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	f002 021f 	and.w	r2, r2, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d19e      	bne.n	8001322 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f023 020f 	bic.w	r2, r3, #15
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	492c      	ldr	r1, [pc, #176]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a19      	ldr	r1, [r3, #32]
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	430b      	orrs	r3, r1
 800140e:	4925      	ldr	r1, [pc, #148]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800141c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800142c:	601a      	str	r2, [r3, #0]
  return result;
 800142e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001432:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	fab3 f383 	clz	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800143e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	461a      	mov	r2, r3
 8001446:	2301      	movs	r3, #1
 8001448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7fe ff1d 	bl	8000288 <HAL_GetTick>
 800144e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001452:	e009      	b.n	8001468 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001454:	f7fe ff18 	bl	8000288 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e109      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 8001468:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800146c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001480:	601a      	str	r2, [r3, #0]
  return result;
 8001482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001486:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0xc48>
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_OscConfig+0xc44>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	e01e      	b.n	80014e0 <HAL_RCC_OscConfig+0xc80>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f2a3 	rbit	r2, r3
 80014bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0xe28>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014e8:	6011      	str	r1, [r2, #0]
 80014ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	fa92 f1a2 	rbit	r1, r2
 80014f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014f8:	6011      	str	r1, [r2, #0]
  return result;
 80014fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	fab2 f282 	clz	r2, r2
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	f042 0220 	orr.w	r2, r2, #32
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	f002 021f 	and.w	r2, r2, #31
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d09b      	beq.n	8001454 <HAL_RCC_OscConfig+0xbf4>
 800151c:	e0ad      	b.n	800167a <HAL_RCC_OscConfig+0xe1a>
 800151e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001536:	601a      	str	r2, [r3, #0]
  return result;
 8001538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	461a      	mov	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7fe fe98 	bl	8000288 <HAL_GetTick>
 8001558:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155c:	e009      	b.n	8001572 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155e:	f7fe fe93 	bl	8000288 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e084      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
 8001572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800157a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158a:	601a      	str	r2, [r3, #0]
  return result;
 800158c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001590:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0xd4c>
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_RCC_OscConfig+0xe28>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e01b      	b.n	80015e4 <HAL_RCC_OscConfig+0xd84>
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fa93 f2a3 	rbit	r2, r3
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_RCC_OscConfig+0xe28>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	f107 0214 	add.w	r2, r7, #20
 80015e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015ec:	6011      	str	r1, [r2, #0]
 80015ee:	f107 0214 	add.w	r2, r7, #20
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	fa92 f1a2 	rbit	r1, r2
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	6011      	str	r1, [r2, #0]
  return result;
 80015fe:	f107 0210 	add.w	r2, r7, #16
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	fab2 f282 	clz	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f002 021f 	and.w	r2, r2, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d19e      	bne.n	800155e <HAL_RCC_OscConfig+0xcfe>
 8001620:	e02b      	b.n	800167a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e025      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0xe28>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_RCC_OscConfig+0xe28>)
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001640:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001644:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	429a      	cmp	r2, r3
 8001650:	d111      	bne.n	8001676 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001660:	429a      	cmp	r2, r3
 8001662:	d108      	bne.n	8001676 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001668:	f003 020f 	and.w	r2, r3, #15
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09e      	sub	sp, #120	; 0x78
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e162      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b90      	ldr	r3, [pc, #576]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d910      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	498b      	ldr	r1, [pc, #556]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e14a      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b82      	ldr	r3, [pc, #520]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	497f      	ldr	r1, [pc, #508]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80dc 	beq.w	80018b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d13c      	bne.n	8001782 <HAL_RCC_ClockConfig+0xf6>
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d102      	bne.n	8001732 <HAL_RCC_ClockConfig+0xa6>
 800172c:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	e00f      	b.n	8001752 <HAL_RCC_ClockConfig+0xc6>
 8001732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001736:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	667b      	str	r3, [r7, #100]	; 0x64
 8001740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001744:	663b      	str	r3, [r7, #96]	; 0x60
 8001746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800174e:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001756:	65ba      	str	r2, [r7, #88]	; 0x58
 8001758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800175a:	fa92 f2a2 	rbit	r2, r2
 800175e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001762:	fab2 f282 	clz	r2, r2
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f042 0220 	orr.w	r2, r2, #32
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	f002 021f 	and.w	r2, r2, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d17b      	bne.n	8001876 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0f3      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d13c      	bne.n	8001804 <HAL_RCC_ClockConfig+0x178>
 800178a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x128>
 80017ae:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e00f      	b.n	80017d4 <HAL_RCC_ClockConfig+0x148>
 80017b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	647b      	str	r3, [r7, #68]	; 0x44
 80017c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
 80017c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d0:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80017da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017dc:	fa92 f2a2 	rbit	r2, r2
 80017e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80017e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0220 	orr.w	r2, r2, #32
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d13a      	bne.n	8001876 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b2      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
 8001804:	2302      	movs	r3, #2
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_RCC_ClockConfig+0x1a0>
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e00d      	b.n	8001848 <HAL_RCC_ClockConfig+0x1bc>
 800182c:	2302      	movs	r3, #2
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2202      	movs	r2, #2
 800184a:	61ba      	str	r2, [r7, #24]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	fa92 f2a2 	rbit	r2, r2
 8001852:	617a      	str	r2, [r7, #20]
  return result;
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f002 021f 	and.w	r2, r2, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e079      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	491a      	ldr	r1, [pc, #104]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7fe fcfe 	bl	8000288 <HAL_GetTick>
 800188c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7fe fcfa 	bl	8000288 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e061      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_ClockConfig+0x260>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d214      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 0207 	bic.w	r2, r3, #7
 80018ce:	4906      	ldr	r1, [pc, #24]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_ClockConfig+0x25c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e040      	b.n	800196a <HAL_RCC_ClockConfig+0x2de>
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_ClockConfig+0x2e8>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	491a      	ldr	r1, [pc, #104]	; (8001974 <HAL_RCC_ClockConfig+0x2e8>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x2e8>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4912      	ldr	r1, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x2e8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800192e:	f000 f829 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001932:	4601      	mov	r1, r0
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_RCC_ClockConfig+0x2e8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193c:	22f0      	movs	r2, #240	; 0xf0
 800193e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	fa92 f2a2 	rbit	r2, r2
 8001946:	60fa      	str	r2, [r7, #12]
  return result;
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	40d3      	lsrs	r3, r2
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x2ec>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	fa21 f303 	lsr.w	r3, r1, r3
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_RCC_ClockConfig+0x2f0>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_RCC_ClockConfig+0x2f4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fc4c 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3778      	adds	r7, #120	; 0x78
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	08002260 	.word	0x08002260
 800197c:	20000008 	.word	0x20000008
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x36>
 80019b2:	e03f      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc8>)
 80019b6:	623b      	str	r3, [r7, #32]
      break;
 80019b8:	e03f      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80019c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	fa92 f2a2 	rbit	r2, r2
 80019cc:	607a      	str	r2, [r7, #4]
  return result;
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	40d3      	lsrs	r3, r2
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	220f      	movs	r2, #15
 80019e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	fa92 f2a2 	rbit	r2, r2
 80019f0:	60fa      	str	r2, [r7, #12]
  return result;
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	fab2 f282 	clz	r2, r2
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	40d3      	lsrs	r3, r2
 80019fc:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e007      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	623b      	str	r3, [r7, #32]
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a36:	623b      	str	r3, [r7, #32]
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	372c      	adds	r7, #44	; 0x2c
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	007a1200 	.word	0x007a1200
 8001a50:	08002240 	.word	0x08002240
 8001a54:	08002250 	.word	0x08002250

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008

08001a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e01d      	b.n	8001abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fb44 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f000 f97c 	bl	8001dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_TIM_Base_Start_IT+0x50>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d00b      	beq.n	8001b0a <HAL_TIM_Base_Start_IT+0x42>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d007      	beq.n	8001b0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	00010007 	.word	0x00010007

08001b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d122      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d11b      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f905 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8f7 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f908 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0204 	mvn.w	r2, #4
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8db 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8cd 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8de 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0208 	mvn.w	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8b1 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8a3 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8b4 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0210 	mvn.w	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f887 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f879 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f88a 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0201 	mvn.w	r2, #1
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f9ec 	bl	8002078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f918 	bl	8001efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cda:	d10e      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d107      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f90b 	bl	8001f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	d10e      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f838 	bl	8001d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d10e      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d107      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0220 	mvn.w	r2, #32
 8001d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8cb 	bl	8001ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a42      	ldr	r2, [pc, #264]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d00f      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <TIM_Base_SetConfig+0x120>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00b      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3d      	ldr	r2, [pc, #244]	; (8001ed4 <TIM_Base_SetConfig+0x128>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3c      	ldr	r2, [pc, #240]	; (8001ed8 <TIM_Base_SetConfig+0x12c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d108      	bne.n	8001dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d01b      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <TIM_Base_SetConfig+0x120>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d017      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <TIM_Base_SetConfig+0x128>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00f      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <TIM_Base_SetConfig+0x130>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <TIM_Base_SetConfig+0x134>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <TIM_Base_SetConfig+0x138>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <TIM_Base_SetConfig+0x9a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <TIM_Base_SetConfig+0x12c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d108      	bne.n	8001e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <TIM_Base_SetConfig+0x100>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <TIM_Base_SetConfig+0x128>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00f      	beq.n	8001eac <TIM_Base_SetConfig+0x100>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a13      	ldr	r2, [pc, #76]	; (8001edc <TIM_Base_SetConfig+0x130>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00b      	beq.n	8001eac <TIM_Base_SetConfig+0x100>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <TIM_Base_SetConfig+0x134>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <TIM_Base_SetConfig+0x100>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <TIM_Base_SetConfig+0x138>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <TIM_Base_SetConfig+0x100>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <TIM_Base_SetConfig+0x12c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d103      	bne.n	8001eb4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800
 8001ed4:	40013400 	.word	0x40013400
 8001ed8:	40015000 	.word	0x40015000
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	40014400 	.word	0x40014400
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Handler>:
 */

#include "stm32f3xx_hal.h"
extern TIM_HandleTypeDef htimer6;
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001f28:	f7fe f99a 	bl	8000260 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001f2c:	f7fe fae6 	bl	80004fc <HAL_SYSTICK_IRQHandler>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM6_DAC_IRQHandler+0x10>)
 8001f3a:	f7ff fdef 	bl	8001b1c <HAL_TIM_IRQHandler>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000002c 	.word	0x2000002c

08001f48 <main>:
void TIMER6_Init(void);
void GPIO_Init(void);
TIM_HandleTypeDef htimer6;

int main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001f4c:	f7fe f942 	bl	80001d4 <HAL_Init>

	Sysclk_Config(SYS_CLOCK_FREQ_48_MHZ);
 8001f50:	2030      	movs	r0, #48	; 0x30
 8001f52:	f000 f80b 	bl	8001f6c <Sysclk_Config>
	GPIO_Init();
 8001f56:	f000 f89d 	bl	8002094 <GPIO_Init>
	TIMER6_Init();
 8001f5a:	f000 f873 	bl	8002044 <TIMER6_Init>

	//Lets start timer
	HAL_TIM_Base_Start_IT(&htimer6);
 8001f5e:	4802      	ldr	r0, [pc, #8]	; (8001f68 <main+0x20>)
 8001f60:	f7ff fdb2 	bl	8001ac8 <HAL_TIM_Base_Start_IT>


	while(1);
 8001f64:	e7fe      	b.n	8001f64 <main+0x1c>
 8001f66:	bf00      	nop
 8001f68:	2000002c 	.word	0x2000002c

08001f6c <Sysclk_Config>:

	return 0;
}

void Sysclk_Config(uint8_t freq)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b092      	sub	sp, #72	; 0x48
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]

	uint8_t latency = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		RCC_OscInitTypeDef osc_init;
		RCC_ClkInitTypeDef clk_init;

		osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61fb      	str	r3, [r7, #28]
		osc_init.HSIState = RCC_HSI_ON;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
		osc_init.HSICalibrationValue = 16;
 8001f84:	2310      	movs	r3, #16
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
		osc_init.PLL.PLLState = RCC_PLL_ON;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
		osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38

		switch(freq)
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2b30      	cmp	r3, #48	; 0x30
 8001f96:	d00d      	beq.n	8001fb4 <Sysclk_Config+0x48>
 8001f98:	2b48      	cmp	r3, #72	; 0x48
 8001f9a:	d014      	beq.n	8001fc6 <Sysclk_Config+0x5a>
 8001f9c:	2b18      	cmp	r3, #24
 8001f9e:	d000      	beq.n	8001fa2 <Sysclk_Config+0x36>
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
				latency = FLASH_LATENCY_2;
				break;
			}
			default:
				return ;
 8001fa0:	e04a      	b.n	8002038 <Sysclk_Config+0xcc>
				osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV3;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	643b      	str	r3, [r7, #64]	; 0x40
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 8001fa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
				latency = FLASH_LATENCY_0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001fb2:	e011      	b.n	8001fd8 <Sysclk_Config+0x6c>
				osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV2;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL12;
 8001fb8:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
				latency = FLASH_LATENCY_1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001fc4:	e008      	b.n	8001fd8 <Sysclk_Config+0x6c>
				osc_init.PLL.PREDIV = RCC_CFGR2_PREDIV_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
				osc_init.PLL.PLLMUL = RCC_CFGR_PLLMUL9;
 8001fca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
				latency = FLASH_LATENCY_2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001fd6:	bf00      	nop
		}
		if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fc3f 	bl	8000860 <HAL_RCC_OscConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <Sysclk_Config+0x80>
		{
			Error_handler();
 8001fe8:	f000 f876 	bl	80020d8 <Error_handler>
		}
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8001fec:	230f      	movs	r3, #15
 8001fee:	60bb      	str	r3, [r7, #8]
							RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffc:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002002:	61bb      	str	r3, [r7, #24]

		if(HAL_RCC_ClockConfig(&clk_init, latency)!= HAL_OK)
 8002004:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002008:	f107 0308 	add.w	r3, r7, #8
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb3c 	bl	800168c <HAL_RCC_ClockConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <Sysclk_Config+0xb2>
		{
			Error_handler();
 800201a:	f000 f85d 	bl	80020d8 <Error_handler>
		}
		//Systick configuration
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800201e:	f7ff fd1b 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <Sysclk_Config+0xd4>)
 8002026:	fba3 2302 	umull	r2, r3, r3, r2
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa3c 	bl	80004aa <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002032:	2004      	movs	r0, #4
 8002034:	f7fe fa46 	bl	80004c4 <HAL_SYSTICK_CLKSourceConfig>
}
 8002038:	3748      	adds	r7, #72	; 0x48
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	//__HAL_RCC_TIM6_CLK_ENABLE();
	htimer6.Instance = TIM6;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <TIMER6_Init+0x2c>)
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <TIMER6_Init+0x30>)
 800204c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 9;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <TIMER6_Init+0x2c>)
 8002050:	2209      	movs	r2, #9
 8002052:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 48-1;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <TIMER6_Init+0x2c>)
 8002056:	222f      	movs	r2, #47	; 0x2f
 8002058:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htimer6)!= HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <TIMER6_Init+0x2c>)
 800205c:	f7ff fd08 	bl	8001a70 <HAL_TIM_Base_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <TIMER6_Init+0x26>
	{
		Error_handler();
 8002066:	f000 f837 	bl	80020d8 <Error_handler>
	}
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000002c 	.word	0x2000002c
 8002074:	40001000 	.word	0x40001000

08002078 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002080:	2120      	movs	r1, #32
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f7fe fbd1 	bl	800082c <HAL_GPIO_TogglePin>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <GPIO_Init>:
void GPIO_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <GPIO_Init+0x40>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <GPIO_Init+0x40>)
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	6153      	str	r3, [r2, #20]
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <GPIO_Init+0x40>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
	ledgpio.Pin = GPIO_PIN_5;
 80020ba:	2320      	movs	r3, #32
 80020bc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f7fe fa27 	bl	8000518 <HAL_GPIO_Init>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000

080020d8 <Error_handler>:
void Error_handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	while(1);
 80020dc:	e7fe      	b.n	80020dc <Error_handler+0x4>
	...

080020e0 <HAL_MspInit>:
 *  Created on: Jun 11, 2020
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f7fe f9ab 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exception
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_MspInit+0x40>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <HAL_MspInit+0x40>)
 80020f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80020f4:	6253      	str	r3, [r2, #36]	; 0x24
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	f06f 000b 	mvn.w	r0, #11
 80020fe:	f7fe f9aa 	bl	8000456 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	f06f 000a 	mvn.w	r0, #10
 800210a:	f7fe f9a4 	bl	8000456 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	f06f 0009 	mvn.w	r0, #9
 8002116:	f7fe f99e 	bl	8000456 <HAL_NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	// 1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	61d3      	str	r3, [r2, #28]
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002144:	2036      	movs	r0, #54	; 0x36
 8002146:	f7fe f9a2 	bl	800048e <HAL_NVIC_EnableIRQ>

	//3. Setup the priority for TIM6_DAC_TRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	210f      	movs	r1, #15
 800214e:	2036      	movs	r0, #54	; 0x36
 8002150:	f7fe f981 	bl	8000456 <HAL_NVIC_SetPriority>
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000

08002160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <SystemInit+0x28>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <SystemInit+0x28>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SystemInit+0x28>)
 8002176:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800217a:	609a      	str	r2, [r3, #8]
#endif
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002190:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002192:	e003      	b.n	800219c <LoopCopyDataInit>

08002194 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002196:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002198:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800219a:	3104      	adds	r1, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800219c:	480b      	ldr	r0, [pc, #44]	; (80021cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021a4:	d3f6      	bcc.n	8002194 <CopyDataInit>
	ldr	r2, =_sbss
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80021a8:	e002      	b.n	80021b0 <LoopFillZerobss>

080021aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021ac:	f842 3b04 	str.w	r3, [r2], #4

080021b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <LoopForever+0x16>)
	cmp	r2, r3
 80021b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021b4:	d3f9      	bcc.n	80021aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021b6:	f7ff ffd3 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ba:	f000 f811 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021be:	f7ff fec3 	bl	8001f48 <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021c4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80021c8:	08002278 	.word	0x08002278
	ldr	r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80021d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80021d8:	2000006c 	.word	0x2000006c

080021dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_2_IRQHandler>
	...

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4e0d      	ldr	r6, [pc, #52]	; (8002218 <__libc_init_array+0x38>)
 80021e4:	4c0d      	ldr	r4, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e6:	1ba4      	subs	r4, r4, r6
 80021e8:	10a4      	asrs	r4, r4, #2
 80021ea:	2500      	movs	r5, #0
 80021ec:	42a5      	cmp	r5, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	4e0b      	ldr	r6, [pc, #44]	; (8002220 <__libc_init_array+0x40>)
 80021f2:	4c0c      	ldr	r4, [pc, #48]	; (8002224 <__libc_init_array+0x44>)
 80021f4:	f000 f818 	bl	8002228 <_init>
 80021f8:	1ba4      	subs	r4, r4, r6
 80021fa:	10a4      	asrs	r4, r4, #2
 80021fc:	2500      	movs	r5, #0
 80021fe:	42a5      	cmp	r5, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002208:	4798      	blx	r3
 800220a:	3501      	adds	r5, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002212:	4798      	blx	r3
 8002214:	3501      	adds	r5, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	08002270 	.word	0x08002270
 800221c:	08002270 	.word	0x08002270
 8002220:	08002270 	.word	0x08002270
 8002224:	08002274 	.word	0x08002274

08002228 <_init>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	bf00      	nop
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr

08002234 <_fini>:
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	bf00      	nop
 8002238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223a:	bc08      	pop	{r3}
 800223c:	469e      	mov	lr, r3
 800223e:	4770      	bx	lr
