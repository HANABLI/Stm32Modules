/*
 * stm32f303xx_spi_driver.c
 *
 *  Created on: May 21, 2020
 *      Author: Nabli Hatem
 */

#include "stm32f303xx.h"

/*
 * Peripheral Clock setup
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint8_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}
void SPI_PeriControle(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	}
	else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}
	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}

/*
 * Init and DeInit
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	//first lets configure the SPI_CR1 register


	//uint32_t tempreg = 0 ;
	//0. SPE Enable


	pSPIHandle->pSPIx->CR1  |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR ;
	//2. configure bus
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		pSPIHandle->pSPIx->CR1  &= ~(1 << SPI_CR1_BIDIMODE);
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		pSPIHandle->pSPIx->CR1  |= (1 << SPI_CR1_BIDIMODE);
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX)
	{
		pSPIHandle->pSPIx->CR1  &= ~(1 << SPI_CR1_BIDIMODE);
		pSPIHandle->pSPIx->CR1  |= (1 << SPI_CR1_RXONLY);
	}
	//3. speed configuration

	pSPIHandle->pSPIx->CR1  |= pSPIHandle->SPI_Config.SPI_ClkSpeed << SPI_CR1_BR;


	//5. CPHA config

	pSPIHandle->pSPIx->CR1  |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;

	//6. CPOL config

	pSPIHandle->pSPIx->CR1  |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
	//7. SSM config

	pSPIHandle->pSPIx->CR1  |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;

	pSPIHandle->pSPIx->CR1  |= pSPIHandle->SPI_Config.SPI_SPE << SPI_CR1_SPE;
	//1. configure Device Mode


	//tempreg = 0;
	//4. DFF config

	pSPIHandle->pSPIx->CR2  |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR2_DS;
	//pSPIHandle->pSPIx->CR2 = tempreg;
}
void SPI_SSIConfig(SPI_RegDef_t * pSPIx,uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
	}
	else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t * pSPIx,uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
	}
	else
	{
		pSPIx->CR2 &= ~(1<< SPI_CR2_SSOE);
	}
}
void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
		{
			SPI1_REG_RESET();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_REG_RESET();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_REG_RESET();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_REG_RESET();
		}
}
/*
 * Data send and receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while(Len>0)
	{
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)==FLAG_RESET);
		if(pSPIx->CR2 & (SPI_DS_8BITS << SPI_CR2_DS))
		{
			pSPIx->DR = *pTxBuffer;
			Len--;
			pTxBuffer++;

		}
		else if(pSPIx->CR2 & (SPI_DS_16BITS << SPI_CR2_DS))
		{
			pSPIx->DR = *(uint16_t*)pTxBuffer;
			Len--;
			Len--;

			(uint16_t*)pTxBuffer++;
		}
	}
}
/*
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);
*/
