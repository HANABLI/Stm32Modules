/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include<stdint.h>

#define RCC_BASE_ADDRESS			0x40021000UL
#define RCC_CFGR_OFFSET 			0x04
#define RCC_CFGR_ENR_ADDRESS		(RCC_BASE_ADDRESS + RCC_AHB_OFFSET)
#define GPIOA_BASE_ADDRESS 			0x48000000UL
#define GPIOA_MODE_OFFSET 			0x00
#define RCC_AHB_OFFSET				0x14
#define GPIOA_ALT_HIGH_FT_OFFSET	0x24
#define RCC_AHB_ADDRESS				(RCC_BASE_ADDRESS + RCC_AHB_OFFSET)
#define GPIOA_MODE_ENR_ADDRESS      (GPIOA_BASE_ADDRESS + GPIOA_MODE_OFFSET)
#define GPIOA_ALT_FNT_ADDRESS		(GPIOA_BASE_ADDRESS + GPIOA_ALT_HIGH_FT_OFFSET)
int main(void)
{
	/* Configure the RCC_CFGR MCO bit fields to select HSI as clock source*/
	uint32_t *pRccCfgrReg = (uint32_t*) AHB_ENR_ADDRESS;

	*pRccCfgrReg &= ~(0x07 << 24);

	/* Configure PA8 to AF0 mode to behave as MCO signal */

	/* Enable the peripheral clock for GPIOA */
	uint32_t *pRccAhbReg = (uint32_t*) RCC_AHB_ADDRESS;
	*pRccAhbReg |= (1 <<17);

	/* Configure the mode of GPIO pin8 as alternate function mode */
	uint32_t *pGpioaModeReg = (uint32_t*) GPIOA_MODE_ENR_ADDRESS;

	*pGpioaModeReg &= ~(0x3 << 16);
	*pGpioaModeReg |= (0x2 << 16);


	/* Configure the alternation function register to set the mode 0 for PA8 */
	uint32_t *pGpioaAltFunHighReg = (uint32_t*) GPIOA_ALT_FNT_ADDRESS;

	*pGpioaAltFunHighReg &= ~(0xf << 0);

	for(;;);
}
