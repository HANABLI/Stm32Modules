
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800168c  0800168c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d4  080016d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080016d4  080016d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d4  080016d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080016dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000010  080016ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080016ec  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bd1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001046  00000000  00000000  00026c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  00027c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00028210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b9ef  00000000  00000000  00028730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004f54  00000000  00000000  0004411f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5181  00000000  00000000  00049073  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001628  00000000  00000000  000ee270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001674 	.word	0x08001674

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08001674 	.word	0x08001674

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <HAL_Init+0x28>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_Init+0x28>)
 80001ee:	f043 0310 	orr.w	r3, r3, #16
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f4:	2003      	movs	r0, #3
 80001f6:	f000 f92b 	bl	8000450 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 f808 	bl	8000210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000200:	f001 f96e 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000204:	2300      	movs	r3, #0
}
 8000206:	4618      	mov	r0, r3
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40022000 	.word	0x40022000

08000210 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_InitTick+0x54>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <HAL_InitTick+0x58>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f943 	bl	80004ba <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800023a:	2301      	movs	r3, #1
 800023c:	e00e      	b.n	800025c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b0f      	cmp	r3, #15
 8000242:	d80a      	bhi.n	800025a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000244:	2200      	movs	r2, #0
 8000246:	6879      	ldr	r1, [r7, #4]
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 f90b 	bl	8000466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <HAL_InitTick+0x5c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000256:	2300      	movs	r3, #0
 8000258:	e000      	b.n	800025c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800025a:	2301      	movs	r3, #1
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000004 	.word	0x20000004
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	2000002c 	.word	0x2000002c

08000298 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;  
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000002c 	.word	0x2000002c

080002b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <__NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	2b00      	cmp	r3, #0
 8000324:	db0b      	blt.n	800033e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f003 021f 	and.w	r2, r3, #31
 800032c:	4907      	ldr	r1, [pc, #28]	; (800034c <__NVIC_EnableIRQ+0x38>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	095b      	lsrs	r3, r3, #5
 8000334:	2001      	movs	r0, #1
 8000336:	fa00 f202 	lsl.w	r2, r0, r2
 800033a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e100 	.word	0xe000e100

08000350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	6039      	str	r1, [r7, #0]
 800035a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800035c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000360:	2b00      	cmp	r3, #0
 8000362:	db0a      	blt.n	800037a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	b2da      	uxtb	r2, r3
 8000368:	490c      	ldr	r1, [pc, #48]	; (800039c <__NVIC_SetPriority+0x4c>)
 800036a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036e:	0112      	lsls	r2, r2, #4
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	440b      	add	r3, r1
 8000374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000378:	e00a      	b.n	8000390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4908      	ldr	r1, [pc, #32]	; (80003a0 <__NVIC_SetPriority+0x50>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f003 030f 	and.w	r3, r3, #15
 8000386:	3b04      	subs	r3, #4
 8000388:	0112      	lsls	r2, r2, #4
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	440b      	add	r3, r1
 800038e:	761a      	strb	r2, [r3, #24]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000e100 	.word	0xe000e100
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b089      	sub	sp, #36	; 0x24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f003 0307 	and.w	r3, r3, #7
 80003b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	f1c3 0307 	rsb	r3, r3, #7
 80003be:	2b04      	cmp	r3, #4
 80003c0:	bf28      	it	cs
 80003c2:	2304      	movcs	r3, #4
 80003c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3304      	adds	r3, #4
 80003ca:	2b06      	cmp	r3, #6
 80003cc:	d902      	bls.n	80003d4 <NVIC_EncodePriority+0x30>
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	3b03      	subs	r3, #3
 80003d2:	e000      	b.n	80003d6 <NVIC_EncodePriority+0x32>
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d8:	f04f 32ff 	mov.w	r2, #4294967295
 80003dc:	69bb      	ldr	r3, [r7, #24]
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	43da      	mvns	r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	401a      	ands	r2, r3
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ec:	f04f 31ff 	mov.w	r1, #4294967295
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43d9      	mvns	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003fc:	4313      	orrs	r3, r2
         );
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3724      	adds	r7, #36	; 0x24
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
	...

0800040c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800041c:	d301      	bcc.n	8000422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800041e:	2301      	movs	r3, #1
 8000420:	e00f      	b.n	8000442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <SysTick_Config+0x40>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3b01      	subs	r3, #1
 8000428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800042a:	210f      	movs	r1, #15
 800042c:	f04f 30ff 	mov.w	r0, #4294967295
 8000430:	f7ff ff8e 	bl	8000350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <SysTick_Config+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <SysTick_Config+0x40>)
 800043c:	2207      	movs	r2, #7
 800043e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	e000e010 	.word	0xe000e010

08000450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ff29 	bl	80002b0 <__NVIC_SetPriorityGrouping>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	4603      	mov	r3, r0
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
 8000472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000478:	f7ff ff3e 	bl	80002f8 <__NVIC_GetPriorityGrouping>
 800047c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	6978      	ldr	r0, [r7, #20]
 8000484:	f7ff ff8e 	bl	80003a4 <NVIC_EncodePriority>
 8000488:	4602      	mov	r2, r0
 800048a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff5d 	bl	8000350 <__NVIC_SetPriority>
}
 8000496:	bf00      	nop
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff31 	bl	8000314 <__NVIC_EnableIRQ>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f7ff ffa2 	bl	800040c <SysTick_Config>
 80004c8:	4603      	mov	r3, r0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004d6:	f000 f802 	bl	80004de <HAL_SYSTICK_Callback>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}

080004de <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004fa:	e160      	b.n	80007be <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	2101      	movs	r1, #1
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	fa01 f303 	lsl.w	r3, r1, r3
 8000508:	4013      	ands	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b00      	cmp	r3, #0
 8000510:	f000 8152 	beq.w	80007b8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d003      	beq.n	8000524 <HAL_GPIO_Init+0x38>
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b12      	cmp	r3, #18
 8000522:	d123      	bne.n	800056c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	08da      	lsrs	r2, r3, #3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3208      	adds	r2, #8
 800052c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000530:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	f003 0307 	and.w	r3, r3, #7
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	220f      	movs	r2, #15
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	4013      	ands	r3, r2
 8000546:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	691a      	ldr	r2, [r3, #16]
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	f003 0307 	and.w	r3, r3, #7
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	4313      	orrs	r3, r2
 800055c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	08da      	lsrs	r2, r3, #3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3208      	adds	r2, #8
 8000566:	6939      	ldr	r1, [r7, #16]
 8000568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2203      	movs	r2, #3
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	4013      	ands	r3, r2
 8000582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	f003 0203 	and.w	r2, r3, #3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	4313      	orrs	r3, r2
 8000598:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <HAL_GPIO_Init+0xd4>
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d007      	beq.n	80005c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b4:	2b11      	cmp	r3, #17
 80005b6:	d003      	beq.n	80005c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b12      	cmp	r3, #18
 80005be:	d130      	bne.n	8000622 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2203      	movs	r2, #3
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	43db      	mvns	r3, r3
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4013      	ands	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005f6:	2201      	movs	r2, #1
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	4013      	ands	r3, r2
 8000604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	091b      	lsrs	r3, r3, #4
 800060c:	f003 0201 	and.w	r2, r3, #1
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4313      	orrs	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	2203      	movs	r2, #3
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	4013      	ands	r3, r2
 8000638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4313      	orrs	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	693a      	ldr	r2, [r7, #16]
 8000650:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	2b00      	cmp	r3, #0
 800065c:	f000 80ac 	beq.w	80007b8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000660:	4b5e      	ldr	r3, [pc, #376]	; (80007dc <HAL_GPIO_Init+0x2f0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a5d      	ldr	r2, [pc, #372]	; (80007dc <HAL_GPIO_Init+0x2f0>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b5b      	ldr	r3, [pc, #364]	; (80007dc <HAL_GPIO_Init+0x2f0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000678:	4a59      	ldr	r2, [pc, #356]	; (80007e0 <HAL_GPIO_Init+0x2f4>)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	089b      	lsrs	r3, r3, #2
 800067e:	3302      	adds	r3, #2
 8000680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	220f      	movs	r2, #15
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	43db      	mvns	r3, r3
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4013      	ands	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006a2:	d025      	beq.n	80006f0 <HAL_GPIO_Init+0x204>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a4f      	ldr	r2, [pc, #316]	; (80007e4 <HAL_GPIO_Init+0x2f8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d01f      	beq.n	80006ec <HAL_GPIO_Init+0x200>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a4e      	ldr	r2, [pc, #312]	; (80007e8 <HAL_GPIO_Init+0x2fc>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d019      	beq.n	80006e8 <HAL_GPIO_Init+0x1fc>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a4d      	ldr	r2, [pc, #308]	; (80007ec <HAL_GPIO_Init+0x300>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d013      	beq.n	80006e4 <HAL_GPIO_Init+0x1f8>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a4c      	ldr	r2, [pc, #304]	; (80007f0 <HAL_GPIO_Init+0x304>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d00d      	beq.n	80006e0 <HAL_GPIO_Init+0x1f4>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a4b      	ldr	r2, [pc, #300]	; (80007f4 <HAL_GPIO_Init+0x308>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d007      	beq.n	80006dc <HAL_GPIO_Init+0x1f0>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <HAL_GPIO_Init+0x30c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d101      	bne.n	80006d8 <HAL_GPIO_Init+0x1ec>
 80006d4:	2306      	movs	r3, #6
 80006d6:	e00c      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006d8:	2307      	movs	r3, #7
 80006da:	e00a      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006dc:	2305      	movs	r3, #5
 80006de:	e008      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006e0:	2304      	movs	r3, #4
 80006e2:	e006      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006e4:	2303      	movs	r3, #3
 80006e6:	e004      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006e8:	2302      	movs	r3, #2
 80006ea:	e002      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <HAL_GPIO_Init+0x206>
 80006f0:	2300      	movs	r3, #0
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	f002 0203 	and.w	r2, r2, #3
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	4093      	lsls	r3, r2
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	4313      	orrs	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000702:	4937      	ldr	r1, [pc, #220]	; (80007e0 <HAL_GPIO_Init+0x2f4>)
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	089b      	lsrs	r3, r3, #2
 8000708:	3302      	adds	r3, #2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000710:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <HAL_GPIO_Init+0x310>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	43db      	mvns	r3, r3
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000734:	4a31      	ldr	r2, [pc, #196]	; (80007fc <HAL_GPIO_Init+0x310>)
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <HAL_GPIO_Init+0x310>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	43db      	mvns	r3, r3
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4013      	ands	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d003      	beq.n	800075e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800075e:	4a27      	ldr	r2, [pc, #156]	; (80007fc <HAL_GPIO_Init+0x310>)
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <HAL_GPIO_Init+0x310>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43db      	mvns	r3, r3
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <HAL_GPIO_Init+0x310>)
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_GPIO_Init+0x310>)
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <HAL_GPIO_Init+0x310>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	fa22 f303 	lsr.w	r3, r2, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	f47f ae97 	bne.w	80004fc <HAL_GPIO_Init+0x10>
  }
}
 80007ce:	bf00      	nop
 80007d0:	371c      	adds	r7, #28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010000 	.word	0x40010000
 80007e4:	48000400 	.word	0x48000400
 80007e8:	48000800 	.word	0x48000800
 80007ec:	48000c00 	.word	0x48000c00
 80007f0:	48001000 	.word	0x48001000
 80007f4:	48001400 	.word	0x48001400
 80007f8:	48001800 	.word	0x48001800
 80007fc:	40010400 	.word	0x40010400

08000800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b08b      	sub	sp, #44	; 0x2c
 8000804:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f003 030c 	and.w	r3, r3, #12
 8000826:	2b04      	cmp	r3, #4
 8000828:	d002      	beq.n	8000830 <HAL_RCC_GetSysClockFreq+0x30>
 800082a:	2b08      	cmp	r3, #8
 800082c:	d003      	beq.n	8000836 <HAL_RCC_GetSysClockFreq+0x36>
 800082e:	e03f      	b.n	80008b0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000832:	623b      	str	r3, [r7, #32]
      break;
 8000834:	e03f      	b.n	80008b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800083c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000840:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	fa92 f2a2 	rbit	r2, r2
 8000848:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	fab2 f282 	clz	r2, r2
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	40d3      	lsrs	r3, r2
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8000856:	5cd3      	ldrb	r3, [r2, r3]
 8000858:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	220f      	movs	r2, #15
 8000864:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	fa92 f2a2 	rbit	r2, r2
 800086c:	60fa      	str	r2, [r7, #12]
  return result;
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	fab2 f282 	clz	r2, r2
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	40d3      	lsrs	r3, r2
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d008      	beq.n	800089a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
 8000898:	e007      	b.n	80008aa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fbb2 f2f3 	udiv	r2, r2, r3
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	623b      	str	r3, [r7, #32]
      break;
 80008ae:	e002      	b.n	80008b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80008b2:	623b      	str	r3, [r7, #32]
      break;
 80008b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80008b6:	6a3b      	ldr	r3, [r7, #32]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	372c      	adds	r7, #44	; 0x2c
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000
 80008c8:	007a1200 	.word	0x007a1200
 80008cc:	080016ac 	.word	0x080016ac
 80008d0:	080016bc 	.word	0x080016bc

080008d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000000c 	.word	0x2000000c

080008ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80008f2:	f7ff ffef 	bl	80008d4 <HAL_RCC_GetHCLKFreq>
 80008f6:	4601      	mov	r1, r0
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000900:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000904:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	fa92 f2a2 	rbit	r2, r2
 800090c:	603a      	str	r2, [r7, #0]
  return result;
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	40d3      	lsrs	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_RCC_GetPCLK1Freq+0x40>)
 800091a:	5cd3      	ldrb	r3, [r2, r3]
 800091c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000
 800092c:	080016cc 	.word	0x080016cc

08000930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000936:	f7ff ffcd 	bl	80008d4 <HAL_RCC_GetHCLKFreq>
 800093a:	4601      	mov	r1, r0
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000944:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000948:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	fa92 f2a2 	rbit	r2, r2
 8000950:	603a      	str	r2, [r7, #0]
  return result;
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	fab2 f282 	clz	r2, r2
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	40d3      	lsrs	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_RCC_GetPCLK2Freq+0x40>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	080016cc 	.word	0x080016cc

08000974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e040      	b.n	8000a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fdc4 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2224      	movs	r2, #36	; 0x24
 80009a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0201 	bic.w	r2, r2, #1
 80009b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f98c 	bl	8000cd0 <UART_SetConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d101      	bne.n	80009c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e022      	b.n	8000a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 fb9a 	bl	8001104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80009de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80009ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 fc21 	bl	8001248 <UART_CheckIdleState>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a24:	2b20      	cmp	r3, #32
 8000a26:	f040 8081 	bne.w	8000b2c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <HAL_UART_Transmit+0x26>
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e079      	b.n	8000b2e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d101      	bne.n	8000a48 <HAL_UART_Transmit+0x38>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e072      	b.n	8000b2e <HAL_UART_Transmit+0x11e>
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2200      	movs	r2, #0
 8000a54:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2221      	movs	r2, #33	; 0x21
 8000a5a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8000a5c:	f7ff fc1c 	bl	8000298 <HAL_GetTick>
 8000a60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	88fa      	ldrh	r2, [r7, #6]
 8000a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a7a:	d108      	bne.n	8000a8e <HAL_UART_Transmit+0x7e>
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	e003      	b.n	8000a96 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000a96:	e02d      	b.n	8000af4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f000 fc15 	bl	80012d2 <UART_WaitOnFlagUntilTimeout>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e03d      	b.n	8000b2e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	881a      	ldrh	r2, [r3, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ac4:	b292      	uxth	r2, r2
 8000ac6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	3302      	adds	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	e008      	b.n	8000ae2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	b292      	uxth	r2, r2
 8000ada:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1cb      	bne.n	8000a98 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2200      	movs	r2, #0
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f000 fbe1 	bl	80012d2 <UART_WaitOnFlagUntilTimeout>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e009      	b.n	8000b2e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e000      	b.n	8000b2e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8000b2c:	2302      	movs	r3, #2
  }
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b08a      	sub	sp, #40	; 0x28
 8000b3a:	af02      	add	r7, sp, #8
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4613      	mov	r3, r2
 8000b44:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	f040 80bb 	bne.w	8000cc6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <HAL_UART_Receive+0x26>
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e0b3      	b.n	8000cc8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d101      	bne.n	8000b6e <HAL_UART_Receive+0x38>
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	e0ac      	b.n	8000cc8 <HAL_UART_Receive+0x192>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2222      	movs	r2, #34	; 0x22
 8000b80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8000b82:	f7ff fb89 	bl	8000298 <HAL_GetTick>
 8000b86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_UART_Receive+0x8a>
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d105      	bne.n	8000bb6 <HAL_UART_Receive+0x80>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000bb4:	e02d      	b.n	8000c12 <HAL_UART_Receive+0xdc>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	22ff      	movs	r2, #255	; 0xff
 8000bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000bbe:	e028      	b.n	8000c12 <HAL_UART_Receive+0xdc>
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10d      	bne.n	8000be4 <HAL_UART_Receive+0xae>
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <HAL_UART_Receive+0xa4>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000bd8:	e01b      	b.n	8000c12 <HAL_UART_Receive+0xdc>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	227f      	movs	r2, #127	; 0x7f
 8000bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000be2:	e016      	b.n	8000c12 <HAL_UART_Receive+0xdc>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000bec:	d10d      	bne.n	8000c0a <HAL_UART_Receive+0xd4>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d104      	bne.n	8000c00 <HAL_UART_Receive+0xca>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	227f      	movs	r2, #127	; 0x7f
 8000bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000bfe:	e008      	b.n	8000c12 <HAL_UART_Receive+0xdc>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	223f      	movs	r2, #63	; 0x3f
 8000c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000c08:	e003      	b.n	8000c12 <HAL_UART_Receive+0xdc>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000c18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c22:	d108      	bne.n	8000c36 <HAL_UART_Receive+0x100>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d104      	bne.n	8000c36 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	e003      	b.n	8000c3e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8000c3e:	e033      	b.n	8000ca8 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2200      	movs	r2, #0
 8000c48:	2120      	movs	r1, #32
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f000 fb41 	bl	80012d2 <UART_WaitOnFlagUntilTimeout>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e036      	b.n	8000cc8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10c      	bne.n	8000c7a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	8a7b      	ldrh	r3, [r7, #18]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3302      	adds	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	e00d      	b.n	8000c96 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	8a7b      	ldrh	r3, [r7, #18]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	3301      	adds	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1c5      	bne.n	8000c40 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8000cc6:	2302      	movs	r3, #2
  }
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4bac      	ldr	r3, [pc, #688]	; (8000fb0 <UART_SetConfig+0x2e0>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	6939      	ldr	r1, [r7, #16]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a9a      	ldr	r2, [pc, #616]	; (8000fb4 <UART_SetConfig+0x2e4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d121      	bne.n	8000d94 <UART_SetConfig+0xc4>
 8000d50:	4b99      	ldr	r3, [pc, #612]	; (8000fb8 <UART_SetConfig+0x2e8>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d817      	bhi.n	8000d8c <UART_SetConfig+0xbc>
 8000d5c:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <UART_SetConfig+0x94>)
 8000d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d62:	bf00      	nop
 8000d64:	08000d75 	.word	0x08000d75
 8000d68:	08000d81 	.word	0x08000d81
 8000d6c:	08000d87 	.word	0x08000d87
 8000d70:	08000d7b 	.word	0x08000d7b
 8000d74:	2301      	movs	r3, #1
 8000d76:	77fb      	strb	r3, [r7, #31]
 8000d78:	e0b2      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	77fb      	strb	r3, [r7, #31]
 8000d7e:	e0af      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000d80:	2304      	movs	r3, #4
 8000d82:	77fb      	strb	r3, [r7, #31]
 8000d84:	e0ac      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000d86:	2308      	movs	r3, #8
 8000d88:	77fb      	strb	r3, [r7, #31]
 8000d8a:	e0a9      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	77fb      	strb	r3, [r7, #31]
 8000d90:	bf00      	nop
 8000d92:	e0a5      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a88      	ldr	r2, [pc, #544]	; (8000fbc <UART_SetConfig+0x2ec>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d123      	bne.n	8000de6 <UART_SetConfig+0x116>
 8000d9e:	4b86      	ldr	r3, [pc, #536]	; (8000fb8 <UART_SetConfig+0x2e8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000daa:	d012      	beq.n	8000dd2 <UART_SetConfig+0x102>
 8000dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db0:	d802      	bhi.n	8000db8 <UART_SetConfig+0xe8>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d007      	beq.n	8000dc6 <UART_SetConfig+0xf6>
 8000db6:	e012      	b.n	8000dde <UART_SetConfig+0x10e>
 8000db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dbc:	d00c      	beq.n	8000dd8 <UART_SetConfig+0x108>
 8000dbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000dc2:	d003      	beq.n	8000dcc <UART_SetConfig+0xfc>
 8000dc4:	e00b      	b.n	8000dde <UART_SetConfig+0x10e>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	77fb      	strb	r3, [r7, #31]
 8000dca:	e089      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	77fb      	strb	r3, [r7, #31]
 8000dd0:	e086      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	77fb      	strb	r3, [r7, #31]
 8000dd6:	e083      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000dd8:	2308      	movs	r3, #8
 8000dda:	77fb      	strb	r3, [r7, #31]
 8000ddc:	e080      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000dde:	2310      	movs	r3, #16
 8000de0:	77fb      	strb	r3, [r7, #31]
 8000de2:	bf00      	nop
 8000de4:	e07c      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a75      	ldr	r2, [pc, #468]	; (8000fc0 <UART_SetConfig+0x2f0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d123      	bne.n	8000e38 <UART_SetConfig+0x168>
 8000df0:	4b71      	ldr	r3, [pc, #452]	; (8000fb8 <UART_SetConfig+0x2e8>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000dfc:	d012      	beq.n	8000e24 <UART_SetConfig+0x154>
 8000dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e02:	d802      	bhi.n	8000e0a <UART_SetConfig+0x13a>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <UART_SetConfig+0x148>
 8000e08:	e012      	b.n	8000e30 <UART_SetConfig+0x160>
 8000e0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e0e:	d00c      	beq.n	8000e2a <UART_SetConfig+0x15a>
 8000e10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e14:	d003      	beq.n	8000e1e <UART_SetConfig+0x14e>
 8000e16:	e00b      	b.n	8000e30 <UART_SetConfig+0x160>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	77fb      	strb	r3, [r7, #31]
 8000e1c:	e060      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	77fb      	strb	r3, [r7, #31]
 8000e22:	e05d      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e24:	2304      	movs	r3, #4
 8000e26:	77fb      	strb	r3, [r7, #31]
 8000e28:	e05a      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	77fb      	strb	r3, [r7, #31]
 8000e2e:	e057      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e30:	2310      	movs	r3, #16
 8000e32:	77fb      	strb	r3, [r7, #31]
 8000e34:	bf00      	nop
 8000e36:	e053      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a61      	ldr	r2, [pc, #388]	; (8000fc4 <UART_SetConfig+0x2f4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d123      	bne.n	8000e8a <UART_SetConfig+0x1ba>
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <UART_SetConfig+0x2e8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e4e:	d012      	beq.n	8000e76 <UART_SetConfig+0x1a6>
 8000e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e54:	d802      	bhi.n	8000e5c <UART_SetConfig+0x18c>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <UART_SetConfig+0x19a>
 8000e5a:	e012      	b.n	8000e82 <UART_SetConfig+0x1b2>
 8000e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e60:	d00c      	beq.n	8000e7c <UART_SetConfig+0x1ac>
 8000e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e66:	d003      	beq.n	8000e70 <UART_SetConfig+0x1a0>
 8000e68:	e00b      	b.n	8000e82 <UART_SetConfig+0x1b2>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	77fb      	strb	r3, [r7, #31]
 8000e6e:	e037      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e70:	2302      	movs	r3, #2
 8000e72:	77fb      	strb	r3, [r7, #31]
 8000e74:	e034      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e76:	2304      	movs	r3, #4
 8000e78:	77fb      	strb	r3, [r7, #31]
 8000e7a:	e031      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	77fb      	strb	r3, [r7, #31]
 8000e80:	e02e      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e82:	2310      	movs	r3, #16
 8000e84:	77fb      	strb	r3, [r7, #31]
 8000e86:	bf00      	nop
 8000e88:	e02a      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <UART_SetConfig+0x2f8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d123      	bne.n	8000edc <UART_SetConfig+0x20c>
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <UART_SetConfig+0x2e8>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ea0:	d012      	beq.n	8000ec8 <UART_SetConfig+0x1f8>
 8000ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ea6:	d802      	bhi.n	8000eae <UART_SetConfig+0x1de>
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <UART_SetConfig+0x1ec>
 8000eac:	e012      	b.n	8000ed4 <UART_SetConfig+0x204>
 8000eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000eb2:	d00c      	beq.n	8000ece <UART_SetConfig+0x1fe>
 8000eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000eb8:	d003      	beq.n	8000ec2 <UART_SetConfig+0x1f2>
 8000eba:	e00b      	b.n	8000ed4 <UART_SetConfig+0x204>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	77fb      	strb	r3, [r7, #31]
 8000ec0:	e00e      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	77fb      	strb	r3, [r7, #31]
 8000ec6:	e00b      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000ec8:	2304      	movs	r3, #4
 8000eca:	77fb      	strb	r3, [r7, #31]
 8000ecc:	e008      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000ece:	2308      	movs	r3, #8
 8000ed0:	77fb      	strb	r3, [r7, #31]
 8000ed2:	e005      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	77fb      	strb	r3, [r7, #31]
 8000ed8:	bf00      	nop
 8000eda:	e001      	b.n	8000ee0 <UART_SetConfig+0x210>
 8000edc:	2310      	movs	r3, #16
 8000ede:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ee8:	f040 8090 	bne.w	800100c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8000eec:	7ffb      	ldrb	r3, [r7, #31]
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d86c      	bhi.n	8000fcc <UART_SetConfig+0x2fc>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <UART_SetConfig+0x228>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f1d 	.word	0x08000f1d
 8000efc:	08000f3d 	.word	0x08000f3d
 8000f00:	08000f5d 	.word	0x08000f5d
 8000f04:	08000fcd 	.word	0x08000fcd
 8000f08:	08000f79 	.word	0x08000f79
 8000f0c:	08000fcd 	.word	0x08000fcd
 8000f10:	08000fcd 	.word	0x08000fcd
 8000f14:	08000fcd 	.word	0x08000fcd
 8000f18:	08000f99 	.word	0x08000f99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8000f1c:	f7ff fce6 	bl	80008ec <HAL_RCC_GetPCLK1Freq>
 8000f20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	005a      	lsls	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	085b      	lsrs	r3, r3, #1
 8000f2c:	441a      	add	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	61bb      	str	r3, [r7, #24]
        break;
 8000f3a:	e04a      	b.n	8000fd2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8000f3c:	f7ff fcf8 	bl	8000930 <HAL_RCC_GetPCLK2Freq>
 8000f40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	005a      	lsls	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	085b      	lsrs	r3, r3, #1
 8000f4c:	441a      	add	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	61bb      	str	r3, [r7, #24]
        break;
 8000f5a:	e03a      	b.n	8000fd2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	085b      	lsrs	r3, r3, #1
 8000f62:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000f66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6852      	ldr	r2, [r2, #4]
 8000f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	61bb      	str	r3, [r7, #24]
        break;
 8000f76:	e02c      	b.n	8000fd2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8000f78:	f7ff fc42 	bl	8000800 <HAL_RCC_GetSysClockFreq>
 8000f7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	005a      	lsls	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	441a      	add	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	61bb      	str	r3, [r7, #24]
        break;
 8000f96:	e01c      	b.n	8000fd2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	085b      	lsrs	r3, r3, #1
 8000f9e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	61bb      	str	r3, [r7, #24]
        break;
 8000fae:	e010      	b.n	8000fd2 <UART_SetConfig+0x302>
 8000fb0:	efff69f3 	.word	0xefff69f3
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40004400 	.word	0x40004400
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	40004c00 	.word	0x40004c00
 8000fc8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	75fb      	strb	r3, [r7, #23]
        break;
 8000fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d916      	bls.n	8001006 <UART_SetConfig+0x336>
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d212      	bcs.n	8001006 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	897b      	ldrh	r3, [r7, #10]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	897a      	ldrh	r2, [r7, #10]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	e072      	b.n	80010ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
 800100a:	e06f      	b.n	80010ec <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800100c:	7ffb      	ldrb	r3, [r7, #31]
 800100e:	2b08      	cmp	r3, #8
 8001010:	d85b      	bhi.n	80010ca <UART_SetConfig+0x3fa>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <UART_SetConfig+0x348>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	0800103d 	.word	0x0800103d
 800101c:	0800105b 	.word	0x0800105b
 8001020:	08001079 	.word	0x08001079
 8001024:	080010cb 	.word	0x080010cb
 8001028:	08001095 	.word	0x08001095
 800102c:	080010cb 	.word	0x080010cb
 8001030:	080010cb 	.word	0x080010cb
 8001034:	080010cb 	.word	0x080010cb
 8001038:	080010b3 	.word	0x080010b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800103c:	f7ff fc56 	bl	80008ec <HAL_RCC_GetPCLK1Freq>
 8001040:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	085a      	lsrs	r2, r3, #1
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	441a      	add	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	61bb      	str	r3, [r7, #24]
        break;
 8001058:	e03a      	b.n	80010d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800105a:	f7ff fc69 	bl	8000930 <HAL_RCC_GetPCLK2Freq>
 800105e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	085a      	lsrs	r2, r3, #1
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	441a      	add	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	61bb      	str	r3, [r7, #24]
        break;
 8001076:	e02b      	b.n	80010d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	085b      	lsrs	r3, r3, #1
 800107e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001082:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6852      	ldr	r2, [r2, #4]
 800108a:	fbb3 f3f2 	udiv	r3, r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	61bb      	str	r3, [r7, #24]
        break;
 8001092:	e01d      	b.n	80010d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001094:	f7ff fbb4 	bl	8000800 <HAL_RCC_GetSysClockFreq>
 8001098:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	085a      	lsrs	r2, r3, #1
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	441a      	add	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	61bb      	str	r3, [r7, #24]
        break;
 80010b0:	e00e      	b.n	80010d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	085b      	lsrs	r3, r3, #1
 80010b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	61bb      	str	r3, [r7, #24]
        break;
 80010c8:	e002      	b.n	80010d0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
        break;
 80010ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d908      	bls.n	80010e8 <UART_SetConfig+0x418>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d204      	bcs.n	80010e8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	e001      	b.n	80010ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop

08001104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00a      	beq.n	800112e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00a      	beq.n	8001172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00a      	beq.n	80011b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01a      	beq.n	800121a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001202:	d10a      	bne.n	800121a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
  }
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001256:	f7ff f81f 	bl	8000298 <HAL_GetTick>
 800125a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b08      	cmp	r3, #8
 8001268:	d10e      	bne.n	8001288 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800126a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f82a 	bl	80012d2 <UART_WaitOnFlagUntilTimeout>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e020      	b.n	80012ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b04      	cmp	r3, #4
 8001294:	d10e      	bne.n	80012b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001296:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f814 	bl	80012d2 <UART_WaitOnFlagUntilTimeout>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e00a      	b.n	80012ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2220      	movs	r2, #32
 80012b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012e2:	e05d      	b.n	80013a0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ea:	d059      	beq.n	80013a0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ec:	f7fe ffd4 	bl	8000298 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d302      	bcc.n	8001302 <UART_WaitOnFlagUntilTimeout+0x30>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d11b      	bne.n	800133a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001310:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2220      	movs	r2, #32
 8001326:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2220      	movs	r2, #32
 800132c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e042      	b.n	80013c0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d02b      	beq.n	80013a0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001356:	d123      	bne.n	80013a0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001360:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001370:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2220      	movs	r2, #32
 8001386:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2220      	movs	r2, #32
 800138c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2220      	movs	r2, #32
 8001392:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e00f      	b.n	80013c0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4013      	ands	r3, r2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d092      	beq.n	80012e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <SysTick_Handler>:
 *      Author: Nabli Hatem
 */
#include "it.h"

void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80013cc:	f7fe ff50 	bl	8000270 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80013d0:	f7ff f87f 	bl	80004d2 <HAL_SYSTICK_IRQHandler>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <main>:
void UART2_Init(void);
void Error_handler(void);
UART_HandleTypeDef huart2;
char *user_data = "The application is running\r\n";
int main(void)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b09b      	sub	sp, #108	; 0x6c
 80013dc:	af00      	add	r7, sp, #0
	HAL_Init();
 80013de:	f7fe ff01 	bl	80001e4 <HAL_Init>
	SystemClockConfig();
 80013e2:	f000 f847 	bl	8001474 <SystemClockConfig>
	UART2_Init();
 80013e6:	f000 f84d 	bl	8001484 <UART2_Init>
	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, (uint16_t)(strlen(user_data)), HAL_MAX_DELAY);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <main+0x94>)
 80013ec:	681c      	ldr	r4, [r3, #0]
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <main+0x94>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feee 	bl	80001d4 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	4621      	mov	r1, r4
 8001402:	481b      	ldr	r0, [pc, #108]	; (8001470 <main+0x98>)
 8001404:	f7ff fb04 	bl	8000a10 <HAL_UART_Transmit>

	uint8_t rcvd_data;
	uint8_t data_buffer[100];
	uint8_t count=0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	while(1)
	{

		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);
 800140e:	f107 0166 	add.w	r1, r7, #102	; 0x66
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	4815      	ldr	r0, [pc, #84]	; (8001470 <main+0x98>)
 800141a:	f7ff fb8c 	bl	8000b36 <HAL_UART_Receive>
		if(rcvd_data == '\r')
 800141e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001422:	2b0d      	cmp	r3, #13
 8001424:	d00c      	beq.n	8001440 <main+0x68>
		{
			break;
		}
		else
		{
			data_buffer[count++] = rcvd_data;
 8001426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8001430:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001434:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001438:	440b      	add	r3, r1
 800143a:	f803 2c68 	strb.w	r2, [r3, #-104]
		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);
 800143e:	e7e6      	b.n	800140e <main+0x36>
			break;
 8001440:	bf00      	nop
		}

	}
	data_buffer[count++]='\r';
 8001442:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 800144c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001450:	4413      	add	r3, r2
 8001452:	220d      	movs	r2, #13
 8001454:	f803 2c68 	strb.w	r2, [r3, #-104]
	HAL_UART_Transmit(&huart2, data_buffer, count, HAL_MAX_DELAY);
 8001458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800145c:	b29a      	uxth	r2, r3
 800145e:	4639      	mov	r1, r7
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <main+0x98>)
 8001466:	f7ff fad3 	bl	8000a10 <HAL_UART_Transmit>

	while(1);
 800146a:	e7fe      	b.n	800146a <main+0x92>
 800146c:	20000008 	.word	0x20000008
 8001470:	20000030 	.word	0x20000030

08001474 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <UART2_Init>:
void UART2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <UART2_Init+0x44>)
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <UART2_Init+0x48>)
 800148c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <UART2_Init+0x44>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <UART2_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <UART2_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <UART2_Init+0x44>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <UART2_Init+0x44>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <UART2_Init+0x44>)
 80014b0:	220c      	movs	r2, #12
 80014b2:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!=HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <UART2_Init+0x44>)
 80014b6:	f7ff fa5d 	bl	8000974 <HAL_UART_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80014c0:	f000 f806 	bl	80014d0 <Error_handler>
	}
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000030 	.word	0x20000030
 80014cc:	40004400 	.word	0x40004400

080014d0 <Error_handler>:


void Error_handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_MspInit>:
 *  Created on: Jun 11, 2020
 *      Author: Nabli Hatem
 */
#include "stm32f3xx_hal.h"
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f7fe ffb3 	bl	8000450 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exception
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_MspInit+0x40>)
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <HAL_MspInit+0x40>)
 80014f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80014f4:	6253      	str	r3, [r2, #36]	; 0x24
	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	f06f 000b 	mvn.w	r0, #11
 80014fe:	f7fe ffb2 	bl	8000466 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	f06f 000a 	mvn.w	r0, #10
 800150a:	f7fe ffac 	bl	8000466 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	f06f 0009 	mvn.w	r0, #9
 8001516:	f7fe ffa6 	bl	8000466 <HAL_NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
  // here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0x84>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_UART_MspInit+0x84>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001536:	61d3      	str	r3, [r2, #28]
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_UART_MspInit+0x84>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_UART_MspInit+0x84>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_UART_MspInit+0x84>)
 800154a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154e:	6153      	str	r3, [r2, #20]
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_UART_MspInit+0x84>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations

	gpio_uart.Pin = GPIO_PIN_2;
 800155c:	2304      	movs	r3, #4
 800155e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_TX
 800156c:	2307      	movs	r3, #7
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f7fe ffb7 	bl	80004ec <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 800157e:	2308      	movs	r3, #8
 8001580:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f7fe ffae 	bl	80004ec <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC setting)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001590:	2026      	movs	r0, #38	; 0x26
 8001592:	f7fe ff84 	bl	800049e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	210f      	movs	r1, #15
 800159a:	2026      	movs	r0, #38	; 0x26
 800159c:	f7fe ff63 	bl	8000466 <HAL_NVIC_SetPriority>
}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <SystemInit+0x28>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <SystemInit+0x28>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SystemInit+0x28>)
 80015c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c6:	609a      	str	r2, [r3, #8]
#endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <LoopForever+0xe>)
	adds	r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
	ldr	r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <LoopForever+0x16>)
	cmp	r2, r3
 80015fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffd3 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f000 f811 	bl	800162c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fee5 	bl	80013d8 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001610:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001614:	080016dc 	.word	0x080016dc
	ldr	r0, =_sdata
 8001618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800161c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001620:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001624:	200000b0 	.word	0x200000b0

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <__libc_init_array>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4e0d      	ldr	r6, [pc, #52]	; (8001664 <__libc_init_array+0x38>)
 8001630:	4c0d      	ldr	r4, [pc, #52]	; (8001668 <__libc_init_array+0x3c>)
 8001632:	1ba4      	subs	r4, r4, r6
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	2500      	movs	r5, #0
 8001638:	42a5      	cmp	r5, r4
 800163a:	d109      	bne.n	8001650 <__libc_init_array+0x24>
 800163c:	4e0b      	ldr	r6, [pc, #44]	; (800166c <__libc_init_array+0x40>)
 800163e:	4c0c      	ldr	r4, [pc, #48]	; (8001670 <__libc_init_array+0x44>)
 8001640:	f000 f818 	bl	8001674 <_init>
 8001644:	1ba4      	subs	r4, r4, r6
 8001646:	10a4      	asrs	r4, r4, #2
 8001648:	2500      	movs	r5, #0
 800164a:	42a5      	cmp	r5, r4
 800164c:	d105      	bne.n	800165a <__libc_init_array+0x2e>
 800164e:	bd70      	pop	{r4, r5, r6, pc}
 8001650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001654:	4798      	blx	r3
 8001656:	3501      	adds	r5, #1
 8001658:	e7ee      	b.n	8001638 <__libc_init_array+0xc>
 800165a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800165e:	4798      	blx	r3
 8001660:	3501      	adds	r5, #1
 8001662:	e7f2      	b.n	800164a <__libc_init_array+0x1e>
 8001664:	080016d4 	.word	0x080016d4
 8001668:	080016d4 	.word	0x080016d4
 800166c:	080016d4 	.word	0x080016d4
 8001670:	080016d8 	.word	0x080016d8

08001674 <_init>:
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	bf00      	nop
 8001678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800167a:	bc08      	pop	{r3}
 800167c:	469e      	mov	lr, r3
 800167e:	4770      	bx	lr

08001680 <_fini>:
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001682:	bf00      	nop
 8001684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001686:	bc08      	pop	{r3}
 8001688:	469e      	mov	lr, r3
 800168a:	4770      	bx	lr
